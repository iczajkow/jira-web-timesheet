{"version":3,"sources":["appActions.ts","appReducer.ts","pages/Login/loginActions.ts","pages/Login/loginReducer.ts","pages/Home/worklogActions.ts","pages/Home/worklogReducer.ts","reducer.ts","api/users.ts","dispatchers/authenticate.ts","pages/Login/LoginForm/LoginForm.tsx","pages/Login/Login.tsx","api/worklogs.ts","utils/date.ts","pages/Home/utils/groupWorklogsByDates.ts","utils/duration.ts","pages/Home/utils/issueUrl.ts","pages/Home/WorklogCalendar/DateCell.tsx","pages/Home/UserSearch/UserSearch.tsx","pages/Home/WorklogCalendar/WorklogCalendar.tsx","pages/Home/DetailsSider/DetailsTitle.tsx","pages/Home/utils/sumTotalLoggedTime.ts","pages/Home/DetailsSider/DetailsSider.tsx","api/issues.ts","pages/Home/IssueSearch/IssueSearch.tsx","pages/Home/AddWorklogForm/AddWorklogForm.tsx","pages/Home/AddWorklogFormModal/AddWorklogFormModal.tsx","pages/Home/Home.tsx","dispatchers/worklogs.ts","utils/hooks.ts","pages/Home/utils/getWorklogForDate.ts","pages/Home/UserInfo/UserInfo.tsx","components/MainLayout/MainLayout.tsx","PrivateRoute.tsx","Routes.tsx","AppEntry.tsx","api/interceptors.ts","utils/security-notification.tsx","App.tsx","index.tsx"],"names":["AppActionTypes","setUserAction","payload","type","SetUser","setAuthenticatedAction","createAction","SetAuthenticated","logoutAction","Logout","clearUserAction","ClearUser","LoginActionTypes","defaultState","url","user","isAuthenticated","undefined","appReducer","createReducer","state","action","loginAction","Login","loginSuccess","LoginSuccess","setError","SetError","WorklogActionTypes","loginReducer","isLoggingIn","error","loadWorklogsAction","LoadWorklogs","loadedWorklogsAction","LoadedWorklogs","errorLoadingWorklogsAction","ErrorLoadingWorklogs","worklogReducer","isFetchingWorklogs","month","year","day","worklogs","rootReducer","combineReducers","appState","login","current","axios","get","authenticateDispatch","request","dispatch","post","authenticate","then","userResponse","data","catch","response","status","logoutDispatch","Text","Typography","WrappedLoginForm","Form","create","name","onSubmit","loginError","form","getFieldDecorator","event","preventDefault","validateFields","values","Item","rules","required","message","placeholder","addonBefore","valuePropName","initialValue","loading","htmlType","className","useDispatch","useSelector","to","pathname","style","height","Content","padding","md","span","offset","xl","loginRequest","getWorklogs","from","formattedDate","moment","format","formatDates","accountId","getDateSpan","startOf","toDate","endOf","groupWorklogsByDates","worklogList","userTimezone","reduce","groupedWorklogs","worklog","group1","group2","result","Object","assign","keys","previous","group2Value","previousValue","mergedValue","mergeWorklogs","groupedWorklogEntries","worklogEntry","startDate","tz","getDateInTimezone","started","entries","newEntries","id","issueId","issueKey","timeSpent","timeSpentSeconds","formatDuration","seconds","hours","Math","floor","minutes","stringMinutes","issueUrl","DateCellFactory","value","key","worklogsToRender","total","sum","fullDateLogged","date","map","index","target","href","fetchUsers","setState","fetching","params","query","UserSearch","onUserSelect","useState","displayName","onSearch","debounce","showSearch","width","onChange","userKey","find","userData","showArrow","filterOption","defaultActiveFirstOption","notFoundContent","size","Option","WorklogCalendar","onViewChanged","onRefresh","selectedDate","totalLoggedTime","userWorklogs","useEffect","window","addEventListener","keydown","removeEventListener","dateChanged","dateCellRenderer","spinning","title","Group","onClick","previousMonth","clone","subtract","nextMonth","add","dateFullCellRender","DetailsTitle","sumTotalLoggedTime","isWorklogs","sumForWorklog","sumForWorklogModels","subSum","worklogItem","firstItem","Array","DetailsSider","jiraUrl","canEdit","onAddWorklogClick","onWorklogDeleted","handleDelete","Modal","confirm","content","onOk","worklogId","delete","deleteWorklog","onCancel","header","icon","dataSource","renderItem","Meta","description","issues","IssueSearch","props","fetchId","fetchIssues","currentFetchId","handleChange","issue","Number","summaryText","this","React","Component","formItemLayout","labelCol","xs","sm","wrapperCol","AddWorklogForm","initialDate","validationPassed","resetFields","label","showTime","min","max","WrappedAddWorklogFormModal","modalVisible","onHideModal","onAdded","pending","setPending","setValidationPassed","validateTimeSpent","getFieldValue","hour","minute","second","visible","confirmLoading","err","formToWorklogRequest","getFieldsValue","getInitialDate","isNil","Home","fetchWorklogs","getMonth","getFullYear","worklogsResponse","history","useHistory","URLSearchParams","useLocation","search","appUser","timeZone","errorWhileFetchingWorklogs","worklogsByDate","setSelectedDate","setModalVisible","encodedUrlParams","encodeURIComponent","getUser","handleRefresh","handleHideModal","worklogForSelectedDate","gutter","changedUser","changedYear","changedMonth","urlParams","forEach","set","toString","push","setQueryParams","UserInfo","onLogout","children","theme","mode","selectable","SubMenu","disabled","alt","src","avatarUrls","emailAddress","Header","Layout","MainLayout","fontSize","PrivateRoute","rest","render","location","Routes","path","mapDispatchToProps","checkAuthenticationConnect","connect","interceptors","use","Promise","reject","securityNotification","protocol","Date","now","btn","process","notification","open","duration","openNotification","store","configureStore","reducer","App","locale","en_GB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b42b9c81.chunk.js","sourcesContent":["import { AnyAction, createAction, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { User, UserWithUrl } from \"./models/User\";\r\n\r\nexport enum AppActionTypes {\r\n  SetUser = \"APP_SET_USER\",\r\n  ClearUser = \"APP_CLEAR_USER\",\r\n  SetAuthenticated = \"APP_SET_AUTHENTICATED\",\r\n  Logout = \"APP_LOGOUT\"\r\n}\r\n\r\nexport interface SetUserAction extends PayloadAction<UserWithUrl> {\r\n  type: AppActionTypes.SetUser;\r\n  payload: { user: User; url: string };\r\n}\r\n\r\nexport interface ClearUserAction extends AnyAction {\r\n  type: AppActionTypes.ClearUser;\r\n}\r\n\r\nexport interface LogoutAction extends AnyAction {\r\n  type: AppActionTypes.Logout;\r\n}\r\n\r\nexport type AppActions = SetUserAction | ClearUserAction | LogoutAction;\r\n\r\nexport const setUserAction = (payload: {\r\n  user: User;\r\n  url: string;\r\n}): SetUserAction => ({\r\n  type: AppActionTypes.SetUser,\r\n  payload\r\n});\r\n\r\nexport const setAuthenticatedAction = createAction<boolean>(\r\n  AppActionTypes.SetAuthenticated\r\n);\r\n\r\nexport const logoutAction = createAction(AppActionTypes.Logout);\r\n\r\nexport const clearUserAction = createAction(AppActionTypes.ClearUser);\r\n","import { User } from \"./models/User\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { AppActionTypes } from \"./appActions\";\r\n\r\nexport interface AppState {\r\n  url: string | null;\r\n  user: User | null;\r\n  isAuthenticated: boolean | undefined;\r\n}\r\n\r\nconst defaultState: AppState = {\r\n  url: null,\r\n  user: null,\r\n  isAuthenticated: undefined\r\n};\r\n\r\nexport const appReducer = createReducer(defaultState, {\r\n  [AppActionTypes.SetUser]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    url: action.payload.url\r\n  }),\r\n  [AppActionTypes.ClearUser]: state => ({\r\n    ...state,\r\n    user: null,\r\n    isAuthenticated: false\r\n  }),\r\n  [AppActionTypes.SetAuthenticated]: (state, action) => ({\r\n    ...state,\r\n    isAuthenticated: action.payload\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport enum LoginActionTypes {\r\n  Login = \"LOGIN_LOGIN\",\r\n  LoginSuccess = \"LOGIN_SUCCESS\",\r\n  SetError = \"LOGIN_SET_ERROR\"\r\n}\r\n\r\nexport const loginAction = createAction<void>(LoginActionTypes.Login);\r\nexport const loginSuccess = createAction<void>(LoginActionTypes.LoginSuccess);\r\nexport const setError = createAction<any>(LoginActionTypes.SetError);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { LoginActionTypes } from \"./loginActions\";\r\n\r\nexport interface LoginState {\r\n  isLoggingIn: boolean;\r\n  error: number | null;\r\n}\r\n\r\nexport const defaultState: LoginState = {\r\n  isLoggingIn: false,\r\n  error: null\r\n};\r\n\r\nexport const loginReducer = createReducer(defaultState, {\r\n  [LoginActionTypes.Login]: state => ({\r\n    ...state,\r\n    isLoggingIn: true\r\n  }),\r\n  [LoginActionTypes.LoginSuccess]: state => ({\r\n    ...state,\r\n    isLoggingIn: false\r\n  }),\r\n  [LoginActionTypes.SetError]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isLoggingIn: false\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { User } from \"../../models/User\";\r\n\r\nexport enum WorklogActionTypes {\r\n  LoadWorklogs = \"WORKLOGS_LOAD\",\r\n  LoadedWorklogs = \"WORKLOGS_LOADED\",\r\n  ErrorLoadingWorklogs = \"WORKLOGS_ERROR\"\r\n}\r\n\r\nexport interface LoadWorklogsPayload {\r\n  user: User;\r\n  month: number;\r\n  year: number;\r\n}\r\n\r\nexport const loadWorklogsAction = createAction<LoadWorklogsPayload>(\r\n  WorklogActionTypes.LoadWorklogs\r\n);\r\nexport const loadedWorklogsAction = createAction<any>(\r\n  WorklogActionTypes.LoadedWorklogs\r\n);\r\nexport const errorLoadingWorklogsAction = createAction<any>(\r\n  WorklogActionTypes.ErrorLoadingWorklogs\r\n);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { WorklogActionTypes } from \"./worklogActions\";\r\nimport { User } from \"../../models/User\";\r\n\r\nexport interface WorklogState {\r\n  isFetchingWorklogs: boolean;\r\n  user: User | null;\r\n  month: number | null;\r\n  year: number | null;\r\n  day: number | null;\r\n  worklogs: any;\r\n  error: any;\r\n}\r\n\r\nexport const defaultState: WorklogState = {\r\n  isFetchingWorklogs: false,\r\n  month: null,\r\n  year: null,\r\n  day: null,\r\n  user: null,\r\n  worklogs: null,\r\n  error: null\r\n};\r\n\r\nexport const worklogReducer = createReducer(defaultState, {\r\n  [WorklogActionTypes.LoadWorklogs]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    month: action.payload.month,\r\n    year: action.payload.year,\r\n    day: action.payload.day,\r\n    isFetchingWorklogs: true,\r\n    error: null\r\n  }),\r\n  [WorklogActionTypes.LoadedWorklogs]: (state, action) => ({\r\n    ...state,\r\n    worklogs: action.payload,\r\n    isFetchingWorklogs: false\r\n  }),\r\n  [WorklogActionTypes.ErrorLoadingWorklogs]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isFetchingWorklogs: false\r\n  })\r\n});\r\n","import { appReducer, AppState } from \"./appReducer\";\r\nimport { combineReducers } from \"redux\";\r\nimport { loginReducer, LoginState } from \"./pages/Login/loginReducer\";\r\nimport { worklogReducer, WorklogState } from \"./pages/Home/worklogReducer\";\r\n\r\nexport interface RootState {\r\n  appState: AppState;\r\n  login: LoginState;\r\n  worklogs: WorklogState;\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  appState: appReducer,\r\n  login: loginReducer,\r\n  worklogs: worklogReducer\r\n});\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { User, UserWithUrl } from \"../models/User\";\r\n\r\nexport interface AuthenticateRequest {\r\n  email: string;\r\n  url: string;\r\n  apiToken: string;\r\n  rememberMe: boolean;\r\n}\r\n\r\nexport const authenticate = (request: AuthenticateRequest) =>\r\n  axios.post(\"/api/users/authenticate\", request);\r\n\r\nexport const current = () => axios.get<UserWithUrl>(\"/api/users/current\");\r\n\r\nexport const logout = () => axios.post(\"api/users/logout\");\r\n\r\nexport const searchUsers = (name: string): Promise<AxiosResponse<User[]>> => {\r\n  return axios.get(\"/api/users/search\", { params: { query: name } });\r\n};\r\n\r\nexport const getUser = (accountId: string): Promise<AxiosResponse<User>> => {\r\n  const encodedUrlParams = encodeURIComponent(accountId);\r\n  return axios.get(`/api/users/${encodedUrlParams}`);\r\n};\r\n","import { Dispatch } from \"react\";\r\nimport {\r\n  loginAction,\r\n  loginSuccess,\r\n  setError\r\n} from \"../pages/Login/loginActions\";\r\nimport { AxiosError, AxiosResponse } from \"axios\";\r\nimport { UserWithUrl } from \"../models/User\";\r\nimport {\r\n  clearUserAction,\r\n  logoutAction,\r\n  setAuthenticatedAction,\r\n  setUserAction\r\n} from \"../appActions\";\r\nimport {\r\n  authenticate,\r\n  AuthenticateRequest,\r\n  current,\r\n  logout\r\n} from \"../api/users\";\r\n\r\nexport const authenticateDispatch = (request: AuthenticateRequest) => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(loginAction());\r\n    authenticate(request)\r\n      .then(() => {\r\n        dispatch(loginSuccess());\r\n        return current();\r\n      })\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch((error: AxiosError) => {\r\n        dispatch(setError(error.response && error.response.status));\r\n      });\r\n  };\r\n};\r\n\r\nexport const checkAuthenticateDispatch = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    current()\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch(() => {\r\n        dispatch(setAuthenticatedAction(false));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutDispatch = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(logoutAction());\r\n    logout().then(() => dispatch(clearUserAction()));\r\n  };\r\n};\r\n","import React, { FormEvent } from \"react\";\r\nimport \"./LoginForm.css\";\r\nimport { Button, Checkbox, Form, Input, Typography } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport { AuthenticateRequest } from \"../../../api/users\";\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface Props {\r\n  onSubmit: (request: AuthenticateRequest) => void;\r\n  isLoggingIn?: boolean;\r\n  loginError?: any;\r\n  form?: WrappedFormUtils;\r\n}\r\n\r\nconst LoginForm: React.FunctionComponent<Props & FormComponentProps> = ({\r\n  onSubmit,\r\n  isLoggingIn,\r\n  loginError,\r\n  form\r\n}) => {\r\n  const onFormSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    form.validateFields((error: any, values: AuthenticateRequest) => {\r\n      if (!error) {\r\n        onSubmit(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <Form onSubmit={onFormSubmit}>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"email\", {\r\n          rules: [{ required: true, message: \"Please input your email\" }]\r\n        })(<Input placeholder=\"Email\" />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"url\", {\r\n          rules: [{ required: true, message: \"Please input URL\" }]\r\n        })(<Input addonBefore=\"https://\" placeholder=\"URL\" />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"apiToken\", {\r\n          rules: [{ required: true, message: \"Please input token\" }]\r\n        })(<Input placeholder=\"Token\" />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"rememberMe\", {\r\n          valuePropName: \"checked\",\r\n          initialValue: true\r\n        })(<Checkbox>Remember me</Checkbox>)}\r\n      </Form.Item>\r\n      <Button\r\n        loading={isLoggingIn}\r\n        type=\"primary\"\r\n        htmlType=\"submit\"\r\n        className=\"login-form__button\"\r\n      >\r\n        Log in\r\n      </Button>\r\n      {loginError && (\r\n        <div className=\"login-form__error\">\r\n          <Text type=\"danger\">Incorrect login data</Text>\r\n        </div>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst WrappedLoginForm = Form.create<Props & FormComponentProps>({\r\n  name: \"login\"\r\n})(LoginForm);\r\n\r\nexport default WrappedLoginForm;\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authenticateDispatch } from \"../../dispatchers/authenticate\";\r\nimport { RootState } from \"../../reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Card, Col, Layout, Row } from \"antd\";\r\nimport \"./Login.css\";\r\nimport { AuthenticateRequest } from \"../../api/users\";\r\n\r\nconst Login: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const onLogin = (loginRequest: AuthenticateRequest) =>\r\n    authenticateDispatch(loginRequest)(dispatch);\r\n\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  const isLoggingIn = useSelector(\r\n    (state: RootState) => state.login.isLoggingIn\r\n  );\r\n\r\n  const loginError = useSelector((state: RootState) => state.login.error);\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect to={{ pathname: \"dashboard\" }} />\r\n  ) : (\r\n    <Layout style={{ height: \"100%\" }}>\r\n      <Layout.Content style={{ padding: \"50px 50px\" }}>\r\n        <Row className=\"login__card-wrapper\">\r\n          <Col md={{ span: 12, offset: 6 }} xl={{ span: 8, offset: 8 }}>\r\n            <Card className=\"login__card\">\r\n              <h2>Sign in</h2>\r\n              <LoginForm\r\n                onSubmit={onLogin}\r\n                isLoggingIn={isLoggingIn}\r\n                loginError={loginError}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import axios from \"axios\";\r\nimport { User } from \"../models/User\";\r\nimport moment from \"moment\";\r\n\r\nexport interface GetWorklogsParams {\r\n  user: User;\r\n  from: Date;\r\n  to: Date;\r\n}\r\n\r\nconst formatDates = ({ from, to }: { from: Date; to: Date }) => {\r\n  const format = \"YYYY-MM-DD\";\r\n  return {\r\n    from: moment(from).format(format),\r\n    to: moment(to).format(format)\r\n  };\r\n};\r\n\r\nexport const getWorklogs = ({ from, to, user }: GetWorklogsParams) => {\r\n  const formattedDate = formatDates({ from, to });\r\n  return axios.get(\r\n    `/api/worklogs?from=${formattedDate.from}&to=${formattedDate.to}&accountId=${user.accountId}`\r\n  );\r\n};\r\n\r\nexport const postWorklog = (worklog: any) => {\r\n  return axios.post(\"api/worklogs\", worklog);\r\n};\r\n\r\nexport const deleteWorklog = ({\r\n  worklogId,\r\n  issueId\r\n}: {\r\n  worklogId: string;\r\n  issueId: string;\r\n}) => {\r\n  return axios.delete(`/api/worklogs/${issueId}/${worklogId}`);\r\n};\r\n","import { Moment } from \"moment\";\r\nimport moment from \"moment-timezone\";\r\n\r\nexport const getDateInTimezone = (\r\n  startDate: string,\r\n  userTimezone: string\r\n): Moment => {\r\n  return moment.tz(moment(startDate), userTimezone);\r\n};\r\n\r\nexport const getDateSpan = (current: Moment) => ({\r\n  from: current.startOf(\"month\").toDate(),\r\n  to: current.endOf(\"month\").toDate()\r\n});\r\n","import { Worklog } from \"../../../models/Worklog\";\r\nimport { getDateInTimezone } from \"../../../utils/date\";\r\n\r\nexport interface WorklogModel {\r\n  id: string;\r\n  issueKey: string;\r\n  issueId: string;\r\n  timeSpent: number;\r\n  started: string;\r\n}\r\n\r\nexport type WorklogGroups = { [key: string]: WorklogModel[] };\r\n\r\nexport const DATE_FORMAT = \"YYYY-MM-DD\";\r\n\r\nconst mergeWorklogs = (group1: WorklogGroups, group2: WorklogGroups) => {\r\n  const result = Object.assign({}, group1);\r\n  return Object.keys(group2).reduce((previous, current) => {\r\n    const group2Value = group2[current];\r\n    const previousValue = previous[current] || [];\r\n    const mergedValue = [...previousValue, ...group2Value];\r\n    return { ...previous, [current]: mergedValue };\r\n  }, result);\r\n};\r\n\r\nexport const groupWorklogsByDates = (\r\n  worklogList: Worklog[],\r\n  userTimezone: string\r\n): WorklogGroups => {\r\n  if (!worklogList) {\r\n    return {};\r\n  }\r\n\r\n  return worklogList.reduce((groupedWorklogs, worklog) => {\r\n    const worklogs = worklog.worklogs.reduce(\r\n      (groupedWorklogEntries, worklogEntry) => {\r\n        const startDate = getDateInTimezone(\r\n          worklogEntry.started,\r\n          userTimezone\r\n        ).format(DATE_FORMAT);\r\n        const entries = groupedWorklogEntries[startDate] || [];\r\n        const newEntries = [\r\n          ...entries,\r\n          {\r\n            id: worklogEntry.id,\r\n            issueId: worklogEntry.issueId,\r\n            issueKey: worklog.issueKey,\r\n            timeSpent: worklogEntry.timeSpentSeconds,\r\n            started: worklogEntry.started\r\n          }\r\n        ];\r\n        return { ...groupedWorklogEntries, [startDate]: newEntries };\r\n      },\r\n      {} as WorklogGroups\r\n    );\r\n    return mergeWorklogs(groupedWorklogs, worklogs);\r\n  }, {});\r\n};\r\n","export const formatDuration = (seconds: number): string => {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = (seconds / 60) % 60;\r\n  const stringMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n  return `${hours}:${stringMinutes}`;\r\n};\r\n","export const issueUrl = (url: string, issueKey: string) => {\r\n  return `https://${url}/browse/${issueKey}`;\r\n};\r\n","import React from \"react\";\r\nimport { DATE_FORMAT, WorklogGroups } from \"../utils/groupWorklogsByDates\";\r\nimport { Moment } from \"moment\";\r\nimport \"./DateCell.css\";\r\nimport { formatDuration } from \"../../../utils/duration\";\r\nimport { Typography } from \"antd\";\r\nimport { issueUrl } from \"../utils/issueUrl\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst FULL_WORKDAY = 8 * 3600;\r\n\r\nconst DateCellFactory = (worklogs: WorklogGroups, url: string) => (\r\n  value: Moment\r\n) => {\r\n  const key = value.format(DATE_FORMAT);\r\n  const worklogsToRender = worklogs[key];\r\n  const total =\r\n    worklogsToRender &&\r\n    worklogsToRender.reduce((sum, worklog) => sum + worklog.timeSpent, 0);\r\n  const fullDateLogged = total === FULL_WORKDAY;\r\n\r\n  return (\r\n    <div className=\"ant-fullcalendar-date\">\r\n      <div className=\"ant-fullcalendar-value callendar-cell__header\">\r\n        {worklogsToRender && (\r\n          <span className=\"callendar-cell__total-time\">\r\n            <Text type={fullDateLogged ? undefined : \"warning\"}>\r\n              Total: {formatDuration(total)}{\" \"}\r\n            </Text>\r\n          </span>\r\n        )}\r\n        <span className=\"callendar-cell__day\">{value.date()}</span>\r\n      </div>\r\n      <div className=\"ant-fullcalendar-content\">\r\n        {worklogsToRender && (\r\n          <div>\r\n            <ul className=\"worklogs\">\r\n              {worklogsToRender.map((worklog, index) => (\r\n                <li\r\n                  className=\"worklog-list-item\"\r\n                  key={`${worklog.issueKey}_${index}`}\r\n                >\r\n                  <a target=\"_blank\" href={issueUrl(url, worklog.issueKey)}>\r\n                    {worklog.issueKey}\r\n                  </a>\r\n                  <span>{formatDuration(worklog.timeSpent)}</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateCellFactory;\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Select, Spin } from \"antd\";\r\nimport \"./UserSearch.css\";\r\nimport debounce from \"lodash/debounce\";\r\nimport { User } from \"../../../models/User\";\r\nimport { searchUsers } from \"../../../api/users\";\r\n\r\nconst fetchUsers = (\r\n  setState: (searchState: { data: User[]; fetching: boolean }) => void\r\n) => (value: string) => {\r\n  setState({\r\n    data: [],\r\n    fetching: true\r\n  });\r\n  if (value) {\r\n    searchUsers(value)\r\n      .then(response => response.data)\r\n      .then(data => {\r\n        setState({\r\n          data,\r\n          fetching: false\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport interface UserSearchProps {\r\n  user: User;\r\n  onUserSelect: (user: User) => void;\r\n}\r\n\r\ninterface UserSearchState {\r\n  data: User[];\r\n  value: string | undefined;\r\n  fetching: boolean;\r\n}\r\n\r\nconst UserSearch: React.FC<UserSearchProps> = ({ user, onUserSelect }) => {\r\n  const [state, setState] = useState<UserSearchState>({\r\n    data: [],\r\n    value: user.displayName,\r\n    fetching: false\r\n  });\r\n\r\n  const onSearch = debounce(fetchUsers(setState as any), 800) as any;\r\n\r\n  const onChange = (userKey: string) => {\r\n    const user = state.data.find(\r\n      (userData: User) => userData.accountId === userKey\r\n    );\r\n    setState({ value: user && user.displayName, data: [], fetching: false });\r\n    if (user) {\r\n      onUserSelect(user);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"user__search\">\r\n      <Select\r\n        showSearch\r\n        style={{ width: \"100%\" }}\r\n        placeholder=\"Select user\"\r\n        value={state.value as any}\r\n        onSearch={onSearch}\r\n        onChange={onChange}\r\n        showArrow={false}\r\n        filterOption={false}\r\n        defaultActiveFirstOption={false}\r\n        notFoundContent={state.fetching ? <Spin size=\"small\" /> : null}\r\n      >\r\n        {(state.data as User[]).map(value => (\r\n          <Select.Option key={value.accountId}>\r\n            {value.displayName}\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserSearch;\r\n","import moment, { Moment } from \"moment\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Button, Calendar, Icon, Spin, Statistic } from \"antd\";\r\nimport { WorklogGroups } from \"../utils/groupWorklogsByDates\";\r\nimport DateCellFactory from \"./DateCell\";\r\nimport { formatDuration } from \"../../../utils/duration\";\r\nimport \"./WorklogCalendar.css\";\r\nimport UserSearch from \"../UserSearch/UserSearch\";\r\nimport { User } from \"../../../models/User\";\r\n\r\ninterface WorklogCalendarProps {\r\n  url: string;\r\n  isFetchingWorklogs: boolean;\r\n  userWorklogs: User;\r\n  worklogs: WorklogGroups;\r\n  selectedDate: moment.Moment;\r\n  totalLoggedTime: number;\r\n  onViewChanged: (selectedDate: moment.Moment, user: User) => void;\r\n  onRefresh: () => void;\r\n}\r\n\r\nconst WorklogCalendar: React.FC<WorklogCalendarProps> = ({\r\n  url,\r\n  onViewChanged,\r\n  onRefresh,\r\n  isFetchingWorklogs,\r\n  worklogs,\r\n  selectedDate,\r\n  totalLoggedTime,\r\n  userWorklogs\r\n}) => {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keyup\", keydown);\r\n    return () => {\r\n      window.removeEventListener(\"keyup\", keydown);\r\n    };\r\n  });\r\n\r\n  const dateChanged = (value: Moment | undefined) => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    onViewChanged(value, userWorklogs);\r\n  };\r\n\r\n  const userSelected = (user: User) => {\r\n    if (user.accountId !== userWorklogs.accountId) {\r\n      onViewChanged(selectedDate, user);\r\n    }\r\n  };\r\n\r\n  const forward = () => {\r\n    const nextMonth = selectedDate.clone().add(1, \"month\");\r\n    dateChanged(nextMonth);\r\n  };\r\n\r\n  const backward = () => {\r\n    const previousMonth = selectedDate.clone().subtract(1, \"month\");\r\n    dateChanged(previousMonth);\r\n  };\r\n\r\n  const keydown = ({ key }: { key: string }) => {\r\n    if (key === \"r\") {\r\n      onRefresh();\r\n    }\r\n  };\r\n\r\n  const dateCellRenderer = DateCellFactory(worklogs, url);\r\n\r\n  return (\r\n    <Spin spinning={isFetchingWorklogs}>\r\n      <div className=\"worklog-calendar__header\">\r\n        <div className=\"worklog-calendar__total-summary\">\r\n          <Statistic\r\n            title=\"Total logged:\"\r\n            value={formatDuration(totalLoggedTime)}\r\n          />\r\n        </div>\r\n        <div className=\"worklog-calendar__user\">\r\n          <UserSearch user={userWorklogs} onUserSelect={userSelected} />\r\n        </div>\r\n        <Button.Group>\r\n          <Button type=\"primary\" onClick={backward}>\r\n            <Icon type=\"left\" />\r\n            Backward\r\n          </Button>\r\n          <Button type=\"primary\" onClick={onRefresh}>\r\n            <Icon type=\"sync\" />\r\n            Refresh(R)\r\n          </Button>\r\n          <Button type=\"primary\" onClick={forward}>\r\n            Forward\r\n            <Icon type=\"right\" />\r\n          </Button>\r\n        </Button.Group>\r\n      </div>\r\n      <Calendar\r\n        value={selectedDate}\r\n        onChange={dateChanged}\r\n        dateFullCellRender={dateCellRenderer}\r\n      />\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default WorklogCalendar;\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport { formatDuration } from \"../../../utils/duration\";\r\nimport \"./DetailsTitle.css\";\r\n\r\nexport interface DetailsTitleProps {\r\n  date: moment.Moment;\r\n  totalLoggedTime: number;\r\n}\r\n\r\nexport const DetailsTitle: React.FC<DetailsTitleProps> = ({\r\n  date,\r\n  totalLoggedTime\r\n}) => {\r\n  return (\r\n    <div className=\"details__title\">\r\n      <span>{date.format(\"ll\")}</span>\r\n      <span>{formatDuration(totalLoggedTime)}</span>\r\n    </div>\r\n  );\r\n};\r\n","import { Worklog } from \"../../../models/Worklog\";\r\nimport { WorklogModel } from \"./groupWorklogsByDates\";\r\n\r\nexport const sumTotalLoggedTime = (\r\n  worklogs: (Worklog | WorklogModel)[]\r\n): number => {\r\n  if (!worklogs) {\r\n    return 0;\r\n  } else if (isWorklogs(worklogs)) {\r\n    return sumForWorklog(worklogs);\r\n  } else {\r\n    return sumForWorklogModels(worklogs as WorklogModel[]);\r\n  }\r\n};\r\n\r\nconst sumForWorklog = (worklogs: Worklog[]): number => {\r\n  return worklogs.reduce(\r\n    (sum, worklog) =>\r\n      sum +\r\n      worklog.worklogs.reduce(\r\n        (subSum, worklogItem) => subSum + worklogItem.timeSpentSeconds,\r\n        0\r\n      ),\r\n    0\r\n  );\r\n};\r\n\r\nconst sumForWorklogModels = (worklogs: WorklogModel[]): number => {\r\n  return worklogs.reduce((sum, worklog) => sum + worklog.timeSpent, 0);\r\n};\r\n\r\nconst isWorklogs = (value: any[]): value is Worklog[] => {\r\n  const firstItem = value[0];\r\n  if (!firstItem) {\r\n    return false;\r\n  }\r\n  return firstItem[\"worklogs\"] instanceof Array;\r\n};\r\n","import React from \"react\";\r\nimport { Button, Card, Modal, List, message } from \"antd\";\r\nimport \"./DetailsSider.css\";\r\nimport moment from \"moment\";\r\nimport { WorklogModel } from \"../utils/groupWorklogsByDates\";\r\nimport { DetailsTitle } from \"./DetailsTitle\";\r\nimport { sumTotalLoggedTime } from \"../utils/sumTotalLoggedTime\";\r\nimport { formatDuration } from \"../../../utils/duration\";\r\nimport { issueUrl } from \"../utils/issueUrl\";\r\nimport { deleteWorklog } from \"../../../api/worklogs\";\r\n\r\ninterface DetailsSiderProps {\r\n  jiraUrl: string;\r\n  selectedDate: moment.Moment;\r\n  worklogs: WorklogModel[];\r\n  canEdit: boolean;\r\n  onAddWorklogClick: () => void;\r\n  onWorklogDeleted: () => void;\r\n}\r\n\r\nconst DetailsSider: React.FC<DetailsSiderProps> = ({\r\n  jiraUrl,\r\n  selectedDate,\r\n  worklogs,\r\n  canEdit,\r\n  onAddWorklogClick,\r\n  onWorklogDeleted\r\n}) => {\r\n  const totalLoggedTime = sumTotalLoggedTime(worklogs);\r\n\r\n  const handleDelete = (worklog: WorklogModel) => {\r\n    Modal.confirm({\r\n      title: `Do you want to remove worklog?`,\r\n      content: `Confirm removing worklog from issue ${\r\n        worklog.issueKey\r\n      } logged at ${moment(worklog.started).format(\r\n        \"lll\"\r\n      )}. Time that was logged: ${formatDuration(worklog.timeSpent)}`,\r\n      onOk: () => {\r\n        return deleteWorklog({\r\n          worklogId: worklog.id,\r\n          issueId: worklog.issueId\r\n        })\r\n          .then(onWorklogDeleted)\r\n          .catch(() => message.error(\"Could not delete worklog\"));\r\n      },\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className=\"details-sider\"\r\n      title={DetailsTitle({ date: selectedDate, totalLoggedTime })}\r\n    >\r\n      <List\r\n        header={\r\n          <div className=\"list__header\">\r\n            <b>Logged Issues:</b>\r\n            {canEdit ? (\r\n              <Button\r\n                onClick={onAddWorklogClick}\r\n                type=\"primary\"\r\n                icon=\"plus-circle\"\r\n              >\r\n                Add\r\n              </Button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        }\r\n        dataSource={worklogs}\r\n        renderItem={value => (\r\n          <List.Item>\r\n            <List.Item.Meta\r\n              title={\r\n                <div className=\"worklog-list__title\">\r\n                  <a target=\"_blank\" href={issueUrl(jiraUrl, value.issueKey)}>\r\n                    {value.issueKey}\r\n                  </a>\r\n                  {canEdit ? (\r\n                    <Button\r\n                      onClick={() => handleDelete(value)}\r\n                      icon=\"delete\"\r\n                      size=\"small\"\r\n                    />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              }\r\n              description={\r\n                <div className=\"issue__description\">\r\n                  <span>\r\n                    Started at: <b>{moment(value.started).format(\"lll\")}</b>\r\n                  </span>\r\n                  <span>\r\n                    Logged: <b>{formatDuration(value.timeSpent)}</b>\r\n                  </span>\r\n                </div>\r\n              }\r\n            />\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DetailsSider;\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { IssueSearchResponse } from \"../models/Issue\";\r\n\r\nexport const issues = (\r\n  query: string\r\n): Promise<AxiosResponse<IssueSearchResponse[]>> =>\r\n  axios.get(\"/api/issues\", { params: { query } });\r\n","import React from \"react\";\r\nimport { Select, Spin } from \"antd\";\r\nimport { debounce } from \"lodash\";\r\nimport { issues } from \"../../../api/issues\";\r\nimport { IssueSearchResponse } from \"../../../models/Issue\";\r\n\r\ninterface IssueSearchProps {\r\n  onChange?: (issue: IssueSearchResponse | undefined) => void;\r\n}\r\n\r\ninterface IssueSearchState {\r\n  data: IssueSearchResponse[];\r\n  value: string;\r\n  fetching: boolean;\r\n}\r\n\r\nclass IssueSearch extends React.Component<IssueSearchProps, IssueSearchState> {\r\n  state: IssueSearchState = {\r\n    data: [],\r\n    value: \"\",\r\n    fetching: false\r\n  };\r\n  fetchId = 0;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.fetchIssues = debounce(this.fetchIssues, 500);\r\n  }\r\n\r\n  fetchIssues = (value: string) => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ data: [], fetching: true });\r\n    this.fetchId += 1;\r\n    const currentFetchId = this.fetchId;\r\n    issues(value).then(result => {\r\n      if (currentFetchId === this.fetchId) {\r\n        const issues = result.data;\r\n        this.setState({ data: issues, fetching: false });\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChange = (issueId: string) => {\r\n    const issue: IssueSearchResponse | undefined = this.state.data.find(\r\n      (issue: IssueSearchResponse) => issue.id == Number(issueId)\r\n    );\r\n    let value = \"\";\r\n    if (issue) {\r\n      value = `${issue.key} - ${issue.summaryText}`;\r\n    }\r\n    this.setState({\r\n      value,\r\n      data: [],\r\n      fetching: false\r\n    });\r\n    this.props.onChange && this.props.onChange(issue);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user__search\">\r\n        <Select\r\n          showSearch\r\n          style={{ width: \"100%\" }}\r\n          placeholder=\"Select issue\"\r\n          value={this.state.value as any}\r\n          onSearch={this.fetchIssues}\r\n          onChange={this.handleChange}\r\n          showArrow={false}\r\n          filterOption={false}\r\n          defaultActiveFirstOption={false}\r\n          notFoundContent={this.state.fetching ? <Spin size=\"small\" /> : null}\r\n        >\r\n          {(this.state.data as IssueSearchResponse[]).map(value => (\r\n            <Select.Option key={value.id}>\r\n              {value.key} - {value.summaryText}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IssueSearch;\r\n","import React, { useEffect } from \"react\";\r\nimport { DatePicker, Form, InputNumber, Typography } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport IssueSearch from \"../IssueSearch/IssueSearch\";\r\nimport * as moment from \"moment\";\r\n\r\nexport interface AddWorklogFormProps {\r\n  validationPassed: boolean;\r\n  initialDate: moment.Moment;\r\n  onChange: () => void;\r\n}\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 }\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 20 }\r\n  }\r\n};\r\n\r\nconst AddWorklogForm: React.FC<FormComponentProps & AddWorklogFormProps> = ({\r\n  form,\r\n  initialDate,\r\n  validationPassed,\r\n  onChange\r\n}) => {\r\n  const { getFieldDecorator } = form;\r\n\r\n  useEffect(() => {\r\n    form.resetFields();\r\n  }, [initialDate]);\r\n\r\n  return (\r\n    <Form onChange={onChange}>\r\n      <Form.Item label=\"Issue\" {...formItemLayout}>\r\n        {getFieldDecorator(\"issue\", {\r\n          rules: [{ required: true, message: \"Please select issue\" }]\r\n        })(<IssueSearch />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Started at\" {...formItemLayout}>\r\n        {getFieldDecorator(\"started\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: initialDate\r\n        })(<DatePicker showTime={true} />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Hours\" labelCol={{ sm: 4 }} wrapperCol={{ sm: 4 }}>\r\n        {getFieldDecorator(\"hours\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: 0\r\n        })(<InputNumber min={0} max={24} />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Minutes\" labelCol={{ sm: 4 }} wrapperCol={{ sm: 4 }}>\r\n        {getFieldDecorator(\"minutes\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: 0\r\n        })(<InputNumber min={0} max={59} />)}\r\n      </Form.Item>\r\n      {validationPassed ? (\r\n        \"\"\r\n      ) : (\r\n        <Typography.Text type=\"danger\">\r\n          Minutes or hours need to be provided\r\n        </Typography.Text>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddWorklogForm;\r\n","import AddWorklogForm from \"../AddWorklogForm/AddWorklogForm\";\r\nimport { Form, Modal } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport * as moment from \"moment\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { postWorklog } from \"../../../api/worklogs\";\r\nimport { IssueSearchResponse } from \"../../../models/Issue\";\r\nimport { WorklogEntryRequest } from \"../../../models/Worklog\";\r\n\r\ninterface WorklogForm {\r\n  issue: IssueSearchResponse;\r\n  started: moment.Moment;\r\n  hours: number;\r\n  minutes: number;\r\n}\r\n\r\nconst formToWorklogRequest = ({\r\n  issue,\r\n  started,\r\n  hours,\r\n  minutes\r\n}: WorklogForm): WorklogEntryRequest => {\r\n  const issueId = issue.id;\r\n  const startedString = started.format();\r\n  const timeSpentSeconds = hours * 3600 + minutes * 60;\r\n  return {\r\n    issueId,\r\n    started: startedString,\r\n    timeSpent: timeSpentSeconds\r\n  };\r\n};\r\n\r\nexport interface AddWorklogFormModalProps {\r\n  selectedDate: moment.Moment;\r\n  modalVisible: boolean;\r\n  onHideModal: () => void;\r\n  onAdded: () => void;\r\n}\r\n\r\nconst AddWorklogFormModal: React.FC<FormComponentProps &\r\n  AddWorklogFormModalProps> = ({\r\n  selectedDate,\r\n  modalVisible,\r\n  onHideModal,\r\n  onAdded,\r\n  form\r\n}) => {\r\n  const [pending, setPending] = useState(false);\r\n  const [validationPassed, setValidationPassed] = useState(true);\r\n\r\n  const validateTimeSpent = () => {\r\n    const minutes = form.getFieldValue(\"minutes\");\r\n    const hours = form.getFieldDecorator(\"hours\");\r\n    const valid = minutes || hours;\r\n    setValidationPassed(!!valid);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    validateTimeSpent();\r\n    form.validateFields(err => {\r\n      if (!err && validationPassed) {\r\n        setPending(true);\r\n        const request = formToWorklogRequest(\r\n          form.getFieldsValue() as WorklogForm\r\n        );\r\n        postWorklog(request).then(() => {\r\n          setPending(false);\r\n          onAdded();\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleFormChange = () => {\r\n    validateTimeSpent();\r\n  };\r\n\r\n  const initialDate = selectedDate\r\n    .clone()\r\n    .hour(8)\r\n    .minute(0)\r\n    .second(0);\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Log Time\"\r\n      visible={modalVisible}\r\n      confirmLoading={pending}\r\n      onCancel={onHideModal}\r\n      onOk={handleOk}\r\n    >\r\n      <AddWorklogForm\r\n        form={form}\r\n        initialDate={initialDate}\r\n        validationPassed={validationPassed}\r\n        onChange={handleFormChange}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst WrappedAddWorklogFormModal = Form.create<\r\n  FormComponentProps & AddWorklogFormModalProps\r\n>()(AddWorklogFormModal);\r\n\r\nexport default WrappedAddWorklogFormModal;\r\n","import { Col, message, Row } from \"antd\";\r\nimport { isNil } from \"lodash\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getUser } from \"../../api/users\";\r\nimport { getWorklogsDispatch } from \"../../dispatchers/worklogs\";\r\nimport { User } from \"../../models/User\";\r\nimport { RootState } from \"../../reducer\";\r\nimport { getDateSpan } from \"../../utils/date\";\r\nimport { useQuery } from \"../../utils/hooks\";\r\nimport WorklogCalendar from \"./WorklogCalendar/WorklogCalendar\";\r\nimport \"./Home.css\";\r\nimport DetailsSider from \"./DetailsSider/DetailsSider\";\r\nimport { groupWorklogsByDates } from \"./utils/groupWorklogsByDates\";\r\nimport { sumTotalLoggedTime } from \"./utils/sumTotalLoggedTime\";\r\nimport { getWorklogForDate } from \"./utils/getWorklogForDate\";\r\nimport AddWorklogFormModal from \"./AddWorklogFormModal/AddWorklogFormModal\";\r\n\r\nconst getInitialDate = ({\r\n  month,\r\n  year,\r\n  day\r\n}: {\r\n  month: string | number | null;\r\n  year: string | number | null;\r\n  day: string | number | null;\r\n}) => {\r\n  if (!isNil(month) && !isNil(year) && !isNil(day)) {\r\n    return moment([year, month, day]);\r\n  }\r\n  return moment();\r\n};\r\n\r\nconst Home: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchWorklogs = (from: Date, to: Date, user: User) => {\r\n    getWorklogsDispatch({ from, to, user: user })(dispatch);\r\n  };\r\n\r\n  const history = useHistory();\r\n  const query = useQuery();\r\n\r\n  const isFetchingWorklogs = useSelector(\r\n    (state: RootState) => state.worklogs.isFetchingWorklogs\r\n  );\r\n\r\n  const appUser = useSelector(\r\n    (state: RootState) => state.appState.user\r\n  ) as User;\r\n\r\n  const url = useSelector((state: RootState) => state.appState.url) || \"\";\r\n\r\n  const userTimezone = useSelector((state: RootState) => {\r\n    const user = state.appState.user;\r\n    return user && user.timeZone;\r\n  }) as string;\r\n\r\n  const errorWhileFetchingWorklogs = useSelector(\r\n    (state: RootState) => state.worklogs.error\r\n  );\r\n\r\n  const { worklogs, month, year, day, user } = useSelector(\r\n    (state: RootState) => state.worklogs\r\n  );\r\n\r\n  const worklogsByDate = groupWorklogsByDates(worklogs, userTimezone);\r\n  const totalLoggedTime = sumTotalLoggedTime(worklogs);\r\n\r\n  const [selectedDate, setSelectedDate] = useState(\r\n    getInitialDate({ month, year, day })\r\n  );\r\n\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n\r\n  const setQueryParams = (keys: { [key: string]: string | number }) => {\r\n    const urlParams = new URLSearchParams();\r\n    Object.entries(keys).forEach(([key, value]) =>\r\n      urlParams.set(key, value.toString())\r\n    );\r\n    history.push(`?${urlParams.toString()}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorWhileFetchingWorklogs) {\r\n      message.error(\"Could not fetch worklogs. Please try again.\");\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { from, to } = getDateSpan(\r\n      getInitialDate({\r\n        year: query.get(\"year\"),\r\n        month: query.get(\"month\"),\r\n        day: query.get(\"day\")\r\n      })\r\n    );\r\n    const accountId = query.get(\"user\");\r\n    if (accountId) {\r\n      getUser(accountId as string)\r\n        .then(({ data }) => {\r\n          fetchWorklogs(from, to, data);\r\n        })\r\n        .catch(() => {\r\n          message.error(`Could not fetch user with accountID: ${accountId}`);\r\n        });\r\n    } else {\r\n      fetchWorklogs(from, to, appUser);\r\n    }\r\n  }, []);\r\n\r\n  const onViewChanged = (date: moment.Moment, changedUser: User) => {\r\n    setSelectedDate(date);\r\n    const changedYear = date.year();\r\n    const changedMonth = date.month();\r\n    const changedDay = date.date();\r\n    setQueryParams({\r\n      year: changedYear,\r\n      month: changedMonth,\r\n      day: changedDay,\r\n      user: changedUser.accountId\r\n    });\r\n\r\n    if (\r\n      changedMonth !== month ||\r\n      changedYear !== year ||\r\n      (user && user.accountId) !== changedUser.accountId\r\n    ) {\r\n      const { from, to } = getDateSpan(moment([changedYear, changedMonth]));\r\n\r\n      fetchWorklogs(from, to, changedUser);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    if (user) {\r\n      const { from, to } = getDateSpan(selectedDate);\r\n      fetchWorklogs(from, to, user);\r\n    }\r\n  };\r\n\r\n  const handleShowModal = () => {\r\n    setModalVisible(true);\r\n  };\r\n\r\n  const handleHideModal = () => {\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const handleAdded = () => {\r\n    handleRefresh();\r\n    handleHideModal();\r\n  };\r\n\r\n  const initialized = () => !isNil(user) && !isNil(month) && !isNil(year);\r\n  const worklogForSelectedDate = getWorklogForDate(\r\n    worklogsByDate,\r\n    selectedDate\r\n  );\r\n\r\n  const canEdit = () => {\r\n    return (user && user.accountId) === appUser.accountId;\r\n  };\r\n\r\n  return (\r\n    <div className=\"home__container\">\r\n      {initialized() ? (\r\n        <>\r\n          <Row gutter={24}>\r\n            <Col span={18} className=\"home__content\">\r\n              <WorklogCalendar\r\n                url={url}\r\n                userWorklogs={user as User}\r\n                isFetchingWorklogs={isFetchingWorklogs}\r\n                selectedDate={selectedDate}\r\n                onViewChanged={onViewChanged}\r\n                onRefresh={handleRefresh}\r\n                worklogs={worklogsByDate}\r\n                totalLoggedTime={totalLoggedTime}\r\n              />\r\n            </Col>\r\n            <Col span={6} className=\"home__sider\">\r\n              <DetailsSider\r\n                jiraUrl={url}\r\n                selectedDate={selectedDate}\r\n                worklogs={worklogForSelectedDate}\r\n                canEdit={canEdit()}\r\n                onAddWorklogClick={handleShowModal}\r\n                onWorklogDeleted={handleRefresh}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <AddWorklogFormModal\r\n            selectedDate={selectedDate}\r\n            modalVisible={modalVisible}\r\n            onHideModal={handleHideModal}\r\n            onAdded={handleAdded}\r\n          />\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Dispatch } from \"redux\";\r\nimport {\r\n  errorLoadingWorklogsAction,\r\n  loadedWorklogsAction,\r\n  loadWorklogsAction\r\n} from \"../pages/Home/worklogActions\";\r\nimport { getWorklogs, GetWorklogsParams } from \"../api/worklogs\";\r\n\r\nexport const getWorklogsDispatch = (params: GetWorklogsParams) => {\r\n  return (dispatch: Dispatch) => {\r\n    const month = params.from.getMonth();\r\n    const year = params.from.getFullYear();\r\n    dispatch(\r\n      loadWorklogsAction({\r\n        user: params.user,\r\n        month,\r\n        year\r\n      })\r\n    );\r\n    getWorklogs(params)\r\n      .then(worklogsResponse => {\r\n        dispatch(loadedWorklogsAction(worklogsResponse.data));\r\n      })\r\n      .catch(() => {\r\n        dispatch(errorLoadingWorklogsAction());\r\n      });\r\n  };\r\n};\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nexport function useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n","import { DATE_FORMAT, WorklogGroups } from \"./groupWorklogsByDates\";\r\nimport moment from \"moment\";\r\n\r\nexport const getWorklogForDate = (\r\n  worklogGroups: WorklogGroups,\r\n  date: moment.Moment\r\n) => {\r\n  const key = date.format(DATE_FORMAT);\r\n  return worklogGroups[key] || [];\r\n};\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { User } from \"../../../models/User\";\r\nimport { Icon, Menu } from \"antd\";\r\nimport SubMenu from \"antd/es/menu/SubMenu\";\r\nimport \"./UserInfo.css\";\r\n\r\ninterface Props {\r\n  user: User;\r\n  onLogout: () => void;\r\n}\r\n\r\nconst UserInfo: React.FC<PropsWithChildren<Props>> = ({\r\n  user,\r\n  onLogout,\r\n  children\r\n}) => {\r\n  return (\r\n    <Menu\r\n      theme=\"dark\"\r\n      mode=\"horizontal\"\r\n      className=\"user-info__menu\"\r\n      selectable={false}\r\n    >\r\n      <SubMenu\r\n        title={\r\n          <span>\r\n            <Icon type=\"user\" />\r\n            {user.displayName}\r\n          </span>\r\n        }\r\n      >\r\n        <Menu.Item disabled={true}>\r\n          <img\r\n            alt=\"avatar\"\r\n            src={user.avatarUrls[\"32x32\"]}\r\n            className=\"user-info__avatar\"\r\n          />\r\n          {user.emailAddress}\r\n        </Menu.Item>\r\n        <Menu.Item disabled={true}>Timezone: {user.timeZone}</Menu.Item>\r\n        <Menu.Item onClick={onLogout}>\r\n          <Icon type=\"logout\" />\r\n          Logout\r\n        </Menu.Item>\r\n      </SubMenu>\r\n      {children && (\r\n        <Menu.Item className=\"user-info__extras\">{children}</Menu.Item>\r\n      )}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport { Icon, Layout } from \"antd\";\r\nimport \"./MainLayout.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducer\";\r\nimport UserInfo from \"../../pages/Home/UserInfo/UserInfo\";\r\nimport { User } from \"../../models/User\";\r\nimport { logoutDispatch } from \"../../dispatchers/authenticate\";\r\n\r\nconst { Header, Content } = Layout;\r\n// @ts-ignore\r\nconst MainLayout = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => dispatch(logoutDispatch());\r\n  const user = useSelector((state: RootState) => state.appState.user) as User;\r\n\r\n  return (\r\n    <Layout className=\"main-layout\">\r\n      <Header className=\"main-layout__header\">\r\n        <UserInfo user={user} onLogout={onLogout}>\r\n          <a\r\n            href=\"https://github.com/iczajkow/jira-web-timesheet\"\r\n            target=\"_blank\"\r\n          >\r\n            <Icon type=\"github\" style={{ fontSize: \"24px\" }} />\r\n          </a>\r\n        </UserInfo>\r\n      </Header>\r\n      <Content className=\"main-layout__content\">{children}</Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport MainLayout from \"./components/MainLayout/MainLayout\";\r\n\r\n// @ts-ignore\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        isAuthenticated ? (\r\n          <MainLayout>{children}</MainLayout>\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from \"./pages/Login/Login\";\r\nimport Home from \"./pages/Home/Home\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nconst Routes: React.FC = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <PrivateRoute path=\"/dashboard\">\r\n        <Home />\r\n      </PrivateRoute>\r\n      <Route path=\"*\">\r\n        <Redirect to={{ pathname: \"dashboard\" }} />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import { connect } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport React from \"react\";\r\nimport { checkAuthenticateDispatch } from \"./dispatchers/authenticate\";\r\nimport Routes from \"./Routes\";\r\n\r\ninterface Props {\r\n  checkAuthenticationConnect: () => void;\r\n  isAuthenticated: boolean | null;\r\n}\r\n\r\nconst AppEntry: React.FC<Props> = ({\r\n  checkAuthenticationConnect,\r\n  isAuthenticated\r\n}) => {\r\n  React.useEffect(() => {\r\n    checkAuthenticationConnect();\r\n  }, []);\r\n  return isAuthenticated != null ? <Routes /> : null;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  isAuthenticated: state.appState.isAuthenticated\r\n});\r\nconst mapDispatchToProps = {\r\n  checkAuthenticationConnect: checkAuthenticateDispatch\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppEntry as any);\r\n","import axios from \"axios\";\r\nimport { EnhancedStore } from \"@reduxjs/toolkit\";\r\nimport { clearUserAction } from \"../appActions\";\r\n\r\nconst interceptors = ({ dispatch }: EnhancedStore) => {\r\n  axios.interceptors.response.use(undefined, (error: any) => {\r\n    if (error.response.status === 401) {\r\n      dispatch(clearUserAction());\r\n    }\r\n    return Promise.reject(error);\r\n  });\r\n};\r\n\r\nexport default interceptors;\r\n","import React from \"react\";\r\nimport { Button, notification } from \"antd\";\r\n\r\nconst openNotification = () => {\r\n  const key = `open${Date.now()}`;\r\n  const btn = (\r\n    <Button type=\"primary\" href={`https://${process.env.REACT_APP_DOMAIN}`}>\r\n      Open HTTPs version\r\n    </Button>\r\n  );\r\n  notification.open({\r\n    message: \"Your connection is not private!\",\r\n    description:\r\n      \"You are using unsecured version of this website. To open secured version click button below.\",\r\n    btn,\r\n    key,\r\n    duration: 0\r\n  });\r\n};\r\n\r\nconst securityNotification = () => {\r\n  const isHttps = window.location.protocol === \"https:\";\r\n  if (!isHttps) {\r\n    openNotification();\r\n  }\r\n};\r\n\r\nexport default securityNotification;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { rootReducer } from \"./reducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppEntry from \"./AppEntry\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport \"moment/locale/en-gb\";\r\nimport en_GB from \"antd/lib/locale-provider/en_GB\";\r\nimport interceptors from \"./api/interceptors\";\r\nimport securityNotification from \"./utils/security-notification\";\r\n\r\nconst store = configureStore({ reducer: rootReducer });\r\n\r\ninterceptors(store);\r\n\r\nconst App: React.FC = () => {\r\n  securityNotification();\r\n  return (\r\n    <ConfigProvider locale={en_GB}>\r\n      <Provider store={store}>\r\n        <AppEntry />\r\n      </Provider>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}