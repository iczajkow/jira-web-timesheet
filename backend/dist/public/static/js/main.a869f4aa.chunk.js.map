{"version":3,"sources":["appActions.ts","appReducer.ts","components/Login/loginActions.ts","components/Login/loginReducer.ts","components/Home/worklogActions.ts","components/Home/worklogReducer.ts","reducer.ts","api/users.ts","dispatchers/authenticate.ts","components/LoginForm/LoginForm.tsx","components/Login/Login.tsx","utils/date.ts","components/WorklogCalendar/groupWorklogsByDates.ts","utils/duration.ts","components/WorklogCalendar/DateCell.tsx","components/UserSearch/UserSearch.tsx","components/WorklogCalendar/WorklogCalendar.tsx","api/worklogs.ts","components/Home/Home.tsx","dispatchers/worklogs.ts","utils/hooks.ts","components/UserInfo/UserInfo.tsx","components/MainLayout/MainLayout.tsx","PrivateRoute.tsx","Routes.tsx","AppEntry.tsx","api/interceptors.ts","utils/security-notification.tsx","App.tsx","index.tsx"],"names":["AppActionTypes","setUserAction","payload","type","SetUser","setAuthenticatedAction","createAction","SetAuthenticated","logoutAction","Logout","clearUserAction","ClearUser","LoginActionTypes","defaultState","url","user","isAuthenticated","undefined","appReducer","createReducer","state","action","loginAction","Login","loginSuccess","LoginSuccess","setError","SetError","WorklogActionTypes","loginReducer","isLoggingIn","error","loadWorklogsAction","LoadWorklogs","loadedWorklogsAction","LoadedWorklogs","errorLoadingWorklogsAction","ErrorLoadingWorklogs","worklogReducer","isFetchingWorklogs","month","year","worklogs","rootReducer","combineReducers","appState","login","current","axios","get","authenticateDispatch","request","dispatch","post","authenticate","then","userResponse","data","catch","response","status","logoutDispatch","Text","Typography","WrappedLoginForm","Form","create","name","onSubmit","loginError","form","getFieldDecorator","event","preventDefault","validateFields","values","Item","rules","required","message","placeholder","valuePropName","initialValue","loading","htmlType","className","useDispatch","useSelector","to","pathname","style","height","Content","padding","md","span","offset","xl","loginRequest","getDateSpan","from","startOf","toDate","endOf","groupWorklogsByDates","worklogList","userTimezone","reduce","groupedWorklogs","worklog","group1","group2","result","Object","assign","keys","previous","group2Value","previousValue","mergedValue","mergeWorklogs","groupedWorklogEntries","worklogEntry","startDate","moment","tz","getDateInTimezone","started","format","entries","newEntries","issueKey","timeSpent","timeSpentSeconds","formatDuration","seconds","hours","Math","floor","minutes","stringMinutes","buildHref","DateCellFactory","value","key","worklogsToRender","total","sum","fullDateLogged","date","map","index","target","href","fetchUsers","setState","fetching","params","query","UserSearch","onUserSelect","useState","displayName","onSearch","debounce","showSearch","width","onChange","userKey","find","userData","accountId","showArrow","filterOption","defaultActiveFirstOption","notFoundContent","size","Option","sumTotalLoggedTime","subSum","worklogItem","getYearAndMonth","WorklogCalendar","onViewChanged","userWorklogs","selectedDate","setSelectedDate","useEffect","window","addEventListener","keydown","removeEventListener","dateChanged","isSame","forward","nextMonth","clone","add","backward","previousMonth","subtract","refresh","dateCellRenderer","spinning","title","Group","onClick","dateFullCellRender","getWorklogs","formattedDate","formatDates","Home","fetchWorklogs","getMonth","getFullYear","worklogsResponse","appUser","timeZone","errorWhileFetchingWorklogs","history","useHistory","URLSearchParams","useLocation","search","getInitialDate","encodedUrlParams","encodeURIComponent","getUser","background","flex","isNil","push","setQueryParams","UserInfo","onLogout","children","theme","mode","selectable","SubMenu","disabled","alt","src","avatarUrls","emailAddress","Header","Layout","MainLayout","fontSize","PrivateRoute","rest","render","location","Routes","path","mapDispatchToProps","checkAuthenticationConnect","connect","React","interceptors","use","securityNotification","protocol","Date","now","btn","process","notification","open","description","duration","openNotification","store","configureStore","reducer","App","locale","en_GB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a869f4aa.chunk.js","sourcesContent":["import { AnyAction, createAction, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { User, UserWithUrl } from \"./models/User\";\r\n\r\nexport enum AppActionTypes {\r\n  SetUser = \"APP_SET_USER\",\r\n  ClearUser = \"APP_CLEAR_USER\",\r\n  SetAuthenticated = \"APP_SET_AUTHENTICATED\",\r\n  Logout = \"APP_LOGOUT\"\r\n}\r\n\r\nexport interface SetUserAction extends PayloadAction<UserWithUrl> {\r\n  type: AppActionTypes.SetUser;\r\n  payload: { user: User; url: string };\r\n}\r\n\r\nexport interface ClearUserAction extends AnyAction {\r\n  type: AppActionTypes.ClearUser;\r\n}\r\n\r\nexport interface LogoutAction extends AnyAction {\r\n  type: AppActionTypes.Logout;\r\n}\r\n\r\nexport type AppActions = SetUserAction | ClearUserAction | LogoutAction;\r\n\r\nexport const setUserAction = (payload: {\r\n  user: User;\r\n  url: string;\r\n}): SetUserAction => ({\r\n  type: AppActionTypes.SetUser,\r\n  payload\r\n});\r\n\r\nexport const setAuthenticatedAction = createAction<boolean>(\r\n  AppActionTypes.SetAuthenticated\r\n);\r\n\r\nexport const logoutAction = createAction(AppActionTypes.Logout);\r\n\r\nexport const clearUserAction = createAction(AppActionTypes.ClearUser);\r\n","import { User } from \"./models/User\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { AppActionTypes } from \"./appActions\";\r\n\r\nexport interface AppState {\r\n  url: string | null;\r\n  user: User | null;\r\n  isAuthenticated: boolean | undefined;\r\n}\r\n\r\nconst defaultState: AppState = {\r\n  url: null,\r\n  user: null,\r\n  isAuthenticated: undefined\r\n};\r\n\r\nexport const appReducer = createReducer(defaultState, {\r\n  [AppActionTypes.SetUser]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    url: action.payload.url\r\n  }),\r\n  [AppActionTypes.ClearUser]: state => ({\r\n    ...state,\r\n    user: null,\r\n    isAuthenticated: false\r\n  }),\r\n  [AppActionTypes.SetAuthenticated]: (state, action) => ({\r\n    ...state,\r\n    isAuthenticated: action.payload\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport enum LoginActionTypes {\r\n  Login = \"LOGIN_LOGIN\",\r\n  LoginSuccess = \"LOGIN_SUCCESS\",\r\n  SetError = \"LOGIN_SET_ERROR\"\r\n}\r\n\r\nexport const loginAction = createAction<void>(LoginActionTypes.Login);\r\nexport const loginSuccess = createAction<void>(LoginActionTypes.LoginSuccess);\r\nexport const setError = createAction<any>(LoginActionTypes.SetError);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { LoginActionTypes } from \"./loginActions\";\r\n\r\nexport interface LoginState {\r\n  isLoggingIn: boolean;\r\n  error: number | null;\r\n}\r\n\r\nexport const defaultState: LoginState = {\r\n  isLoggingIn: false,\r\n  error: null\r\n};\r\n\r\nexport const loginReducer = createReducer(defaultState, {\r\n  [LoginActionTypes.Login]: state => ({\r\n    ...state,\r\n    isLoggingIn: true\r\n  }),\r\n  [LoginActionTypes.LoginSuccess]: state => ({\r\n    ...state,\r\n    isLoggingIn: false\r\n  }),\r\n  [LoginActionTypes.SetError]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isLoggingIn: false\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { User } from \"../../models/User\";\r\n\r\nexport enum WorklogActionTypes {\r\n  LoadWorklogs = \"WORKLOGS_LOAD\",\r\n  LoadedWorklogs = \"WORKLOGS_LOADED\",\r\n  ErrorLoadingWorklogs = \"WORKLOGS_ERROR\"\r\n}\r\n\r\nexport interface LoadWorklogsPayload {\r\n  user: User;\r\n  month: number;\r\n  year: number;\r\n}\r\n\r\nexport const loadWorklogsAction = createAction<LoadWorklogsPayload>(\r\n  WorklogActionTypes.LoadWorklogs\r\n);\r\nexport const loadedWorklogsAction = createAction<any>(\r\n  WorklogActionTypes.LoadedWorklogs\r\n);\r\nexport const errorLoadingWorklogsAction = createAction<any>(\r\n  WorklogActionTypes.ErrorLoadingWorklogs\r\n);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { WorklogActionTypes } from \"./worklogActions\";\r\nimport { User } from \"../../models/User\";\r\n\r\nexport interface WorklogState {\r\n  isFetchingWorklogs: boolean;\r\n  user: User | null;\r\n  month: number | null;\r\n  year: number | null;\r\n  worklogs: any;\r\n  error: any;\r\n}\r\n\r\nexport const defaultState: WorklogState = {\r\n  isFetchingWorklogs: false,\r\n  month: null,\r\n  year: null,\r\n  user: null,\r\n  worklogs: null,\r\n  error: null\r\n};\r\n\r\nexport const worklogReducer = createReducer(defaultState, {\r\n  [WorklogActionTypes.LoadWorklogs]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    month: action.payload.month,\r\n    year: action.payload.year,\r\n    isFetchingWorklogs: true,\r\n    error: null\r\n  }),\r\n  [WorklogActionTypes.LoadedWorklogs]: (state, action) => ({\r\n    ...state,\r\n    worklogs: action.payload,\r\n    isFetchingWorklogs: false\r\n  }),\r\n  [WorklogActionTypes.ErrorLoadingWorklogs]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isFetchingWorklogs: false\r\n  })\r\n});\r\n","import { appReducer, AppState } from \"./appReducer\";\r\nimport { combineReducers } from \"redux\";\r\nimport { loginReducer, LoginState } from \"./components/Login/loginReducer\";\r\nimport { worklogReducer, WorklogState } from \"./components/Home/worklogReducer\";\r\n\r\nexport interface RootState {\r\n  appState: AppState;\r\n  login: LoginState;\r\n  worklogs: WorklogState;\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  appState: appReducer,\r\n  login: loginReducer,\r\n  worklogs: worklogReducer\r\n});\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { User, UserWithUrl } from \"../models/User\";\r\n\r\nexport interface AuthenticateRequest {\r\n  email: string;\r\n  url: string;\r\n  apiToken: string;\r\n  rememberMe: boolean;\r\n}\r\n\r\nexport const authenticate = (request: AuthenticateRequest) =>\r\n  axios.post(\"/api/users/authenticate\", request);\r\n\r\nexport const current = () => axios.get<UserWithUrl>(\"/api/users/current\");\r\n\r\nexport const logout = () => axios.post(\"api/users/logout\");\r\n\r\nexport const searchUsers = (name: string): Promise<AxiosResponse<User[]>> => {\r\n  return axios.get(\"/api/users/search\", { params: { query: name } });\r\n};\r\n\r\nexport const getUser = (accountId: string): Promise<AxiosResponse<User>> => {\r\n  const encodedUrlParams = encodeURIComponent(accountId);\r\n  return axios.get(`/api/users/${encodedUrlParams}`);\r\n};\r\n","import { Dispatch } from \"react\";\r\nimport {\r\n  loginAction,\r\n  loginSuccess,\r\n  setError\r\n} from \"../components/Login/loginActions\";\r\nimport { AxiosError, AxiosResponse } from \"axios\";\r\nimport { UserWithUrl } from \"../models/User\";\r\nimport {\r\n  clearUserAction,\r\n  logoutAction,\r\n  setAuthenticatedAction,\r\n  setUserAction\r\n} from \"../appActions\";\r\nimport {\r\n  authenticate,\r\n  AuthenticateRequest,\r\n  current,\r\n  logout\r\n} from \"../api/users\";\r\n\r\nexport const authenticateDispatch = (request: AuthenticateRequest) => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(loginAction());\r\n    authenticate(request)\r\n      .then(() => {\r\n        dispatch(loginSuccess());\r\n        return current();\r\n      })\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch((error: AxiosError) => {\r\n        dispatch(setError(error.response && error.response.status));\r\n      });\r\n  };\r\n};\r\n\r\nexport const checkAuthenticateDispatch = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    current()\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch(() => {\r\n        dispatch(setAuthenticatedAction(false));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutDispatch = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(logoutAction());\r\n    logout().then(() => dispatch(clearUserAction()));\r\n  };\r\n};\r\n","import React, { FormEvent } from \"react\";\r\nimport \"./LoginForm.css\";\r\nimport { Button, Checkbox, Form, Input, Typography } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport { AuthenticateRequest } from \"../../api/users\";\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface Props {\r\n  onSubmit: (request: AuthenticateRequest) => void;\r\n  isLoggingIn?: boolean;\r\n  loginError?: any;\r\n  form?: WrappedFormUtils;\r\n}\r\n\r\nconst LoginForm: React.FunctionComponent<Props & FormComponentProps> = ({\r\n  onSubmit,\r\n  isLoggingIn,\r\n  loginError,\r\n  form\r\n}) => {\r\n  const onFormSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    form.validateFields((error: any, values: AuthenticateRequest) => {\r\n      if (!error) {\r\n        onSubmit(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <Form onSubmit={onFormSubmit}>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"email\", {\r\n          rules: [{ required: true, message: \"Please input your email\" }]\r\n        })(<Input placeholder=\"Email\" />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"url\", {\r\n          rules: [{ required: true, message: \"Please input URL\" }]\r\n        })(<Input placeholder=\"URL\" />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"apiToken\", {\r\n          rules: [{ required: true, message: \"Please input token\" }]\r\n        })(<Input placeholder=\"Token\" />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"rememberMe\", {\r\n          valuePropName: \"checked\",\r\n          initialValue: true\r\n        })(<Checkbox>Remember me</Checkbox>)}\r\n      </Form.Item>\r\n      <Button\r\n        loading={isLoggingIn}\r\n        type=\"primary\"\r\n        htmlType=\"submit\"\r\n        className=\"login-form__button\"\r\n      >\r\n        Log in\r\n      </Button>\r\n      {loginError && (\r\n        <div className=\"login-form__error\">\r\n          <Text type=\"danger\">Incorrect login data</Text>\r\n        </div>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst WrappedLoginForm = Form.create<Props & FormComponentProps>({\r\n  name: \"login\"\r\n})(LoginForm);\r\n\r\nexport default WrappedLoginForm;\r\n","import React from \"react\";\r\nimport LoginForm from \"../LoginForm/LoginForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authenticateDispatch } from \"../../dispatchers/authenticate\";\r\nimport { RootState } from \"../../reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Card, Col, Layout, Row } from \"antd\";\r\nimport \"./Login.css\";\r\nimport { AuthenticateRequest } from \"../../api/users\";\r\n\r\nconst Login: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const onLogin = (loginRequest: AuthenticateRequest) =>\r\n    authenticateDispatch(loginRequest)(dispatch);\r\n\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  const isLoggingIn = useSelector(\r\n    (state: RootState) => state.login.isLoggingIn\r\n  );\r\n\r\n  const loginError = useSelector((state: RootState) => state.login.error);\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect to={{ pathname: \"dashboard\" }} />\r\n  ) : (\r\n    <Layout style={{ height: \"100%\" }}>\r\n      <Layout.Content style={{ padding: \"50px 50px\" }}>\r\n        <Row className=\"login__card-wrapper\">\r\n          <Col md={{ span: 12, offset: 6 }} xl={{ span: 8, offset: 8 }}>\r\n            <Card className=\"login__card\">\r\n              <h2>Sign in</h2>\r\n              <LoginForm\r\n                onSubmit={onLogin}\r\n                isLoggingIn={isLoggingIn}\r\n                loginError={loginError}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Moment } from \"moment\";\r\nimport moment from \"moment-timezone\";\r\n\r\nexport const getDateInTimezone = (\r\n  startDate: string,\r\n  userTimezone: string\r\n): Moment => {\r\n  return moment.tz(moment(startDate), userTimezone);\r\n};\r\n\r\nexport const getDateSpan = (current: Moment) => ({\r\n  from: current.startOf(\"month\").toDate(),\r\n  to: current.endOf(\"month\").toDate()\r\n});\r\n","import { Worklog } from \"../../models/Worklog\";\r\nimport { getDateInTimezone } from \"../../utils/date\";\r\n\r\nexport interface WorklogModel {\r\n  issueKey: string;\r\n  timeSpent: number;\r\n  started: string;\r\n}\r\n\r\nexport type WorklogGroups = { [key: string]: WorklogModel[] };\r\n\r\nexport const DATE_FORMAT = \"YYYY-MM-DD\";\r\n\r\nconst mergeWorklogs = (group1: WorklogGroups, group2: WorklogGroups) => {\r\n  const result = Object.assign({}, group1);\r\n  return Object.keys(group2).reduce((previous, current) => {\r\n    const group2Value = group2[current];\r\n    const previousValue = previous[current] || [];\r\n    const mergedValue = [...previousValue, ...group2Value];\r\n    return { ...previous, [current]: mergedValue };\r\n  }, result);\r\n};\r\n\r\nexport const groupWorklogsByDates = (\r\n  worklogList: Worklog[],\r\n  userTimezone: string\r\n): WorklogGroups => {\r\n  if (!worklogList) {\r\n    return {};\r\n  }\r\n\r\n  return worklogList.reduce((groupedWorklogs, worklog) => {\r\n    const worklogs = worklog.worklogs.reduce(\r\n      (groupedWorklogEntries, worklogEntry) => {\r\n        const startDate = getDateInTimezone(\r\n          worklogEntry.started,\r\n          userTimezone\r\n        ).format(DATE_FORMAT);\r\n        const entries = groupedWorklogEntries[startDate] || [];\r\n        const newEntries = [\r\n          ...entries,\r\n          {\r\n            issueKey: worklog.issueKey,\r\n            timeSpent: worklogEntry.timeSpentSeconds,\r\n            started: worklogEntry.started\r\n          }\r\n        ];\r\n        return { ...groupedWorklogEntries, [startDate]: newEntries };\r\n      },\r\n      {} as WorklogGroups\r\n    );\r\n    return mergeWorklogs(groupedWorklogs, worklogs);\r\n  }, {});\r\n};\r\n","export const formatDuration = (seconds: number): string => {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = (seconds / 60) % 60;\r\n  const stringMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n  return `${hours}:${stringMinutes}`;\r\n};\r\n","import React from \"react\";\r\nimport { DATE_FORMAT, WorklogGroups } from \"./groupWorklogsByDates\";\r\nimport { Moment } from \"moment\";\r\nimport \"./DateCell.css\";\r\nimport { formatDuration } from \"../../utils/duration\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst FULL_WORKDAY = 8 * 3600;\r\n\r\nconst buildHref = (url: string, issueKey: string) => {\r\n  return `https://${url}/browse/${issueKey}`;\r\n};\r\n\r\nconst DateCellFactory = (worklogs: WorklogGroups, url: string) => (\r\n  value: Moment\r\n) => {\r\n  const key = value.format(DATE_FORMAT);\r\n  const worklogsToRender = worklogs[key];\r\n  const total =\r\n    worklogsToRender &&\r\n    worklogsToRender.reduce((sum, worklog) => sum + worklog.timeSpent, 0);\r\n  const fullDateLogged = total === FULL_WORKDAY;\r\n\r\n  return (\r\n    <div className=\"ant-fullcalendar-date\">\r\n      <div className=\"ant-fullcalendar-value callendar-cell__header\">\r\n        {worklogsToRender && (\r\n          <span className=\"callendar-cell__total-time\">\r\n            <Text type={fullDateLogged ? undefined : \"warning\"}>\r\n              Total: {formatDuration(total)}{\" \"}\r\n            </Text>\r\n          </span>\r\n        )}\r\n        <span className=\"callendar-cell__day\">{value.date()}</span>\r\n      </div>\r\n      <div className=\"ant-fullcalendar-content\">\r\n        {worklogsToRender && (\r\n          <div>\r\n            <ul className=\"worklogs\">\r\n              {worklogsToRender.map((worklog, index) => (\r\n                <li\r\n                  className=\"worklog-list-item\"\r\n                  key={`${worklog.issueKey}_${index}`}\r\n                >\r\n                  <a target=\"_blank\" href={buildHref(url, worklog.issueKey)}>\r\n                    {worklog.issueKey}\r\n                  </a>\r\n                  <span>{formatDuration(worklog.timeSpent)}</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateCellFactory;\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Select, Spin } from \"antd\";\r\nimport \"./UserSearch.css\";\r\nimport debounce from \"lodash/debounce\";\r\nimport { User } from \"../../models/User\";\r\nimport { searchUsers } from \"../../api/users\";\r\n\r\nconst fetchUsers = (\r\n  setState: (searchState: { data: User[]; fetching: boolean }) => void\r\n) => (value: string) => {\r\n  setState({\r\n    data: [],\r\n    fetching: true\r\n  });\r\n  if (value) {\r\n    searchUsers(value)\r\n      .then(response => response.data)\r\n      .then(data => {\r\n        setState({\r\n          data,\r\n          fetching: false\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport interface UserSearchProps {\r\n  user: User;\r\n  onUserSelect: (user: User) => void;\r\n}\r\n\r\ninterface UserSearchState {\r\n  data: User[];\r\n  value: string | undefined;\r\n  fetching: boolean;\r\n}\r\n\r\nconst UserSearch: React.FC<UserSearchProps> = ({ user, onUserSelect }) => {\r\n  const [state, setState] = useState<UserSearchState>({\r\n    data: [],\r\n    value: user.displayName,\r\n    fetching: false\r\n  });\r\n\r\n  const onSearch = debounce(fetchUsers(setState as any), 800) as any;\r\n\r\n  const onChange = (userKey: string) => {\r\n    const user = state.data.find(\r\n      (userData: User) => userData.accountId === userKey\r\n    );\r\n    setState({ value: user && user.displayName, data: [], fetching: false });\r\n    if (user) {\r\n      onUserSelect(user);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"user__search\">\r\n      <Select\r\n        showSearch\r\n        style={{ width: \"100%\" }}\r\n        placeholder=\"Select user\"\r\n        value={state.value as any}\r\n        onSearch={onSearch}\r\n        onChange={onChange}\r\n        showArrow={false}\r\n        filterOption={false}\r\n        defaultActiveFirstOption={false}\r\n        notFoundContent={state.fetching ? <Spin size=\"small\" /> : null}\r\n      >\r\n        {(state.data as User[]).map(value => (\r\n          <Select.Option key={value.accountId}>\r\n            {value.displayName}\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserSearch;\r\n","import moment, { Moment } from \"moment\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Button, Calendar, Icon, Spin, Statistic } from \"antd\";\r\nimport { Worklog } from \"../../models/Worklog\";\r\nimport { groupWorklogsByDates } from \"./groupWorklogsByDates\";\r\nimport DateCellFactory from \"./DateCell\";\r\nimport { formatDuration } from \"../../utils/duration\";\r\nimport \"./WorklogCalendar.css\";\r\nimport UserSearch from \"../UserSearch/UserSearch\";\r\nimport { User } from \"../../models/User\";\r\n\r\ninterface WorklogCalendarProps {\r\n  url: string;\r\n  isFetchingWorklogs: boolean;\r\n  userWorklogs: User;\r\n  worklogs: Worklog[];\r\n  userTimezone: string;\r\n  month: number;\r\n  year: number;\r\n  onViewChanged: (year: number, month: number, user: User) => void;\r\n}\r\n\r\nconst sumTotalLoggedTime = (worklogs: Worklog[]): number => {\r\n  if (!worklogs) {\r\n    return 0;\r\n  }\r\n  return worklogs.reduce(\r\n    (sum, worklog) =>\r\n      sum +\r\n      worklog.worklogs.reduce(\r\n        (subSum, worklogItem) => subSum + worklogItem.timeSpentSeconds,\r\n        0\r\n      ),\r\n    0\r\n  );\r\n};\r\n\r\nconst getYearAndMonth = (moment: Moment) => {\r\n  return {\r\n    year: moment.year(),\r\n    month: moment.month()\r\n  };\r\n};\r\n\r\nconst WorklogCalendar: React.FC<WorklogCalendarProps> = ({\r\n  url,\r\n  onViewChanged,\r\n  isFetchingWorklogs,\r\n  userTimezone,\r\n  worklogs,\r\n  month,\r\n  year,\r\n  userWorklogs\r\n}) => {\r\n  const [selectedDate, setSelectedDate] = useState(moment([year, month]));\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keyup\", keydown);\r\n    return () => {\r\n      window.removeEventListener(\"keyup\", keydown);\r\n    };\r\n  });\r\n\r\n  const dateChanged = (value: any) => {\r\n    if (!value.startOf(\"month\").isSame(selectedDate.startOf(\"month\"))) {\r\n      setSelectedDate(value);\r\n      const { year, month } = getYearAndMonth(value);\r\n      onViewChanged(year, month, userWorklogs);\r\n    }\r\n  };\r\n\r\n  const userSelected = (user: User) => {\r\n    if (user.accountId !== userWorklogs.accountId) {\r\n      const { year, month } = getYearAndMonth(selectedDate);\r\n      onViewChanged(year, month, user);\r\n    }\r\n  };\r\n\r\n  const forward = () => {\r\n    const nextMonth = selectedDate.clone().add(1, \"month\");\r\n    dateChanged(nextMonth);\r\n  };\r\n\r\n  const backward = () => {\r\n    const previousMonth = selectedDate.clone().subtract(1, \"month\");\r\n    dateChanged(previousMonth);\r\n  };\r\n\r\n  const refresh = () => {\r\n    const { year, month } = getYearAndMonth(selectedDate);\r\n    onViewChanged(year, month, userWorklogs);\r\n  };\r\n\r\n  const keydown = ({ key }: { key: string }) => {\r\n    switch (key) {\r\n      case \"ArrowLeft\":\r\n        backward();\r\n        break;\r\n      case \"ArrowRight\":\r\n        forward();\r\n        break;\r\n      case \"r\":\r\n        refresh();\r\n        break;\r\n    }\r\n  };\r\n\r\n  const groupedWorklogs = groupWorklogsByDates(worklogs, userTimezone);\r\n  const dateCellRenderer = DateCellFactory(groupedWorklogs, url);\r\n\r\n  return (\r\n    <Spin spinning={isFetchingWorklogs}>\r\n      <div className=\"worklog-calendar__header\">\r\n        <div className=\"worklog-calendar__total-summary\">\r\n          <Statistic\r\n            title=\"Total logged:\"\r\n            value={formatDuration(sumTotalLoggedTime(worklogs))}\r\n          />\r\n        </div>\r\n        <div className=\"worklog-calendar__user\">\r\n          <UserSearch user={userWorklogs} onUserSelect={userSelected} />\r\n        </div>\r\n        <Button.Group>\r\n          <Button type=\"primary\" onClick={backward}>\r\n            <Icon type=\"left\" />\r\n            Backward\r\n          </Button>\r\n          <Button type=\"primary\" onClick={refresh}>\r\n            <Icon type=\"sync\" />\r\n            Refresh(R)\r\n          </Button>\r\n          <Button type=\"primary\" onClick={forward}>\r\n            Forward\r\n            <Icon type=\"right\" />\r\n          </Button>\r\n        </Button.Group>\r\n      </div>\r\n      <Calendar\r\n        value={selectedDate}\r\n        onChange={dateChanged}\r\n        dateFullCellRender={dateCellRenderer}\r\n      />\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default WorklogCalendar;\r\n","import axios from \"axios\";\r\nimport { User } from \"../models/User\";\r\nimport moment from \"moment\";\r\n\r\nexport interface GetWorklogsParams {\r\n  user: User;\r\n  from: Date;\r\n  to: Date;\r\n}\r\n\r\nconst formatDates = ({ from, to }: { from: Date; to: Date }) => {\r\n  const format = \"YYYY-MM-DD\";\r\n  return {\r\n    from: moment(from).format(format),\r\n    to: moment(to).format(format)\r\n  };\r\n};\r\n\r\nexport const getWorklogs = ({ from, to, user }: GetWorklogsParams) => {\r\n  const formattedDate = formatDates({ from, to });\r\n  return axios.get(\r\n    `/api/worklogs?from=${formattedDate.from}&to=${formattedDate.to}&accountId=${user.accountId}`\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducer\";\r\nimport WorklogCalendar from \"../WorklogCalendar/WorklogCalendar\";\r\nimport { message } from \"antd\";\r\nimport { User } from \"../../models/User\";\r\nimport { getDateSpan } from \"../../utils/date\";\r\nimport moment from \"moment\";\r\nimport { isNil } from \"lodash\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useQuery } from \"../../utils/hooks\";\r\nimport { getUser } from \"../../api/users\";\r\nimport { getWorklogsDispatch } from \"../../dispatchers/worklogs\";\r\n\r\nconst getInitialDate = ({\r\n  month,\r\n  year\r\n}: {\r\n  month: string | null;\r\n  year: string | null;\r\n}) => {\r\n  if (month && year) {\r\n    return moment([year, month]);\r\n  }\r\n  return moment();\r\n};\r\n\r\nconst Home: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchWorklogs = (from: Date, to: Date, user: User) => {\r\n    getWorklogsDispatch({ from, to, user: user })(dispatch);\r\n  };\r\n\r\n  const isFetchingWorklogs = useSelector(\r\n    (state: RootState) => state.worklogs.isFetchingWorklogs\r\n  );\r\n\r\n  const appUser = useSelector(\r\n    (state: RootState) => state.appState.user\r\n  ) as User;\r\n\r\n  const url = useSelector((state: RootState) => state.appState.url) || \"\";\r\n\r\n  const userTimezone = useSelector((state: RootState) => {\r\n    const user = state.appState.user;\r\n    return user && user.timeZone;\r\n  }) as string;\r\n\r\n  const errorWhileFetchingWorklogs = useSelector(\r\n    (state: RootState) => state.worklogs.error\r\n  );\r\n  const history = useHistory();\r\n  const query = useQuery();\r\n\r\n  const { worklogs, month, year, user } = useSelector(\r\n    (state: RootState) => state.worklogs\r\n  );\r\n\r\n  const setQueryParams = (year: number, month: number, user: User) => {\r\n    history.push(`?&year=${year}&month=${month}&user=${user.accountId}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorWhileFetchingWorklogs) {\r\n      message.error(\"Could not fetch worklogs. Please try again.\");\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { from, to } = getDateSpan(\r\n      getInitialDate({ year: query.get(\"year\"), month: query.get(\"month\") })\r\n    );\r\n    const accountId = query.get(\"user\");\r\n    if (accountId) {\r\n      getUser(accountId as string)\r\n        .then(({ data }) => {\r\n          fetchWorklogs(from, to, data);\r\n        })\r\n        .catch(() => {\r\n          message.error(`Could not fetch user with accountID: ${accountId}`);\r\n        });\r\n    } else {\r\n      fetchWorklogs(from, to, appUser);\r\n    }\r\n  }, []);\r\n\r\n  const onViewChanged = (year: number, month: number, user: User) => {\r\n    const { from, to } = getDateSpan(moment([year, month]));\r\n    setQueryParams(year, month, user);\r\n    fetchWorklogs(from, to, user);\r\n  };\r\n\r\n  const initialized = () => !isNil(user) && !isNil(month) && !isNil(year);\r\n\r\n  return (\r\n    <div style={{ background: \"white\", flex: 1 }}>\r\n      {initialized() ? (\r\n        <WorklogCalendar\r\n          url={url}\r\n          userWorklogs={user as User}\r\n          isFetchingWorklogs={isFetchingWorklogs}\r\n          onViewChanged={onViewChanged}\r\n          month={month as number}\r\n          year={year as number}\r\n          worklogs={worklogs}\r\n          userTimezone={userTimezone}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Dispatch } from \"redux\";\r\nimport {\r\n  errorLoadingWorklogsAction,\r\n  loadedWorklogsAction,\r\n  loadWorklogsAction\r\n} from \"../components/Home/worklogActions\";\r\nimport { getWorklogs, GetWorklogsParams } from \"../api/worklogs\";\r\n\r\nexport const getWorklogsDispatch = (params: GetWorklogsParams) => {\r\n  return (dispatch: Dispatch) => {\r\n    const month = params.from.getMonth();\r\n    const year = params.from.getFullYear();\r\n    dispatch(\r\n      loadWorklogsAction({\r\n        user: params.user,\r\n        month,\r\n        year\r\n      })\r\n    );\r\n    getWorklogs(params)\r\n      .then(worklogsResponse => {\r\n        dispatch(loadedWorklogsAction(worklogsResponse.data));\r\n      })\r\n      .catch(() => {\r\n        dispatch(errorLoadingWorklogsAction());\r\n      });\r\n  };\r\n};\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nexport function useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { User } from \"../../models/User\";\r\nimport { Icon, Menu } from \"antd\";\r\nimport SubMenu from \"antd/es/menu/SubMenu\";\r\nimport \"./UserInfo.css\";\r\n\r\ninterface Props {\r\n  user: User;\r\n  onLogout: () => void;\r\n}\r\n\r\nconst UserInfo: React.FC<PropsWithChildren<Props>> = ({\r\n  user,\r\n  onLogout,\r\n  children\r\n}) => {\r\n  return (\r\n    <Menu\r\n      theme=\"dark\"\r\n      mode=\"horizontal\"\r\n      className=\"user-info__menu\"\r\n      selectable={false}\r\n    >\r\n      <SubMenu\r\n        title={\r\n          <span>\r\n            <Icon type=\"user\" />\r\n            {user.displayName}\r\n          </span>\r\n        }\r\n      >\r\n        <Menu.Item disabled={true}>\r\n          <img\r\n            alt=\"avatar\"\r\n            src={user.avatarUrls[\"32x32\"]}\r\n            className=\"user-info__avatar\"\r\n          />\r\n          {user.emailAddress}\r\n        </Menu.Item>\r\n        <Menu.Item disabled={true}>Timezone: {user.timeZone}</Menu.Item>\r\n        <Menu.Item onClick={onLogout}>\r\n          <Icon type=\"logout\" />\r\n          Logout\r\n        </Menu.Item>\r\n      </SubMenu>\r\n      {children && (\r\n        <Menu.Item className=\"user-info__extras\">{children}</Menu.Item>\r\n      )}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport { Icon, Layout } from \"antd\";\r\nimport \"./MainLayout.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducer\";\r\nimport UserInfo from \"../UserInfo/UserInfo\";\r\nimport { User } from \"../../models/User\";\r\nimport { logoutDispatch } from \"../../dispatchers/authenticate\";\r\n\r\nconst { Header, Content } = Layout;\r\n// @ts-ignore\r\nconst MainLayout = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => dispatch(logoutDispatch());\r\n  const user = useSelector((state: RootState) => state.appState.user) as User;\r\n\r\n  return (\r\n    <Layout className=\"main-layout\">\r\n      <Header className=\"main-layout__header\">\r\n        <UserInfo user={user} onLogout={onLogout}>\r\n          <a\r\n            href=\"https://github.com/iczajkow/jira-web-timesheet\"\r\n            target=\"_blank\"\r\n          >\r\n            <Icon type=\"github\" style={{ fontSize: \"24px\" }} />\r\n          </a>\r\n        </UserInfo>\r\n      </Header>\r\n      <Content className=\"main-layout__content\">{children}</Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport MainLayout from \"./components/MainLayout/MainLayout\";\r\n\r\n// @ts-ignore\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        isAuthenticated ? (\r\n          <MainLayout>{children}</MainLayout>\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from \"./components/Login/Login\";\r\nimport Home from \"./components/Home/Home\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nconst Routes: React.FC = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <PrivateRoute path=\"/dashboard\">\r\n        <Home />\r\n      </PrivateRoute>\r\n      <Route path=\"*\">\r\n        <Redirect to={{ pathname: \"dashboard\" }} />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import { connect } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport React from \"react\";\r\nimport { checkAuthenticateDispatch } from \"./dispatchers/authenticate\";\r\nimport Routes from \"./Routes\";\r\n\r\ninterface Props {\r\n  checkAuthenticationConnect: () => void;\r\n  isAuthenticated: boolean | null;\r\n}\r\n\r\nconst AppEntry: React.FC<Props> = ({\r\n  checkAuthenticationConnect,\r\n  isAuthenticated\r\n}) => {\r\n  React.useEffect(() => {\r\n    checkAuthenticationConnect();\r\n  }, []);\r\n  return isAuthenticated != null ? <Routes /> : null;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  isAuthenticated: state.appState.isAuthenticated\r\n});\r\nconst mapDispatchToProps = {\r\n  checkAuthenticationConnect: checkAuthenticateDispatch\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppEntry as any);\r\n","import axios from \"axios\";\r\nimport { EnhancedStore } from \"@reduxjs/toolkit\";\r\nimport { clearUserAction } from \"../appActions\";\r\n\r\nconst interceptors = ({ dispatch }: EnhancedStore) => {\r\n  axios.interceptors.response.use(undefined, (error: any) => {\r\n    if (error.response.status === 401) {\r\n      dispatch(clearUserAction());\r\n    }\r\n  });\r\n};\r\n\r\nexport default interceptors;\r\n","import React from \"react\";\r\nimport { Button, notification } from \"antd\";\r\n\r\nconst openNotification = () => {\r\n  const key = `open${Date.now()}`;\r\n  const btn = (\r\n    <Button type=\"primary\" href={`https://${process.env.REACT_APP_DOMAIN}`}>\r\n      Open HTTPs version\r\n    </Button>\r\n  );\r\n  notification.open({\r\n    message: \"Your connection is not private!\",\r\n    description:\r\n      \"You are using unsecured version of this website. To open secured version click button below.\",\r\n    btn,\r\n    key,\r\n    duration: 0\r\n  });\r\n};\r\n\r\nconst securityNotification = () => {\r\n  const isHttps = window.location.protocol === \"https:\";\r\n  if (!isHttps) {\r\n    openNotification();\r\n  }\r\n};\r\n\r\nexport default securityNotification;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { rootReducer } from \"./reducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppEntry from \"./AppEntry\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport \"moment/locale/en-gb\";\r\nimport en_GB from \"antd/lib/locale-provider/en_GB\";\r\nimport interceptors from \"./api/interceptors\";\r\nimport securityNotification from \"./utils/security-notification\";\r\n\r\nconst store = configureStore({ reducer: rootReducer });\r\n\r\ninterceptors(store);\r\n\r\nconst App: React.FC = () => {\r\n  securityNotification();\r\n  return (\r\n    <ConfigProvider locale={en_GB}>\r\n      <Provider store={store}>\r\n        <AppEntry />\r\n      </Provider>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}