{"version":3,"sources":["appActions.ts","appReducer.ts","components/Login/loginActions.ts","components/Login/loginReducer.ts","components/Home/worklogActions.ts","components/Home/worklogReducer.ts","reducer.ts","components/LoginForm/LoginForm.tsx","components/Login/Login.tsx","api/authenticate.ts","api/worklogs.ts","components/WorklogCalendar/groupWorklogsByDates.ts","utils/date.ts","utils/duration.ts","components/WorklogCalendar/DateCell.tsx","components/WorklogCalendar/WorklogCalendar.tsx","components/Home/Home.tsx","components/UserInfo/UserInfo.tsx","components/MainLayout/MainLayout.tsx","PrivateRoute.tsx","Routes.tsx","AppEntry.tsx","App.tsx","index.tsx"],"names":["AppActionTypes","setUserAction","payload","type","SetUser","setAuthenticatedAction","createAction","SetAuthenticated","logoutAction","Logout","clearUserAction","ClearUser","LoginActionTypes","defaultState","url","user","isAuthenticated","undefined","appReducer","createReducer","state","action","loginAction","Login","loginSuccess","LoginSuccess","setError","SetError","WorklogActionTypes","loginReducer","isLoggingIn","error","loadWorklogsAction","LoadWorklogs","loadedWorklogsAction","LoadedWorklogs","errorLoadingWorklogsAction","ErrorLoadingWorklogs","worklogReducer","isFetchingWorklogs","worklogs","rootReducer","combineReducers","appState","login","Text","Typography","WrappedLoginForm","Form","create","name","onSubmit","loginError","form","getFieldDecorator","event","preventDefault","validateFields","values","Item","rules","required","message","placeholder","loading","htmlType","className","dispatch","useDispatch","useSelector","to","pathname","style","height","Content","padding","md","span","offset","xl","loginRequest","request","axios","post","then","_","get","userResponse","data","catch","response","status","getWorklogs","from","moment","format","formatDates","worklogsResponse","groupWorklogsByDates","worklogList","userTimezone","reduce","groupedWorklogs","worklog","group1","group2","result","Object","assign","keys","previous","current","group2Value","previousValue","mergedValue","mergeWorklogs","groupedWorklogEntries","worklogEntry","startDate","tz","getDateInTimezone","started","entries","newEntries","issueKey","timeSpent","timeSpentSeconds","formatDuration","seconds","hours","Math","floor","minutes","stringMinutes","buildHref","DateCellFactory","value","key","worklogsToRender","total","sum","date","map","target","href","locale","sumTotalLoggedTime","subSum","worklogItem","WorklogCalendar","onViewChanged","useState","selectedDate","setSelectedDate","getDateSpan","startOf","toDate","endOf","dateChanged","isSame","dateSpan","useEffect","dateCellRenderer","spinning","title","Group","onClick","nextMonth","clone","subtract","previousMonth","add","en_GB","onChange","dateFullCellRender","Home","timeZone","background","flex","UserInfo","onLogout","children","theme","mode","selectable","SubMenu","displayName","disabled","alt","src","avatarUrls","emailAddress","Header","Layout","MainLayout","Footer","fontSize","PrivateRoute","rest","render","location","Routes","path","mapDispatchToProps","checkAuthenticationConnect","connect","React","store","configureStore","reducer","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.56559e39.chunk.js","sourcesContent":["import { AnyAction, createAction, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { User, UserWithUrl } from \"./models/User\";\r\n\r\nexport enum AppActionTypes {\r\n  SetUser = \"APP_SET_USER\",\r\n  ClearUser = \"APP_CLEAR_USER\",\r\n  SetAuthenticated = \"APP_SET_AUTHENTICATED\",\r\n  Logout = \"APP_LOGOUT\"\r\n}\r\n\r\nexport interface SetUserAction extends PayloadAction<UserWithUrl> {\r\n  type: AppActionTypes.SetUser;\r\n  payload: { user: User; url: string };\r\n}\r\n\r\nexport interface ClearUserAction extends AnyAction {\r\n  type: AppActionTypes.ClearUser;\r\n}\r\n\r\nexport interface LogoutAction extends AnyAction {\r\n  type: AppActionTypes.Logout;\r\n}\r\n\r\nexport type AppActions = SetUserAction | ClearUserAction | LogoutAction;\r\n\r\nexport const setUserAction = (payload: {\r\n  user: User;\r\n  url: string;\r\n}): SetUserAction => ({\r\n  type: AppActionTypes.SetUser,\r\n  payload\r\n});\r\n\r\nexport const setAuthenticatedAction = createAction<boolean>(\r\n  AppActionTypes.SetAuthenticated\r\n);\r\n\r\nexport const logoutAction = createAction(AppActionTypes.Logout);\r\n\r\nexport const clearUserAction = createAction(AppActionTypes.ClearUser);\r\n","import { User } from \"./models/User\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { AppActionTypes } from \"./appActions\";\r\n\r\nexport interface AppState {\r\n  url: string | null;\r\n  user: User | null;\r\n  isAuthenticated: boolean | undefined;\r\n}\r\n\r\nconst defaultState: AppState = {\r\n  url: null,\r\n  user: null,\r\n  isAuthenticated: undefined\r\n};\r\n\r\nexport const appReducer = createReducer(defaultState, {\r\n  [AppActionTypes.SetUser]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    url: action.payload.url\r\n  }),\r\n  [AppActionTypes.ClearUser]: state => ({\r\n    ...state,\r\n    user: null,\r\n    isAuthenticated: false\r\n  }),\r\n  [AppActionTypes.SetAuthenticated]: (state, action) => ({\r\n    ...state,\r\n    isAuthenticated: action.payload\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport enum LoginActionTypes {\r\n  Login = \"LOGIN_LOGIN\",\r\n  LoginSuccess = \"LOGIN_SUCCESS\",\r\n  SetError = \"LOGIN_SET_ERROR\"\r\n}\r\n\r\nexport const loginAction = createAction<void>(LoginActionTypes.Login);\r\nexport const loginSuccess = createAction<void>(LoginActionTypes.LoginSuccess);\r\nexport const setError = createAction<any>(LoginActionTypes.SetError);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { LoginActionTypes } from \"./loginActions\";\r\n\r\nexport interface LoginState {\r\n  isLoggingIn: boolean;\r\n  error: number | null;\r\n}\r\n\r\nexport const defaultState: LoginState = {\r\n  isLoggingIn: false,\r\n  error: null\r\n};\r\n\r\nexport const loginReducer = createReducer(defaultState, {\r\n  [LoginActionTypes.Login]: state => ({\r\n    ...state,\r\n    isLoggingIn: true\r\n  }),\r\n  [LoginActionTypes.LoginSuccess]: state => ({\r\n    ...state,\r\n    isLoggingIn: false\r\n  }),\r\n  [LoginActionTypes.SetError]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isLoggingIn: false\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport enum WorklogActionTypes {\r\n  LoadWorklogs = \"WORKLOGS_LOAD\",\r\n  LoadedWorklogs = \"WORKLOGS_LOADED\",\r\n  ErrorLoadingWorklogs = \"WORKLOGS_ERROR\"\r\n}\r\n\r\nexport const loadWorklogsAction = createAction<void>(\r\n  WorklogActionTypes.LoadWorklogs\r\n);\r\nexport const loadedWorklogsAction = createAction<any>(\r\n  WorklogActionTypes.LoadedWorklogs\r\n);\r\nexport const errorLoadingWorklogsAction = createAction<any>(\r\n  WorklogActionTypes.ErrorLoadingWorklogs\r\n);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { WorklogActionTypes } from \"./worklogActions\";\r\n\r\nexport interface WorklogState {\r\n  isFetchingWorklogs: boolean;\r\n  worklogs: any;\r\n  error: any;\r\n}\r\n\r\nexport const defaultState: WorklogState = {\r\n  isFetchingWorklogs: false,\r\n  worklogs: null,\r\n  error: null\r\n};\r\n\r\nexport const worklogReducer = createReducer(defaultState, {\r\n  [WorklogActionTypes.LoadWorklogs]: state => ({\r\n    ...state,\r\n    isFetchingWorklogs: true\r\n  }),\r\n  [WorklogActionTypes.LoadedWorklogs]: (state, action) => ({\r\n    ...state,\r\n    worklogs: action.payload,\r\n    isFetchingWorklogs: false\r\n  }),\r\n  [WorklogActionTypes.ErrorLoadingWorklogs]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isFetchingWorklogs: false\r\n  })\r\n});\r\n","import { appReducer, AppState } from \"./appReducer\";\r\nimport { combineReducers } from \"redux\";\r\nimport { loginReducer, LoginState } from \"./components/Login/loginReducer\";\r\nimport { worklogReducer, WorklogState } from \"./components/Home/worklogReducer\";\r\n\r\nexport interface RootState {\r\n  appState: AppState;\r\n  login: LoginState;\r\n  worklogs: WorklogState;\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  appState: appReducer,\r\n  login: loginReducer,\r\n  worklogs: worklogReducer\r\n});\r\n","import React, { FormEvent } from \"react\";\r\nimport \"./LoginForm.css\";\r\nimport { Button, Form, Input, Typography } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport { LoginRequest } from \"../../models/LoginRequest\";\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface Props {\r\n  onSubmit: (request: LoginRequest) => void;\r\n  isLoggingIn?: boolean;\r\n  loginError?: any;\r\n  form?: WrappedFormUtils;\r\n}\r\n\r\nconst LoginForm: React.FunctionComponent<Props & FormComponentProps> = ({\r\n  onSubmit,\r\n  isLoggingIn,\r\n  loginError,\r\n  form\r\n}) => {\r\n  const onFormSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    form.validateFields((error: any, values: LoginRequest) => {\r\n      if (!error) {\r\n        onSubmit(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <Form onSubmit={onFormSubmit}>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"email\", {\r\n          rules: [{ required: true, message: \"Please input your email\" }]\r\n        })(<Input placeholder=\"Email\" />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"url\", {\r\n          rules: [{ required: true, message: \"Please input URL\" }]\r\n        })(<Input placeholder=\"URL\" />)}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"apiToken\", {\r\n          rules: [{ required: true, message: \"Please input token\" }]\r\n        })(<Input placeholder=\"Token\" />)}\r\n      </Form.Item>\r\n      <Button\r\n        loading={isLoggingIn}\r\n        type=\"primary\"\r\n        htmlType=\"submit\"\r\n        className=\"login-form__button\"\r\n      >\r\n        Log in\r\n      </Button>\r\n      {loginError && (\r\n        <div className=\"login-form__error\">\r\n          <Text type=\"danger\">Incorrect login data</Text>\r\n        </div>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst WrappedLoginForm = Form.create<Props & FormComponentProps>({\r\n  name: \"login\"\r\n})(LoginForm);\r\n\r\nexport default WrappedLoginForm;\r\n","import React from \"react\";\r\nimport LoginForm from \"../LoginForm/LoginForm\";\r\nimport { LoginRequest } from \"../../models/LoginRequest\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authenticate } from \"../../api/authenticate\";\r\nimport { RootState } from \"../../reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Card, Col, Layout, Row } from \"antd\";\r\nimport \"./Login.css\";\r\n\r\nconst Login: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const onLogin = (loginRequest: LoginRequest) =>\r\n    authenticate(loginRequest)(dispatch);\r\n\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  const isLoggingIn = useSelector(\r\n    (state: RootState) => state.login.isLoggingIn\r\n  );\r\n\r\n  const loginError = useSelector((state: RootState) => state.login.error);\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect to={{ pathname: \"dashboard\" }} />\r\n  ) : (\r\n    <Layout style={{ height: \"100%\" }}>\r\n      <Layout.Content style={{ padding: \"50px 50px\" }}>\r\n        <Row className=\"login__card-wrapper\">\r\n          <Col md={{ span: 12, offset: 6 }} xl={{ span: 8, offset: 8 }}>\r\n            <Card className=\"login__card\">\r\n              <h2>Sign in</h2>\r\n              <LoginForm\r\n                onSubmit={onLogin}\r\n                isLoggingIn={isLoggingIn}\r\n                loginError={loginError}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { LoginRequest } from \"../models/LoginRequest\";\r\nimport { Dispatch } from \"react\";\r\nimport {\r\n  loginAction,\r\n  loginSuccess,\r\n  setError\r\n} from \"../components/Login/loginActions\";\r\nimport axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { User, UserWithUrl } from \"../models/User\";\r\nimport {\r\n  clearUserAction,\r\n  logoutAction,\r\n  setAuthenticatedAction,\r\n  setUserAction\r\n} from \"../appActions\";\r\n\r\nexport const authenticate = (request: LoginRequest) => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(loginAction());\r\n    axios\r\n      .post(\"/api/users/authenticate\", request)\r\n      .then(_ => {\r\n        dispatch(loginSuccess());\r\n        return axios.get(\"/api/users/current\");\r\n      })\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch((error: AxiosError) => {\r\n        dispatch(setError(error.response && error.response.status));\r\n      });\r\n  };\r\n};\r\n\r\nexport const checkAuthenticate = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    axios\r\n      .get(\"/api/users/current\")\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch(() => {\r\n        dispatch(setAuthenticatedAction(false));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(logoutAction());\r\n    axios.post(\"api/users/logout\").then(() => dispatch(clearUserAction()));\r\n  };\r\n};\r\n","import { WorklogsRequest } from \"../models/WorklogsRequest\";\r\nimport { Dispatch } from \"redux\";\r\nimport {\r\n  errorLoadingWorklogsAction,\r\n  loadedWorklogsAction,\r\n  loadWorklogsAction\r\n} from \"../components/Home/worklogActions\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nconst formatDates = ({ from, to }: { from: Date; to: Date }) => {\r\n  const format = \"YYYY-MM-DD\";\r\n  return {\r\n    from: moment(from).format(format),\r\n    to: moment(to).format(format)\r\n  };\r\n};\r\n\r\nexport const getWorklogs = (request: WorklogsRequest) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(loadWorklogsAction());\r\n    const { from, to } = formatDates(request);\r\n    axios\r\n      .get(`/api/worklogs?from=${from}&to=${to}`)\r\n      .then((worklogsResponse: AxiosResponse<any>) => {\r\n        dispatch(loadedWorklogsAction(worklogsResponse.data));\r\n      })\r\n      .catch(error => {\r\n        dispatch(errorLoadingWorklogsAction(error));\r\n      });\r\n  };\r\n};\r\n","import { Worklog } from \"../../models/Worklog\";\r\nimport { getDateInTimezone } from \"../../utils/date\";\r\n\r\nexport interface WorklogModel {\r\n  issueKey: string;\r\n  timeSpent: number;\r\n  started: string;\r\n}\r\n\r\nexport type WorklogGroups = { [key: string]: WorklogModel[] };\r\n\r\nexport const DATE_FORMAT = \"YYYY-MM-DD\";\r\n\r\nconst mergeWorklogs = (group1: WorklogGroups, group2: WorklogGroups) => {\r\n  const result = Object.assign({}, group1);\r\n  return Object.keys(group2).reduce((previous, current) => {\r\n    const group2Value = group2[current];\r\n    const previousValue = previous[current] || [];\r\n    const mergedValue = [...previousValue, ...group2Value];\r\n    return { ...previous, [current]: mergedValue };\r\n  }, result);\r\n};\r\n\r\nexport const groupWorklogsByDates = (\r\n  worklogList: Worklog[],\r\n  userTimezone: string\r\n): WorklogGroups => {\r\n  if (!worklogList) {\r\n    return {};\r\n  }\r\n\r\n  return worklogList.reduce((groupedWorklogs, worklog) => {\r\n    const worklogs = worklog.worklogs.reduce(\r\n      (groupedWorklogEntries, worklogEntry) => {\r\n        const startDate = getDateInTimezone(\r\n          worklogEntry.started,\r\n          userTimezone\r\n        ).format(DATE_FORMAT);\r\n        const entries = groupedWorklogEntries[startDate] || [];\r\n        const newEntries = [\r\n          ...entries,\r\n          {\r\n            issueKey: worklog.issueKey,\r\n            timeSpent: worklogEntry.timeSpentSeconds,\r\n            started: worklogEntry.started\r\n          }\r\n        ];\r\n        return { ...groupedWorklogEntries, [startDate]: newEntries };\r\n      },\r\n      {} as WorklogGroups\r\n    );\r\n    return mergeWorklogs(groupedWorklogs, worklogs);\r\n  }, {});\r\n};\r\n","import { Moment } from \"moment\";\r\nimport moment from \"moment-timezone\";\r\n\r\nexport const getDateInTimezone = (\r\n  startDate: string,\r\n  userTimezone: string\r\n): Moment => {\r\n  return moment.tz(moment(startDate), userTimezone);\r\n};\r\n","export const formatDuration = (seconds: number): string => {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = (seconds / 60) % 60;\r\n  const stringMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n  return `${hours}:${stringMinutes}`;\r\n};\r\n","import React from \"react\";\r\nimport { DATE_FORMAT, WorklogGroups } from \"./groupWorklogsByDates\";\r\nimport { Moment } from \"moment\";\r\nimport \"./DateCell.css\";\r\nimport { formatDuration } from \"../../utils/duration\";\r\n\r\nconst buildHref = (url: string, issueKey: string) => {\r\n  return `https://${url}/browse/${issueKey}`;\r\n};\r\n\r\nconst DateCellFactory = (worklogs: WorklogGroups, url: string) => (\r\n  value: Moment\r\n) => {\r\n  const key = value.format(DATE_FORMAT);\r\n  const worklogsToRender = worklogs[key];\r\n  const total =\r\n    worklogsToRender &&\r\n    worklogsToRender.reduce((sum, worklog) => sum + worklog.timeSpent, 0);\r\n  return (\r\n    <div className=\"ant-fullcalendar-date\">\r\n      <div className=\"ant-fullcalendar-value callendar-cell__header\">\r\n        {worklogsToRender && (\r\n          <span className=\"callendar-cell__total-time\">\r\n            Total: {formatDuration(total)}\r\n          </span>\r\n        )}\r\n        <span className=\"callendar-cell__day\">{value.date()}</span>\r\n      </div>\r\n      <div className=\"ant-fullcalendar-content\">\r\n        {worklogsToRender && (\r\n          <div>\r\n            <ul className=\"worklogs\">\r\n              {worklogsToRender.map(worklog => (\r\n                <li className=\"worklog-list-item\" key={worklog.issueKey}>\r\n                  <a target=\"_blank\" href={buildHref(url, worklog.issueKey)}>\r\n                    {worklog.issueKey}\r\n                  </a>\r\n                  <span>{formatDuration(worklog.timeSpent)}</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateCellFactory;\r\n","import moment, { Moment } from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Calendar, ConfigProvider, Icon, Spin, Statistic } from \"antd\";\r\nimport { Worklog } from \"../../models/Worklog\";\r\nimport { groupWorklogsByDates } from \"./groupWorklogsByDates\";\r\nimport DateCellFactory from \"./DateCell\";\r\nimport { formatDuration } from \"../../utils/duration\";\r\nimport en_GB from \"antd/lib/locale-provider/en_GB\";\r\nimport \"./WorklogCalendar.css\";\r\n\r\ninterface WorklogCalendarProps {\r\n  url: string;\r\n  isFetchingWorklogs: boolean;\r\n  worklogs: Worklog[];\r\n  userTimezone: string;\r\n  onViewChanged: (from: Date, to: Date) => void;\r\n}\r\n\r\nmoment.locale(\"en-gb\");\r\n\r\nconst sumTotalLoggedTime = (worklogs: Worklog[]): number => {\r\n  if (!worklogs) {\r\n    return 0;\r\n  }\r\n  return worklogs.reduce(\r\n    (sum, worklog) =>\r\n      sum +\r\n      worklog.worklogs.reduce(\r\n        (subSum, worklogItem) => subSum + worklogItem.timeSpentSeconds,\r\n        0\r\n      ),\r\n    0\r\n  );\r\n};\r\n\r\nconst WorklogCalendar: React.FC<WorklogCalendarProps> = ({\r\n  url,\r\n  onViewChanged,\r\n  isFetchingWorklogs,\r\n  userTimezone,\r\n  worklogs\r\n}) => {\r\n  const [selectedDate, setSelectedDate] = useState(moment());\r\n\r\n  const getDateSpan = (current: Moment) => ({\r\n    from: current.startOf(\"month\").toDate(),\r\n    to: current.endOf(\"month\").toDate()\r\n  });\r\n\r\n  const dateChanged = (value: any) => {\r\n    setSelectedDate(value);\r\n    if (!value.startOf(\"month\").isSame(selectedDate.startOf(\"month\"))) {\r\n      const dateSpan = getDateSpan(value);\r\n      onViewChanged(dateSpan.from, dateSpan.to);\r\n    }\r\n  };\r\n\r\n  const forward = (value: any) => {\r\n    const previousMonth = selectedDate.clone().add(1, \"month\");\r\n    dateChanged(previousMonth);\r\n  };\r\n\r\n  const backward = (value: any) => {\r\n    const nextMonth = selectedDate.clone().subtract(1, \"month\");\r\n    dateChanged(nextMonth);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const dateSpan = getDateSpan(selectedDate);\r\n    onViewChanged(dateSpan.from, dateSpan.to);\r\n  }, []);\r\n\r\n  const groupedWorklogs = groupWorklogsByDates(worklogs, userTimezone);\r\n  const dateCellRenderer = DateCellFactory(groupedWorklogs, url);\r\n\r\n  return (\r\n    <Spin spinning={isFetchingWorklogs}>\r\n      <div className=\"worklog-calendar__header\">\r\n        <div className=\"worklog-calendar__total-summary\">\r\n          <Statistic\r\n            title=\"Total logged:\"\r\n            value={formatDuration(sumTotalLoggedTime(worklogs))}\r\n          />\r\n        </div>\r\n        <Button.Group>\r\n          <Button type=\"primary\" onClick={backward}>\r\n            <Icon type=\"left\" />\r\n            Backward\r\n          </Button>\r\n          <Button type=\"primary\" onClick={forward}>\r\n            Forward\r\n            <Icon type=\"right\" />\r\n          </Button>\r\n        </Button.Group>\r\n      </div>\r\n      <ConfigProvider locale={en_GB}>\r\n        <Calendar\r\n          value={selectedDate}\r\n          onChange={dateChanged}\r\n          dateFullCellRender={dateCellRenderer}\r\n        />\r\n      </ConfigProvider>\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default WorklogCalendar;\r\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWorklogs } from \"../../api/worklogs\";\nimport { RootState } from \"../../reducer\";\nimport WorklogCalendar from \"../WorklogCalendar/WorklogCalendar\";\n\nconst Home: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const fetchWorklogs = (from: Date, to: Date) => {\n    getWorklogs({ from, to })(dispatch);\n  };\n\n  const isFetchingWorklogs = useSelector(\n    (state: RootState) => state.worklogs.isFetchingWorklogs\n  );\n\n  const worklogs = useSelector((state: RootState) => state.worklogs.worklogs);\n  const url = useSelector((state: RootState) => state.appState.url) || \"\";\n  const userTimezone = useSelector((state: RootState) => {\n    const user = state.appState.user;\n    return user && user.timeZone;\n  }) as string;\n\n  return (\n    <div style={{ background: \"white\", flex: 1 }}>\n      <WorklogCalendar\n        url={url}\n        isFetchingWorklogs={isFetchingWorklogs}\n        onViewChanged={fetchWorklogs}\n        worklogs={worklogs}\n        userTimezone={userTimezone}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { PropsWithChildren } from \"react\";\r\nimport { User } from \"../../models/User\";\r\nimport { Icon, Menu } from \"antd\";\r\nimport SubMenu from \"antd/es/menu/SubMenu\";\r\nimport \"./UserInfo.css\";\r\n\r\ninterface Props {\r\n  user: User;\r\n  onLogout: () => void;\r\n}\r\n\r\nconst UserInfo: React.FC<PropsWithChildren<Props>> = ({\r\n  user,\r\n  onLogout,\r\n  children\r\n}) => {\r\n  return (\r\n    <Menu\r\n      theme=\"dark\"\r\n      mode=\"horizontal\"\r\n      className=\"user-info__menu\"\r\n      selectable={false}\r\n    >\r\n      <SubMenu\r\n        title={\r\n          <span>\r\n            <Icon type=\"user\" />\r\n            {user.displayName}\r\n          </span>\r\n        }\r\n      >\r\n        <Menu.Item disabled={true}>\r\n          <img\r\n            alt=\"avatar\"\r\n            src={user.avatarUrls[\"32x32\"]}\r\n            className=\"user-info__avatar\"\r\n          />\r\n          {user.emailAddress}\r\n        </Menu.Item>\r\n        <Menu.Item disabled={true}>Timezone: {user.timeZone}</Menu.Item>\r\n        <Menu.Item onClick={onLogout}>\r\n          <Icon type=\"logout\" />\r\n          Logout\r\n        </Menu.Item>\r\n      </SubMenu>\r\n      {children && (\r\n        <Menu.Item className=\"user-info__extras\">{children}</Menu.Item>\r\n      )}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport { Icon, Layout } from \"antd\";\r\nimport \"./MainLayout.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducer\";\r\nimport UserInfo from \"../UserInfo/UserInfo\";\r\nimport { User } from \"../../models/User\";\r\nimport { logout } from \"../../api/authenticate\";\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n// @ts-ignore\r\nconst MainLayout = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => dispatch(logout());\r\n  const user = useSelector((state: RootState) => state.appState.user) as User;\r\n\r\n  return (\r\n    <Layout className=\"main-layout\">\r\n      <Header className=\"main-layout__header\">\r\n        <UserInfo user={user} onLogout={onLogout}>\r\n          <a\r\n            href=\"https://github.com/iczajkow/jira-web-timesheet\"\r\n            target=\"_blank\"\r\n          >\r\n            <Icon type=\"github\" style={{ fontSize: \"24px\" }} />\r\n          </a>\r\n        </UserInfo>\r\n      </Header>\r\n      <Content className=\"main-layout__content\">{children}</Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport MainLayout from \"./components/MainLayout/MainLayout\";\r\n\r\n// @ts-ignore\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        isAuthenticated ? (\r\n          <MainLayout>{children}</MainLayout>\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from \"./components/Login/Login\";\r\nimport Home from \"./components/Home/Home\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nconst Routes: React.FC = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <PrivateRoute path=\"/dashboard\">\r\n        <Home />\r\n      </PrivateRoute>\r\n      <Route path=\"*\">\r\n        <Redirect to={{ pathname: \"dashboard\" }} />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import { connect } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport React from \"react\";\r\nimport { checkAuthenticate } from \"./api/authenticate\";\r\nimport Routes from \"./Routes\";\r\n\r\ninterface Props {\r\n  checkAuthenticationConnect: () => void;\r\n  isAuthenticated: boolean | null;\r\n}\r\n\r\nconst AppEntry: React.FC<Props> = ({\r\n  checkAuthenticationConnect,\r\n  isAuthenticated\r\n}) => {\r\n  React.useEffect(() => {\r\n    checkAuthenticationConnect();\r\n  }, []);\r\n  return isAuthenticated != null ? <Routes /> : null;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  isAuthenticated: state.appState.isAuthenticated\r\n});\r\nconst mapDispatchToProps = {\r\n  checkAuthenticationConnect: checkAuthenticate\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppEntry as any);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { rootReducer } from \"./reducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppEntry from \"./AppEntry\";\r\n\r\nconst store = configureStore({ reducer: rootReducer });\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <AppEntry />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}