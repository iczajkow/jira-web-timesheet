{"version":3,"sources":["appActions.ts","appReducer.ts","pages/Login/loginActions.ts","pages/Login/loginReducer.ts","pages/Home/worklogActions.ts","pages/Home/worklogReducer.ts","reducer.ts","api/users.ts","dispatchers/authenticate.ts","pages/Login/LoginForm/LoginForm.tsx","pages/Login/Login.tsx","api/worklogs.ts","utils/date.ts","api/issues.ts","pages/Home/IssueSearch/IssueSearch.tsx","pages/Home/AddWorklogForm/AddWorklogForm.tsx","pages/Home/AddWorklogFormModal/AddWorklogFormModal.tsx","utils/duration.ts","pages/Home/DetailsSider/DetailsTitle.tsx","pages/Home/utils/sumTotalLoggedTime.ts","pages/Home/utils/issueUrl.ts","pages/Home/DetailsSider/DetailsSider.tsx","pages/Home/utils/groupWorklogsByDates.ts","pages/Home/WorklogCalendar/DateCell.tsx","pages/Home/UserSearch/UserSearch.tsx","pages/Home/WorklogCalendar/WorklogCalendar.tsx","pages/Home/Home.tsx","dispatchers/worklogs.ts","utils/hooks.ts","pages/Home/utils/getWorklogForDate.ts","pages/Home/UserInfo/UserInfo.tsx","components/MainLayout/MainLayout.tsx","PrivateRoute.tsx","Routes.tsx","AppEntry.tsx","api/interceptors.ts","utils/security-notification.tsx","App.tsx","index.tsx"],"names":["AppActionTypes","setUserAction","payload","type","SetUser","setAuthenticatedAction","createAction","SetAuthenticated","logoutAction","Logout","clearUserAction","ClearUser","LoginActionTypes","defaultState","url","user","isAuthenticated","undefined","appReducer","createReducer","state","action","loginAction","Login","loginSuccess","LoginSuccess","setError","SetError","WorklogActionTypes","loginReducer","isLoggingIn","error","loadWorklogsAction","LoadWorklogs","loadedWorklogsAction","LoadedWorklogs","errorLoadingWorklogsAction","ErrorLoadingWorklogs","worklogReducer","isFetchingWorklogs","month","year","day","worklogs","rootReducer","combineReducers","appState","login","current","axios","get","authenticateDispatch","request","dispatch","post","authenticate","then","userResponse","data","catch","response","status","logoutDispatch","Text","Typography","WrappedLoginForm","Form","create","name","onSubmit","loginError","form","getFieldDecorator","event","preventDefault","validateFields","values","Item","rules","required","message","placeholder","prefix","suffix","title","addonBefore","content","className","href","target","rel","valuePropName","initialValue","loading","htmlType","useDispatch","useSelector","to","pathname","style","height","Content","padding","md","span","offset","xl","loginRequest","getWorklogs","from","formattedDate","moment","format","formatDates","accountId","getDateSpan","startOf","toDate","endOf","issues","query","params","IssueSearch","props","value","fetching","fetchId","fetchIssues","setState","currentFetchId","result","handleChange","issueId","issue","find","Number","id","key","summaryText","onChange","debounce","showSearch","width","this","onSearch","showArrow","filterOption","defaultActiveFirstOption","notFoundContent","size","map","Option","React","Component","formItemLayout","labelCol","xs","sm","wrapperCol","AddWorklogForm","initialDate","validationPassed","useEffect","resetFields","label","clone","hour","minute","second","showTime","min","max","WrappedAddWorklogFormModal","selectedDate","modalVisible","onHideModal","onAdded","useState","pending","setPending","setValidationPassed","validateTimeSpent","minutes","getFieldValue","hours","visible","confirmLoading","onCancel","onOk","err","started","timeSpent","formToWorklogRequest","getFieldsValue","worklog","formatDuration","seconds","Math","floor","stringMinutes","DetailsTitle","date","totalLoggedTime","sumTotalLoggedTime","isWorklogs","sumForWorklog","sumForWorklogModels","reduce","sum","subSum","worklogItem","timeSpentSeconds","firstItem","Array","issueUrl","issueKey","DetailsSider","jiraUrl","canEdit","onWorklogDeleted","handleDelete","Modal","confirm","worklogId","delete","deleteWorklog","header","dataSource","renderItem","Meta","onClick","icon","description","groupWorklogsByDates","worklogList","userTimezone","groupedWorklogs","group1","group2","Object","assign","keys","previous","group2Value","previousValue","mergedValue","mergeWorklogs","groupedWorklogEntries","worklogEntry","startDate","tz","getDateInTimezone","entries","newEntries","DateCellFactory","worklogsToRender","total","fullDateLogged","index","fetchUsers","UserSearch","onUserSelect","displayName","userKey","userData","WorklogCalendar","onViewChanged","onRefresh","userWorklogs","onAddWorklogClick","window","addEventListener","keydown","removeEventListener","dateChanged","dateCellRenderer","spinning","Group","previousMonth","subtract","nextMonth","add","dateFullCellRender","getInitialDate","isNil","Home","fetchWorklogs","getMonth","getFullYear","worklogsResponse","history","useHistory","URLSearchParams","useLocation","search","appUser","timeZone","errorWhileFetchingWorklogs","worklogsByDate","setSelectedDate","setModalVisible","encodedUrlParams","encodeURIComponent","getUser","handleRefresh","handleHideModal","worklogForSelectedDate","changedUser","changedYear","changedMonth","urlParams","forEach","set","toString","push","setQueryParams","UserInfo","onLogout","children","theme","mode","selectable","SubMenu","disabled","alt","src","avatarUrls","emailAddress","Header","Layout","MainLayout","fontSize","PrivateRoute","rest","render","location","Routes","path","mapDispatchToProps","checkAuthenticationConnect","connect","interceptors","use","Promise","reject","securityNotification","protocol","Date","now","btn","process","notification","open","duration","openNotification","store","configureStore","reducer","App","locale","en_GB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b6cdfc1d.chunk.js","sourcesContent":["import { AnyAction, createAction, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { User, UserWithUrl } from \"./models/User\";\r\n\r\nexport enum AppActionTypes {\r\n  SetUser = \"APP_SET_USER\",\r\n  ClearUser = \"APP_CLEAR_USER\",\r\n  SetAuthenticated = \"APP_SET_AUTHENTICATED\",\r\n  Logout = \"APP_LOGOUT\"\r\n}\r\n\r\nexport interface SetUserAction extends PayloadAction<UserWithUrl> {\r\n  type: AppActionTypes.SetUser;\r\n  payload: { user: User; url: string };\r\n}\r\n\r\nexport interface ClearUserAction extends AnyAction {\r\n  type: AppActionTypes.ClearUser;\r\n}\r\n\r\nexport interface LogoutAction extends AnyAction {\r\n  type: AppActionTypes.Logout;\r\n}\r\n\r\nexport type AppActions = SetUserAction | ClearUserAction | LogoutAction;\r\n\r\nexport const setUserAction = (payload: {\r\n  user: User;\r\n  url: string;\r\n}): SetUserAction => ({\r\n  type: AppActionTypes.SetUser,\r\n  payload\r\n});\r\n\r\nexport const setAuthenticatedAction = createAction<boolean>(\r\n  AppActionTypes.SetAuthenticated\r\n);\r\n\r\nexport const logoutAction = createAction(AppActionTypes.Logout);\r\n\r\nexport const clearUserAction = createAction(AppActionTypes.ClearUser);\r\n","import { User } from \"./models/User\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { AppActionTypes } from \"./appActions\";\r\n\r\nexport interface AppState {\r\n  url: string | null;\r\n  user: User | null;\r\n  isAuthenticated: boolean | undefined;\r\n}\r\n\r\nconst defaultState: AppState = {\r\n  url: null,\r\n  user: null,\r\n  isAuthenticated: undefined\r\n};\r\n\r\nexport const appReducer = createReducer(defaultState, {\r\n  [AppActionTypes.SetUser]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    url: action.payload.url\r\n  }),\r\n  [AppActionTypes.ClearUser]: state => ({\r\n    ...state,\r\n    user: null,\r\n    isAuthenticated: false\r\n  }),\r\n  [AppActionTypes.SetAuthenticated]: (state, action) => ({\r\n    ...state,\r\n    isAuthenticated: action.payload\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport enum LoginActionTypes {\r\n  Login = \"LOGIN_LOGIN\",\r\n  LoginSuccess = \"LOGIN_SUCCESS\",\r\n  SetError = \"LOGIN_SET_ERROR\"\r\n}\r\n\r\nexport const loginAction = createAction<void>(LoginActionTypes.Login);\r\nexport const loginSuccess = createAction<void>(LoginActionTypes.LoginSuccess);\r\nexport const setError = createAction<any>(LoginActionTypes.SetError);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { LoginActionTypes } from \"./loginActions\";\r\n\r\nexport interface LoginState {\r\n  isLoggingIn: boolean;\r\n  error: number | null;\r\n}\r\n\r\nexport const defaultState: LoginState = {\r\n  isLoggingIn: false,\r\n  error: null\r\n};\r\n\r\nexport const loginReducer = createReducer(defaultState, {\r\n  [LoginActionTypes.Login]: state => ({\r\n    ...state,\r\n    isLoggingIn: true\r\n  }),\r\n  [LoginActionTypes.LoginSuccess]: state => ({\r\n    ...state,\r\n    isLoggingIn: false\r\n  }),\r\n  [LoginActionTypes.SetError]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isLoggingIn: false\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { User } from \"../../models/User\";\r\n\r\nexport enum WorklogActionTypes {\r\n  LoadWorklogs = \"WORKLOGS_LOAD\",\r\n  LoadedWorklogs = \"WORKLOGS_LOADED\",\r\n  ErrorLoadingWorklogs = \"WORKLOGS_ERROR\"\r\n}\r\n\r\nexport interface LoadWorklogsPayload {\r\n  user: User;\r\n  month: number;\r\n  year: number;\r\n}\r\n\r\nexport const loadWorklogsAction = createAction<LoadWorklogsPayload>(\r\n  WorklogActionTypes.LoadWorklogs\r\n);\r\nexport const loadedWorklogsAction = createAction<any>(\r\n  WorklogActionTypes.LoadedWorklogs\r\n);\r\nexport const errorLoadingWorklogsAction = createAction<any>(\r\n  WorklogActionTypes.ErrorLoadingWorklogs\r\n);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { WorklogActionTypes } from \"./worklogActions\";\r\nimport { User } from \"../../models/User\";\r\n\r\nexport interface WorklogState {\r\n  isFetchingWorklogs: boolean;\r\n  user: User | null;\r\n  month: number | null;\r\n  year: number | null;\r\n  day: number | null;\r\n  worklogs: any;\r\n  error: any;\r\n}\r\n\r\nexport const defaultState: WorklogState = {\r\n  isFetchingWorklogs: false,\r\n  month: null,\r\n  year: null,\r\n  day: null,\r\n  user: null,\r\n  worklogs: null,\r\n  error: null\r\n};\r\n\r\nexport const worklogReducer = createReducer(defaultState, {\r\n  [WorklogActionTypes.LoadWorklogs]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    month: action.payload.month,\r\n    year: action.payload.year,\r\n    day: action.payload.day,\r\n    isFetchingWorklogs: true,\r\n    error: null\r\n  }),\r\n  [WorklogActionTypes.LoadedWorklogs]: (state, action) => ({\r\n    ...state,\r\n    worklogs: action.payload,\r\n    isFetchingWorklogs: false\r\n  }),\r\n  [WorklogActionTypes.ErrorLoadingWorklogs]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isFetchingWorklogs: false\r\n  })\r\n});\r\n","import { appReducer, AppState } from \"./appReducer\";\r\nimport { combineReducers } from \"redux\";\r\nimport { loginReducer, LoginState } from \"./pages/Login/loginReducer\";\r\nimport { worklogReducer, WorklogState } from \"./pages/Home/worklogReducer\";\r\n\r\nexport interface RootState {\r\n  appState: AppState;\r\n  login: LoginState;\r\n  worklogs: WorklogState;\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  appState: appReducer,\r\n  login: loginReducer,\r\n  worklogs: worklogReducer\r\n});\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { User, UserWithUrl } from \"../models/User\";\r\n\r\nexport interface AuthenticateRequest {\r\n  email: string;\r\n  url: string;\r\n  apiToken: string;\r\n  rememberMe: boolean;\r\n}\r\n\r\nexport const authenticate = (request: AuthenticateRequest) =>\r\n  axios.post(\"/api/users/authenticate\", request);\r\n\r\nexport const current = () => axios.get<UserWithUrl>(\"/api/users/current\");\r\n\r\nexport const logout = () => axios.post(\"api/users/logout\");\r\n\r\nexport const searchUsers = (name: string): Promise<AxiosResponse<User[]>> => {\r\n  return axios.get(\"/api/users/search\", { params: { query: name } });\r\n};\r\n\r\nexport const getUser = (accountId: string): Promise<AxiosResponse<User>> => {\r\n  const encodedUrlParams = encodeURIComponent(accountId);\r\n  return axios.get(`/api/users/${encodedUrlParams}`);\r\n};\r\n","import { Dispatch } from \"react\";\r\nimport {\r\n  loginAction,\r\n  loginSuccess,\r\n  setError\r\n} from \"../pages/Login/loginActions\";\r\nimport { AxiosError, AxiosResponse } from \"axios\";\r\nimport { UserWithUrl } from \"../models/User\";\r\nimport {\r\n  clearUserAction,\r\n  logoutAction,\r\n  setAuthenticatedAction,\r\n  setUserAction\r\n} from \"../appActions\";\r\nimport {\r\n  authenticate,\r\n  AuthenticateRequest,\r\n  current,\r\n  logout\r\n} from \"../api/users\";\r\n\r\nexport const authenticateDispatch = (request: AuthenticateRequest) => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(loginAction());\r\n    authenticate(request)\r\n      .then(() => {\r\n        dispatch(loginSuccess());\r\n        return current();\r\n      })\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch((error: AxiosError) => {\r\n        dispatch(setError(error.response && error.response.status));\r\n      });\r\n  };\r\n};\r\n\r\nexport const checkAuthenticateDispatch = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    current()\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch(() => {\r\n        dispatch(setAuthenticatedAction(false));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutDispatch = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(logoutAction());\r\n    logout().then(() => dispatch(clearUserAction()));\r\n  };\r\n};\r\n","import React, { FormEvent } from \"react\";\r\nimport \"./LoginForm.css\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Form,\r\n  Icon,\r\n  Input,\r\n  Popover,\r\n  Tooltip,\r\n  Typography\r\n} from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport { AuthenticateRequest } from \"../../../api/users\";\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface Props {\r\n  onSubmit: (request: AuthenticateRequest) => void;\r\n  isLoggingIn?: boolean;\r\n  loginError?: any;\r\n  form?: WrappedFormUtils;\r\n}\r\n\r\nconst LoginForm: React.FunctionComponent<Props & FormComponentProps> = ({\r\n  onSubmit,\r\n  isLoggingIn,\r\n  loginError,\r\n  form\r\n}) => {\r\n  const onFormSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    form.validateFields((error: any, values: AuthenticateRequest) => {\r\n      if (!error) {\r\n        onSubmit(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <Form onSubmit={onFormSubmit}>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"email\", {\r\n          rules: [{ required: true, message: \"Please input your email\" }]\r\n        })(\r\n          <Input\r\n            placeholder=\"Email\"\r\n            prefix={<Icon type=\"user\"></Icon>}\r\n            suffix={\r\n              <Tooltip title=\"Please input your jira account email\">\r\n                <Icon type=\"info-circle\" />\r\n              </Tooltip>\r\n            }\r\n          />\r\n        )}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"url\", {\r\n          rules: [{ required: true, message: \"Please input URL\" }]\r\n        })(\r\n          <Input\r\n            addonBefore=\"https://\"\r\n            placeholder=\"URL\"\r\n            suffix={\r\n              <Tooltip title=\"Please enter your jira instance url - ex. www.atlassian.com\">\r\n                <Icon type=\"info-circle\" />\r\n              </Tooltip>\r\n            }\r\n          />\r\n        )}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"apiToken\", {\r\n          rules: [{ required: true, message: \"Please input token\" }]\r\n        })(\r\n          <Input\r\n            placeholder=\"API Token\"\r\n            suffix={\r\n              <Popover\r\n                content={\r\n                  <span>\r\n                    To generate API token for this app go to\r\n                    <a\r\n                      className=\"jira-link\"\r\n                      href=\"https://id.atlassian.com/manage-profile/security/api-tokens\"\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      https://id.atlassian.com/manage-profile/security/api-tokens\r\n                    </a>\r\n                  </span>\r\n                }\r\n              >\r\n                <Icon type=\"info-circle\" />\r\n              </Popover>\r\n            }\r\n          />\r\n        )}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"rememberMe\", {\r\n          valuePropName: \"checked\",\r\n          initialValue: true\r\n        })(<Checkbox>Remember me</Checkbox>)}\r\n      </Form.Item>\r\n      <Button\r\n        loading={isLoggingIn}\r\n        type=\"primary\"\r\n        htmlType=\"submit\"\r\n        className=\"login-form__button\"\r\n      >\r\n        Log in\r\n      </Button>\r\n      {loginError && (\r\n        <div className=\"login-form__error\">\r\n          <Text type=\"danger\">Incorrect login data</Text>\r\n        </div>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst WrappedLoginForm = Form.create<Props & FormComponentProps>({\r\n  name: \"login\"\r\n})(LoginForm);\r\n\r\nexport default WrappedLoginForm;\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authenticateDispatch } from \"../../dispatchers/authenticate\";\r\nimport { RootState } from \"../../reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Card, Col, Layout, Row } from \"antd\";\r\nimport \"./Login.css\";\r\nimport { AuthenticateRequest } from \"../../api/users\";\r\n\r\nconst Login: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const onLogin = (loginRequest: AuthenticateRequest) =>\r\n    authenticateDispatch(loginRequest)(dispatch);\r\n\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  const isLoggingIn = useSelector(\r\n    (state: RootState) => state.login.isLoggingIn\r\n  );\r\n\r\n  const loginError = useSelector((state: RootState) => state.login.error);\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect to={{ pathname: \"dashboard\" }} />\r\n  ) : (\r\n    <Layout style={{ height: \"100%\" }}>\r\n      <Layout.Content style={{ padding: \"50px 50px\" }}>\r\n        <Row className=\"login__card-wrapper\">\r\n          <Col md={{ span: 12, offset: 6 }} xl={{ span: 8, offset: 8 }}>\r\n            <Card className=\"login__card\">\r\n              <h2>Sign in</h2>\r\n              <LoginForm\r\n                onSubmit={onLogin}\r\n                isLoggingIn={isLoggingIn}\r\n                loginError={loginError}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import axios from \"axios\";\r\nimport { User } from \"../models/User\";\r\nimport moment from \"moment\";\r\n\r\nexport interface GetWorklogsParams {\r\n  user: User;\r\n  from: Date;\r\n  to: Date;\r\n}\r\n\r\nconst formatDates = ({ from, to }: { from: Date; to: Date }) => {\r\n  const format = \"YYYY-MM-DD\";\r\n  return {\r\n    from: moment(from).format(format),\r\n    to: moment(to).format(format)\r\n  };\r\n};\r\n\r\nexport const getWorklogs = ({ from, to, user }: GetWorklogsParams) => {\r\n  const formattedDate = formatDates({ from, to });\r\n  return axios.get(\r\n    `/api/worklogs?from=${formattedDate.from}&to=${formattedDate.to}&accountId=${user.accountId}`\r\n  );\r\n};\r\n\r\nexport const postWorklog = (worklog: any) => {\r\n  return axios.post(\"api/worklogs\", worklog);\r\n};\r\n\r\nexport const deleteWorklog = ({\r\n  worklogId,\r\n  issueId\r\n}: {\r\n  worklogId: string;\r\n  issueId: string;\r\n}) => {\r\n  return axios.delete(`/api/worklogs/${issueId}/${worklogId}`);\r\n};\r\n","import { Moment } from \"moment\";\r\nimport moment from \"moment-timezone\";\r\n\r\nexport const getDateInTimezone = (\r\n  startDate: string,\r\n  userTimezone: string\r\n): Moment => {\r\n  return moment.tz(moment(startDate), userTimezone);\r\n};\r\n\r\nexport const getDateSpan = (current: Moment) => ({\r\n  from: current.startOf(\"month\").toDate(),\r\n  to: current.endOf(\"month\").toDate()\r\n});\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { IssueSearchResponse } from \"../models/Issue\";\r\n\r\nexport const issues = (\r\n  query: string\r\n): Promise<AxiosResponse<IssueSearchResponse[]>> =>\r\n  axios.get(\"/api/issues\", { params: { query } });\r\n","import React from \"react\";\r\nimport { Select, Spin } from \"antd\";\r\nimport { debounce } from \"lodash\";\r\nimport { issues } from \"../../../api/issues\";\r\nimport { IssueSearchResponse } from \"../../../models/Issue\";\r\n\r\ninterface IssueSearchProps {\r\n  onChange?: (issue: IssueSearchResponse | undefined) => void;\r\n}\r\n\r\ninterface IssueSearchState {\r\n  data: IssueSearchResponse[];\r\n  value: string;\r\n  fetching: boolean;\r\n}\r\n\r\nclass IssueSearch extends React.Component<IssueSearchProps, IssueSearchState> {\r\n  state: IssueSearchState = {\r\n    data: [],\r\n    value: \"\",\r\n    fetching: false\r\n  };\r\n  fetchId = 0;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.fetchIssues = debounce(this.fetchIssues, 500);\r\n  }\r\n\r\n  fetchIssues = (value: string) => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ data: [], fetching: true });\r\n    this.fetchId += 1;\r\n    const currentFetchId = this.fetchId;\r\n    issues(value).then(result => {\r\n      if (currentFetchId === this.fetchId) {\r\n        const issues = result.data;\r\n        this.setState({ data: issues, fetching: false });\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChange = (issueId: string) => {\r\n    const issue: IssueSearchResponse | undefined = this.state.data.find(\r\n      (issue: IssueSearchResponse) => Number(issue.id) === Number(issueId)\r\n    );\r\n    let value = \"\";\r\n    if (issue) {\r\n      value = `${issue.key} - ${issue.summaryText}`;\r\n    }\r\n    this.setState({\r\n      value,\r\n      data: [],\r\n      fetching: false\r\n    });\r\n    this.props.onChange && this.props.onChange(issue);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user__search\">\r\n        <Select\r\n          showSearch\r\n          style={{ width: \"100%\" }}\r\n          placeholder=\"Select issue\"\r\n          value={this.state.value as any}\r\n          onSearch={this.fetchIssues}\r\n          onChange={this.handleChange}\r\n          showArrow={false}\r\n          filterOption={false}\r\n          defaultActiveFirstOption={false}\r\n          notFoundContent={this.state.fetching ? <Spin size=\"small\" /> : null}\r\n        >\r\n          {(this.state.data as IssueSearchResponse[]).map(value => (\r\n            <Select.Option key={value.id}>\r\n              {value.key} - {value.summaryText}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IssueSearch;\r\n","import React, { useEffect } from \"react\";\r\nimport { DatePicker, Form, InputNumber, Typography } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport IssueSearch from \"../IssueSearch/IssueSearch\";\r\nimport * as moment from \"moment\";\r\n\r\nexport interface AddWorklogFormProps {\r\n  validationPassed: boolean;\r\n  initialDate: moment.Moment;\r\n  onChange: () => void;\r\n}\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 }\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 20 }\r\n  }\r\n};\r\n\r\nconst AddWorklogForm: React.FC<FormComponentProps & AddWorklogFormProps> = ({\r\n  form,\r\n  initialDate,\r\n  validationPassed,\r\n  onChange\r\n}) => {\r\n  const { getFieldDecorator } = form;\r\n\r\n  useEffect(() => {\r\n    form.resetFields([\"started\"]);\r\n  }, [initialDate]);\r\n\r\n  return (\r\n    <Form onChange={onChange}>\r\n      <Form.Item label=\"Issue\" {...formItemLayout}>\r\n        {getFieldDecorator(\"issue\", {\r\n          rules: [{ required: true, message: \"Please select issue\" }]\r\n        })(<IssueSearch />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Started at\" {...formItemLayout}>\r\n        {getFieldDecorator(\"started\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: initialDate\r\n            .clone()\r\n            .hour(12)\r\n            .minute(0)\r\n            .second(0)\r\n        })(<DatePicker showTime={true} />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Hours\" labelCol={{ sm: 4 }} wrapperCol={{ sm: 4 }}>\r\n        {getFieldDecorator(\"hours\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: 0\r\n        })(<InputNumber min={0} max={24} />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Minutes\" labelCol={{ sm: 4 }} wrapperCol={{ sm: 4 }}>\r\n        {getFieldDecorator(\"minutes\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: 0\r\n        })(<InputNumber min={0} max={59} />)}\r\n      </Form.Item>\r\n      {validationPassed ? (\r\n        \"\"\r\n      ) : (\r\n        <Typography.Text type=\"danger\">\r\n          Minutes or hours need to be provided\r\n        </Typography.Text>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddWorklogForm;\r\n","import AddWorklogForm from \"../AddWorklogForm/AddWorklogForm\";\r\nimport { Form, Modal } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport * as moment from \"moment\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { postWorklog } from \"../../../api/worklogs\";\r\nimport { IssueSearchResponse } from \"../../../models/Issue\";\r\nimport { WorklogEntryRequest } from \"../../../models/Worklog\";\r\n\r\ninterface WorklogForm {\r\n  issue: IssueSearchResponse;\r\n  started: moment.Moment;\r\n  hours: number;\r\n  minutes: number;\r\n}\r\n\r\nconst formToWorklogRequest = ({\r\n  issue,\r\n  started,\r\n  hours,\r\n  minutes\r\n}: WorklogForm): WorklogEntryRequest => {\r\n  const issueId = issue.id;\r\n  const startedString = started.format();\r\n  const timeSpentSeconds = hours * 3600 + minutes * 60;\r\n  return {\r\n    issueId,\r\n    started: startedString,\r\n    timeSpent: timeSpentSeconds\r\n  };\r\n};\r\n\r\nexport interface AddWorklogFormModalProps {\r\n  selectedDate: moment.Moment;\r\n  modalVisible: boolean;\r\n  onHideModal: () => void;\r\n  onAdded: () => void;\r\n}\r\n\r\nconst AddWorklogFormModal: React.FC<FormComponentProps &\r\n  AddWorklogFormModalProps> = ({\r\n  selectedDate,\r\n  modalVisible,\r\n  onHideModal,\r\n  onAdded,\r\n  form\r\n}) => {\r\n  const [pending, setPending] = useState(false);\r\n  const [validationPassed, setValidationPassed] = useState(true);\r\n\r\n  const validateTimeSpent = () => {\r\n    const minutes = form.getFieldValue(\"minutes\");\r\n    const hours = form.getFieldDecorator(\"hours\");\r\n    const valid = minutes || hours;\r\n    setValidationPassed(!!valid);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    validateTimeSpent();\r\n    form.validateFields(err => {\r\n      if (!err && validationPassed) {\r\n        setPending(true);\r\n        const request = formToWorklogRequest(\r\n          form.getFieldsValue() as WorklogForm\r\n        );\r\n        postWorklog(request).then(() => {\r\n          setPending(false);\r\n          onAdded();\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleFormChange = () => {\r\n    validateTimeSpent();\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Log Time\"\r\n      visible={modalVisible}\r\n      confirmLoading={pending}\r\n      onCancel={onHideModal}\r\n      onOk={handleOk}\r\n    >\r\n      <AddWorklogForm\r\n        form={form}\r\n        initialDate={selectedDate}\r\n        validationPassed={validationPassed}\r\n        onChange={handleFormChange}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst WrappedAddWorklogFormModal = Form.create<\r\n  FormComponentProps & AddWorklogFormModalProps\r\n>()(AddWorklogFormModal);\r\n\r\nexport default WrappedAddWorklogFormModal;\r\n","export const formatDuration = (seconds: number): string => {\r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = (seconds / 60) % 60;\r\n  const stringMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n  return `${hours}:${stringMinutes}`;\r\n};\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport { formatDuration } from \"../../../utils/duration\";\r\nimport \"./DetailsTitle.css\";\r\n\r\nexport interface DetailsTitleProps {\r\n  date: moment.Moment;\r\n  totalLoggedTime: number;\r\n}\r\n\r\nexport const DetailsTitle: React.FC<DetailsTitleProps> = ({\r\n  date,\r\n  totalLoggedTime\r\n}) => {\r\n  return (\r\n    <div className=\"details__title\">\r\n      <span>{date.format(\"ll\")}</span>\r\n      <span>{formatDuration(totalLoggedTime)}</span>\r\n    </div>\r\n  );\r\n};\r\n","import { Worklog } from \"../../../models/Worklog\";\r\nimport { WorklogModel } from \"./groupWorklogsByDates\";\r\n\r\nexport const sumTotalLoggedTime = (\r\n  worklogs: (Worklog | WorklogModel)[]\r\n): number => {\r\n  if (!worklogs) {\r\n    return 0;\r\n  } else if (isWorklogs(worklogs)) {\r\n    return sumForWorklog(worklogs);\r\n  } else {\r\n    return sumForWorklogModels(worklogs as WorklogModel[]);\r\n  }\r\n};\r\n\r\nconst sumForWorklog = (worklogs: Worklog[]): number => {\r\n  return worklogs.reduce(\r\n    (sum, worklog) =>\r\n      sum +\r\n      worklog.worklogs.reduce(\r\n        (subSum, worklogItem) => subSum + worklogItem.timeSpentSeconds,\r\n        0\r\n      ),\r\n    0\r\n  );\r\n};\r\n\r\nconst sumForWorklogModels = (worklogs: WorklogModel[]): number => {\r\n  return worklogs.reduce((sum, worklog) => sum + worklog.timeSpent, 0);\r\n};\r\n\r\nconst isWorklogs = (value: any[]): value is Worklog[] => {\r\n  const firstItem = value[0];\r\n  if (!firstItem) {\r\n    return false;\r\n  }\r\n  return firstItem[\"worklogs\"] instanceof Array;\r\n};\r\n","export const issueUrl = (url: string, issueKey: string) => {\r\n  return `https://${url}/browse/${issueKey}`;\r\n};\r\n","import React from \"react\";\r\nimport { Button, Card, Modal, List, message } from \"antd\";\r\nimport \"./DetailsSider.css\";\r\nimport moment from \"moment\";\r\nimport { WorklogModel } from \"../utils/groupWorklogsByDates\";\r\nimport { DetailsTitle } from \"./DetailsTitle\";\r\nimport { sumTotalLoggedTime } from \"../utils/sumTotalLoggedTime\";\r\nimport { formatDuration } from \"../../../utils/duration\";\r\nimport { issueUrl } from \"../utils/issueUrl\";\r\nimport { deleteWorklog } from \"../../../api/worklogs\";\r\n\r\ninterface DetailsSiderProps {\r\n  jiraUrl: string;\r\n  selectedDate: moment.Moment;\r\n  worklogs: WorklogModel[];\r\n  canEdit: boolean;\r\n  onWorklogDeleted: () => void;\r\n}\r\n\r\nconst DetailsSider: React.FC<DetailsSiderProps> = ({\r\n  jiraUrl,\r\n  selectedDate,\r\n  worklogs,\r\n  canEdit,\r\n  onWorklogDeleted\r\n}) => {\r\n  const totalLoggedTime = sumTotalLoggedTime(worklogs);\r\n\r\n  const handleDelete = (worklog: WorklogModel) => {\r\n    Modal.confirm({\r\n      title: `Do you want to remove worklog?`,\r\n      content: `Confirm removing worklog from issue ${\r\n        worklog.issueKey\r\n      } logged at ${moment(worklog.started).format(\r\n        \"lll\"\r\n      )}. Time that was logged: ${formatDuration(worklog.timeSpent)}`,\r\n      onOk: () => {\r\n        return deleteWorklog({\r\n          worklogId: worklog.id,\r\n          issueId: worklog.issueId\r\n        })\r\n          .then(onWorklogDeleted)\r\n          .catch(() => message.error(\"Could not delete worklog\"));\r\n      },\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className=\"details-sider\"\r\n      title={DetailsTitle({ date: selectedDate, totalLoggedTime })}\r\n    >\r\n      <List\r\n        header={\r\n          <div className=\"list__header\">\r\n            <b>Logged Issues:</b>\r\n          </div>\r\n        }\r\n        dataSource={worklogs}\r\n        renderItem={value => (\r\n          <List.Item>\r\n            <List.Item.Meta\r\n              title={\r\n                <div className=\"worklog-list__title\">\r\n                  <a\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    href={issueUrl(jiraUrl, value.issueKey)}\r\n                  >\r\n                    {value.issueKey}\r\n                  </a>\r\n                  {canEdit ? (\r\n                    <Button\r\n                      onClick={() => handleDelete(value)}\r\n                      icon=\"delete\"\r\n                      size=\"small\"\r\n                    />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              }\r\n              description={\r\n                <div className=\"issue__description\">\r\n                  <span>\r\n                    Started at: <b>{moment(value.started).format(\"lll\")}</b>\r\n                  </span>\r\n                  <span>\r\n                    Logged: <b>{formatDuration(value.timeSpent)}</b>\r\n                  </span>\r\n                </div>\r\n              }\r\n            />\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DetailsSider;\r\n","import { Worklog } from \"../../../models/Worklog\";\r\nimport { getDateInTimezone } from \"../../../utils/date\";\r\n\r\nexport interface WorklogModel {\r\n  id: string;\r\n  issueKey: string;\r\n  issueId: string;\r\n  timeSpent: number;\r\n  started: string;\r\n}\r\n\r\nexport type WorklogGroups = { [key: string]: WorklogModel[] };\r\n\r\nexport const DATE_FORMAT = \"YYYY-MM-DD\";\r\n\r\nconst mergeWorklogs = (group1: WorklogGroups, group2: WorklogGroups) => {\r\n  const result = Object.assign({}, group1);\r\n  return Object.keys(group2).reduce((previous, current) => {\r\n    const group2Value = group2[current];\r\n    const previousValue = previous[current] || [];\r\n    const mergedValue = [...previousValue, ...group2Value];\r\n    return { ...previous, [current]: mergedValue };\r\n  }, result);\r\n};\r\n\r\nexport const groupWorklogsByDates = (\r\n  worklogList: Worklog[],\r\n  userTimezone: string\r\n): WorklogGroups => {\r\n  if (!worklogList) {\r\n    return {};\r\n  }\r\n\r\n  return worklogList.reduce((groupedWorklogs, worklog) => {\r\n    const worklogs = worklog.worklogs.reduce(\r\n      (groupedWorklogEntries, worklogEntry) => {\r\n        const startDate = getDateInTimezone(\r\n          worklogEntry.started,\r\n          userTimezone\r\n        ).format(DATE_FORMAT);\r\n        const entries = groupedWorklogEntries[startDate] || [];\r\n        const newEntries = [\r\n          ...entries,\r\n          {\r\n            id: worklogEntry.id,\r\n            issueId: worklogEntry.issueId,\r\n            issueKey: worklog.issueKey,\r\n            timeSpent: worklogEntry.timeSpentSeconds,\r\n            started: worklogEntry.started\r\n          }\r\n        ];\r\n        return { ...groupedWorklogEntries, [startDate]: newEntries };\r\n      },\r\n      {} as WorklogGroups\r\n    );\r\n    return mergeWorklogs(groupedWorklogs, worklogs);\r\n  }, {});\r\n};\r\n","import React from \"react\";\r\nimport { DATE_FORMAT, WorklogGroups } from \"../utils/groupWorklogsByDates\";\r\nimport { Moment } from \"moment\";\r\nimport \"./DateCell.css\";\r\nimport { formatDuration } from \"../../../utils/duration\";\r\nimport { Typography } from \"antd\";\r\nimport { issueUrl } from \"../utils/issueUrl\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst FULL_WORKDAY = 8 * 3600;\r\n\r\nconst DateCellFactory = (worklogs: WorklogGroups, url: string) => (\r\n  value: Moment\r\n) => {\r\n  const key = value.format(DATE_FORMAT);\r\n  const worklogsToRender = worklogs[key];\r\n  const total =\r\n    worklogsToRender &&\r\n    worklogsToRender.reduce((sum, worklog) => sum + worklog.timeSpent, 0);\r\n  const fullDateLogged = total === FULL_WORKDAY;\r\n\r\n  return (\r\n    <div className=\"ant-fullcalendar-date\">\r\n      <div className=\"ant-fullcalendar-value callendar-cell__header\">\r\n        {worklogsToRender && (\r\n          <span className=\"callendar-cell__total-time\">\r\n            <Text type={fullDateLogged ? undefined : \"warning\"}>\r\n              Total: {formatDuration(total)}{\" \"}\r\n            </Text>\r\n          </span>\r\n        )}\r\n        <span className=\"callendar-cell__day\">{value.date()}</span>\r\n      </div>\r\n      <div className=\"ant-fullcalendar-content\">\r\n        {worklogsToRender && (\r\n          <div>\r\n            <ul className=\"worklogs\">\r\n              {worklogsToRender.map((worklog, index) => (\r\n                <li\r\n                  className=\"worklog-list-item\"\r\n                  key={`${worklog.issueKey}_${index}`}\r\n                >\r\n                  <a\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    href={issueUrl(url, worklog.issueKey)}\r\n                  >\r\n                    {worklog.issueKey}\r\n                  </a>\r\n                  <span>{formatDuration(worklog.timeSpent)}</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateCellFactory;\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Select, Spin } from \"antd\";\r\nimport \"./UserSearch.css\";\r\nimport debounce from \"lodash/debounce\";\r\nimport { User } from \"../../../models/User\";\r\nimport { searchUsers } from \"../../../api/users\";\r\n\r\nconst fetchUsers = (\r\n  setState: (searchState: { data: User[]; fetching: boolean }) => void\r\n) => (value: string) => {\r\n  setState({\r\n    data: [],\r\n    fetching: true\r\n  });\r\n  if (value) {\r\n    searchUsers(value)\r\n      .then(response => response.data)\r\n      .then(data => {\r\n        setState({\r\n          data,\r\n          fetching: false\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport interface UserSearchProps {\r\n  user: User;\r\n  onUserSelect: (user: User) => void;\r\n}\r\n\r\ninterface UserSearchState {\r\n  data: User[];\r\n  value: string | undefined;\r\n  fetching: boolean;\r\n}\r\n\r\nconst UserSearch: React.FC<UserSearchProps> = ({ user, onUserSelect }) => {\r\n  const [state, setState] = useState<UserSearchState>({\r\n    data: [],\r\n    value: user.displayName,\r\n    fetching: false\r\n  });\r\n\r\n  const onSearch = debounce(fetchUsers(setState as any), 800) as any;\r\n\r\n  const onChange = (userKey: string) => {\r\n    const user = state.data.find(\r\n      (userData: User) => userData.accountId === userKey\r\n    );\r\n    setState({ value: user && user.displayName, data: [], fetching: false });\r\n    if (user) {\r\n      onUserSelect(user);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"user__search\">\r\n      <Select\r\n        showSearch\r\n        style={{ width: \"100%\" }}\r\n        placeholder=\"Select user\"\r\n        value={state.value as any}\r\n        onSearch={onSearch}\r\n        onChange={onChange}\r\n        showArrow={false}\r\n        filterOption={false}\r\n        defaultActiveFirstOption={false}\r\n        notFoundContent={state.fetching ? <Spin size=\"small\" /> : null}\r\n      >\r\n        {(state.data as User[]).map(value => (\r\n          <Select.Option key={value.accountId}>\r\n            {value.displayName}\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserSearch;\r\n","import moment, { Moment } from \"moment\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Button, Calendar, Icon, Spin, Statistic } from \"antd\";\r\nimport { WorklogGroups } from \"../utils/groupWorklogsByDates\";\r\nimport DateCellFactory from \"./DateCell\";\r\nimport { formatDuration } from \"../../../utils/duration\";\r\nimport \"./WorklogCalendar.css\";\r\nimport UserSearch from \"../UserSearch/UserSearch\";\r\nimport { User } from \"../../../models/User\";\r\n\r\ninterface WorklogCalendarProps {\r\n  url: string;\r\n  isFetchingWorklogs: boolean;\r\n  userWorklogs: User;\r\n  worklogs: WorklogGroups;\r\n  selectedDate: moment.Moment;\r\n  totalLoggedTime: number;\r\n  onAddWorklogClick: () => void;\r\n  onViewChanged: (selectedDate: moment.Moment, user: User) => void;\r\n  onRefresh: () => void;\r\n}\r\n\r\nconst WorklogCalendar: React.FC<WorklogCalendarProps> = ({\r\n  url,\r\n  onViewChanged,\r\n  onRefresh,\r\n  isFetchingWorklogs,\r\n  worklogs,\r\n  selectedDate,\r\n  totalLoggedTime,\r\n  userWorklogs,\r\n  onAddWorklogClick\r\n}) => {\r\n  useEffect(() => {\r\n    window.addEventListener(\"keyup\", keydown);\r\n    return () => {\r\n      window.removeEventListener(\"keyup\", keydown);\r\n    };\r\n  });\r\n\r\n  const dateChanged = (value: Moment | undefined) => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    onViewChanged(value, userWorklogs);\r\n  };\r\n\r\n  const userSelected = (user: User) => {\r\n    if (user.accountId !== userWorklogs.accountId) {\r\n      onViewChanged(selectedDate, user);\r\n    }\r\n  };\r\n\r\n  const forward = () => {\r\n    const nextMonth = selectedDate.clone().add(1, \"month\");\r\n    dateChanged(nextMonth);\r\n  };\r\n\r\n  const backward = () => {\r\n    const previousMonth = selectedDate.clone().subtract(1, \"month\");\r\n    dateChanged(previousMonth);\r\n  };\r\n\r\n  const keydown = ({ key }: { key: string }) => {\r\n    if (key === \"r\") {\r\n      onRefresh();\r\n    }\r\n  };\r\n\r\n  const dateCellRenderer = DateCellFactory(worklogs, url);\r\n\r\n  return (\r\n    <Spin spinning={isFetchingWorklogs}>\r\n      <div className=\"worklog-calendar__header\">\r\n        <div className=\"worklog-calendar__total-summary\">\r\n          <Statistic\r\n            title=\"Total logged:\"\r\n            value={formatDuration(totalLoggedTime)}\r\n          />\r\n        </div>\r\n        <Button\r\n          type=\"primary\"\r\n          icon=\"plus-circle\"\r\n          className=\"worklog-calendar__button-add\"\r\n          onClick={onAddWorklogClick}\r\n        >\r\n          Add\r\n        </Button>\r\n        <div className=\"worklog-calendar__user\">\r\n          <UserSearch user={userWorklogs} onUserSelect={userSelected} />\r\n        </div>\r\n        <Button.Group>\r\n          <Button type=\"primary\" onClick={backward}>\r\n            <Icon type=\"left\" />\r\n            Backward\r\n          </Button>\r\n          <Button type=\"primary\" onClick={onRefresh}>\r\n            <Icon type=\"sync\" />\r\n            Refresh(R)\r\n          </Button>\r\n          <Button type=\"primary\" onClick={forward}>\r\n            Forward\r\n            <Icon type=\"right\" />\r\n          </Button>\r\n        </Button.Group>\r\n      </div>\r\n      <Calendar\r\n        value={selectedDate}\r\n        onChange={dateChanged}\r\n        dateFullCellRender={dateCellRenderer}\r\n      />\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default WorklogCalendar;\r\n","import { message } from \"antd\";\r\nimport { isNil } from \"lodash\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getUser } from \"../../api/users\";\r\nimport { getWorklogsDispatch } from \"../../dispatchers/worklogs\";\r\nimport { User } from \"../../models/User\";\r\nimport { RootState } from \"../../reducer\";\r\nimport { getDateSpan } from \"../../utils/date\";\r\nimport { useQuery } from \"../../utils/hooks\";\r\nimport AddWorklogFormModal from \"./AddWorklogFormModal/AddWorklogFormModal\";\r\nimport DetailsSider from \"./DetailsSider/DetailsSider\";\r\nimport \"./Home.css\";\r\nimport { getWorklogForDate } from \"./utils/getWorklogForDate\";\r\nimport { groupWorklogsByDates } from \"./utils/groupWorklogsByDates\";\r\nimport { sumTotalLoggedTime } from \"./utils/sumTotalLoggedTime\";\r\nimport WorklogCalendar from \"./WorklogCalendar/WorklogCalendar\";\r\n\r\nconst getInitialDate = ({\r\n  month,\r\n  year,\r\n  day\r\n}: {\r\n  month: string | number | null;\r\n  year: string | number | null;\r\n  day: string | number | null;\r\n}) => {\r\n  if (!isNil(month) && !isNil(year) && !isNil(day)) {\r\n    return moment([year, month, day]);\r\n  }\r\n  return moment();\r\n};\r\n\r\nconst Home: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchWorklogs = (from: Date, to: Date, user: User) => {\r\n    getWorklogsDispatch({ from, to, user: user })(dispatch);\r\n  };\r\n\r\n  const history = useHistory();\r\n  const query = useQuery();\r\n\r\n  const isFetchingWorklogs = useSelector(\r\n    (state: RootState) => state.worklogs.isFetchingWorklogs\r\n  );\r\n\r\n  const appUser = useSelector(\r\n    (state: RootState) => state.appState.user\r\n  ) as User;\r\n\r\n  const url = useSelector((state: RootState) => state.appState.url) || \"\";\r\n\r\n  const userTimezone = useSelector((state: RootState) => {\r\n    const user = state.appState.user;\r\n    return user && user.timeZone;\r\n  }) as string;\r\n\r\n  const errorWhileFetchingWorklogs = useSelector(\r\n    (state: RootState) => state.worklogs.error\r\n  );\r\n\r\n  const { worklogs, month, year, day, user } = useSelector(\r\n    (state: RootState) => state.worklogs\r\n  );\r\n\r\n  const worklogsByDate = groupWorklogsByDates(worklogs, userTimezone);\r\n  const totalLoggedTime = sumTotalLoggedTime(worklogs);\r\n\r\n  const [selectedDate, setSelectedDate] = useState(\r\n    getInitialDate({ month, year, day })\r\n  );\r\n\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n\r\n  const setQueryParams = (keys: { [key: string]: string | number }) => {\r\n    const urlParams = new URLSearchParams();\r\n    Object.entries(keys).forEach(([key, value]) =>\r\n      urlParams.set(key, value.toString())\r\n    );\r\n    history.push(`?${urlParams.toString()}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorWhileFetchingWorklogs) {\r\n      message.error(\"Could not fetch worklogs. Please try again.\");\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { from, to } = getDateSpan(\r\n      getInitialDate({\r\n        year: query.get(\"year\"),\r\n        month: query.get(\"month\"),\r\n        day: query.get(\"day\")\r\n      })\r\n    );\r\n    const accountId = query.get(\"user\");\r\n    if (accountId) {\r\n      getUser(accountId as string)\r\n        .then(({ data }) => {\r\n          fetchWorklogs(from, to, data);\r\n        })\r\n        .catch(() => {\r\n          message.error(`Could not fetch user with accountID: ${accountId}`);\r\n        });\r\n    } else {\r\n      fetchWorklogs(from, to, appUser);\r\n    }\r\n  }, []);\r\n\r\n  const onViewChanged = (date: moment.Moment, changedUser: User) => {\r\n    setSelectedDate(date);\r\n    const changedYear = date.year();\r\n    const changedMonth = date.month();\r\n    const changedDay = date.date();\r\n    setQueryParams({\r\n      year: changedYear,\r\n      month: changedMonth,\r\n      day: changedDay,\r\n      user: changedUser.accountId\r\n    });\r\n\r\n    if (\r\n      changedMonth !== month ||\r\n      changedYear !== year ||\r\n      (user && user.accountId) !== changedUser.accountId\r\n    ) {\r\n      const { from, to } = getDateSpan(moment([changedYear, changedMonth]));\r\n\r\n      fetchWorklogs(from, to, changedUser);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    if (user) {\r\n      const { from, to } = getDateSpan(selectedDate);\r\n      fetchWorklogs(from, to, user);\r\n    }\r\n  };\r\n\r\n  const handleShowModal = () => {\r\n    setModalVisible(true);\r\n  };\r\n\r\n  const handleHideModal = () => {\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const handleAdded = () => {\r\n    handleRefresh();\r\n    handleHideModal();\r\n  };\r\n\r\n  const initialized = () => !isNil(user) && !isNil(month) && !isNil(year);\r\n  const worklogForSelectedDate = getWorklogForDate(\r\n    worklogsByDate,\r\n    selectedDate\r\n  );\r\n\r\n  const canEdit = () => {\r\n    return (user && user.accountId) === appUser.accountId;\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      {initialized() ? (\r\n        <>\r\n          <div className=\"home__container\">\r\n            <div className=\"home__content\">\r\n              <WorklogCalendar\r\n                url={url}\r\n                userWorklogs={user as User}\r\n                isFetchingWorklogs={isFetchingWorklogs}\r\n                selectedDate={selectedDate}\r\n                onViewChanged={onViewChanged}\r\n                onAddWorklogClick={handleShowModal}\r\n                onRefresh={handleRefresh}\r\n                worklogs={worklogsByDate}\r\n                totalLoggedTime={totalLoggedTime}\r\n              />\r\n            </div>\r\n            <div className=\"home__sider\">\r\n              <DetailsSider\r\n                jiraUrl={url}\r\n                selectedDate={selectedDate}\r\n                worklogs={worklogForSelectedDate}\r\n                canEdit={canEdit()}\r\n                onWorklogDeleted={handleRefresh}\r\n              />\r\n            </div>\r\n          </div>\r\n          <AddWorklogFormModal\r\n            selectedDate={selectedDate}\r\n            modalVisible={modalVisible}\r\n            onHideModal={handleHideModal}\r\n            onAdded={handleAdded}\r\n          />\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Dispatch } from \"redux\";\r\nimport {\r\n  errorLoadingWorklogsAction,\r\n  loadedWorklogsAction,\r\n  loadWorklogsAction\r\n} from \"../pages/Home/worklogActions\";\r\nimport { getWorklogs, GetWorklogsParams } from \"../api/worklogs\";\r\n\r\nexport const getWorklogsDispatch = (params: GetWorklogsParams) => {\r\n  return (dispatch: Dispatch) => {\r\n    const month = params.from.getMonth();\r\n    const year = params.from.getFullYear();\r\n    dispatch(\r\n      loadWorklogsAction({\r\n        user: params.user,\r\n        month,\r\n        year\r\n      })\r\n    );\r\n    getWorklogs(params)\r\n      .then(worklogsResponse => {\r\n        dispatch(loadedWorklogsAction(worklogsResponse.data));\r\n      })\r\n      .catch(() => {\r\n        dispatch(errorLoadingWorklogsAction());\r\n      });\r\n  };\r\n};\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nexport function useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n","import { DATE_FORMAT, WorklogGroups } from \"./groupWorklogsByDates\";\r\nimport moment from \"moment\";\r\n\r\nexport const getWorklogForDate = (\r\n  worklogGroups: WorklogGroups,\r\n  date: moment.Moment\r\n) => {\r\n  const key = date.format(DATE_FORMAT);\r\n  return worklogGroups[key] || [];\r\n};\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { User } from \"../../../models/User\";\r\nimport { Icon, Menu } from \"antd\";\r\nimport SubMenu from \"antd/es/menu/SubMenu\";\r\nimport \"./UserInfo.css\";\r\n\r\ninterface Props {\r\n  user: User;\r\n  onLogout: () => void;\r\n}\r\n\r\nconst UserInfo: React.FC<PropsWithChildren<Props>> = ({\r\n  user,\r\n  onLogout,\r\n  children\r\n}) => {\r\n  return (\r\n    <Menu\r\n      theme=\"dark\"\r\n      mode=\"horizontal\"\r\n      className=\"user-info__menu\"\r\n      selectable={false}\r\n    >\r\n      <SubMenu\r\n        title={\r\n          <span>\r\n            <Icon type=\"user\" />\r\n            {user.displayName}\r\n          </span>\r\n        }\r\n      >\r\n        <Menu.Item disabled={true}>\r\n          <img\r\n            alt=\"avatar\"\r\n            src={user.avatarUrls[\"32x32\"]}\r\n            className=\"user-info__avatar\"\r\n          />\r\n          {user.emailAddress}\r\n        </Menu.Item>\r\n        <Menu.Item disabled={true}>Timezone: {user.timeZone}</Menu.Item>\r\n        <Menu.Item onClick={onLogout}>\r\n          <Icon type=\"logout\" />\r\n          Logout\r\n        </Menu.Item>\r\n      </SubMenu>\r\n      {children && (\r\n        <Menu.Item className=\"user-info__extras\">{children}</Menu.Item>\r\n      )}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport { Icon, Layout } from \"antd\";\r\nimport \"./MainLayout.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducer\";\r\nimport UserInfo from \"../../pages/Home/UserInfo/UserInfo\";\r\nimport { User } from \"../../models/User\";\r\nimport { logoutDispatch } from \"../../dispatchers/authenticate\";\r\n\r\nconst { Header, Content } = Layout;\r\n// @ts-ignore\r\nconst MainLayout = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => dispatch(logoutDispatch());\r\n  const user = useSelector((state: RootState) => state.appState.user) as User;\r\n\r\n  return (\r\n    <Layout className=\"main-layout\">\r\n      <Header className=\"main-layout__header\">\r\n        <UserInfo user={user} onLogout={onLogout}>\r\n          <a\r\n            href=\"https://github.com/iczajkow/jira-web-timesheet\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <Icon type=\"github\" style={{ fontSize: \"24px\" }} />\r\n          </a>\r\n        </UserInfo>\r\n      </Header>\r\n      <Content className=\"main-layout__content\">{children}</Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport MainLayout from \"./components/MainLayout/MainLayout\";\r\n\r\n// @ts-ignore\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        isAuthenticated ? (\r\n          <MainLayout>{children}</MainLayout>\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from \"./pages/Login/Login\";\r\nimport Home from \"./pages/Home/Home\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nconst Routes: React.FC = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <PrivateRoute path=\"/dashboard\">\r\n        <Home />\r\n      </PrivateRoute>\r\n      <Route path=\"*\">\r\n        <Redirect to={{ pathname: \"dashboard\" }} />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import { connect } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport React from \"react\";\r\nimport { checkAuthenticateDispatch } from \"./dispatchers/authenticate\";\r\nimport Routes from \"./Routes\";\r\n\r\ninterface Props {\r\n  checkAuthenticationConnect: () => void;\r\n  isAuthenticated: boolean | null;\r\n}\r\n\r\nconst AppEntry: React.FC<Props> = ({\r\n  checkAuthenticationConnect,\r\n  isAuthenticated\r\n}) => {\r\n  React.useEffect(() => {\r\n    checkAuthenticationConnect();\r\n  }, []);\r\n  return isAuthenticated != null ? <Routes /> : null;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  isAuthenticated: state.appState.isAuthenticated\r\n});\r\nconst mapDispatchToProps = {\r\n  checkAuthenticationConnect: checkAuthenticateDispatch\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppEntry as any);\r\n","import axios from \"axios\";\r\nimport { EnhancedStore } from \"@reduxjs/toolkit\";\r\nimport { clearUserAction } from \"../appActions\";\r\n\r\nconst interceptors = ({ dispatch }: EnhancedStore) => {\r\n  axios.interceptors.response.use(undefined, (error: any) => {\r\n    if (error.response.status === 401) {\r\n      dispatch(clearUserAction());\r\n    }\r\n    return Promise.reject(error);\r\n  });\r\n};\r\n\r\nexport default interceptors;\r\n","import React from \"react\";\r\nimport { Button, notification } from \"antd\";\r\n\r\nconst openNotification = () => {\r\n  const key = `open${Date.now()}`;\r\n  const btn = (\r\n    <Button type=\"primary\" href={`https://${process.env.REACT_APP_DOMAIN}`}>\r\n      Open HTTPs version\r\n    </Button>\r\n  );\r\n  notification.open({\r\n    message: \"Your connection is not private!\",\r\n    description:\r\n      \"You are using unsecured version of this website. To open secured version click button below.\",\r\n    btn,\r\n    key,\r\n    duration: 0\r\n  });\r\n};\r\n\r\nconst securityNotification = () => {\r\n  const isHttps = window.location.protocol === \"https:\";\r\n  if (!isHttps) {\r\n    openNotification();\r\n  }\r\n};\r\n\r\nexport default securityNotification;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { rootReducer } from \"./reducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppEntry from \"./AppEntry\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport \"moment/locale/en-gb\";\r\nimport en_GB from \"antd/lib/locale-provider/en_GB\";\r\nimport interceptors from \"./api/interceptors\";\r\nimport securityNotification from \"./utils/security-notification\";\r\n\r\nconst store = configureStore({ reducer: rootReducer });\r\n\r\ninterceptors(store);\r\n\r\nconst App: React.FC = () => {\r\n  securityNotification();\r\n  return (\r\n    <ConfigProvider locale={en_GB}>\r\n      <Provider store={store}>\r\n        <AppEntry />\r\n      </Provider>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}