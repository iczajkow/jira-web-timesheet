{"version":3,"sources":["appActions.ts","appReducer.ts","pages/Login/loginActions.ts","pages/Login/loginReducer.ts","pages/Home/worklogActions.ts","pages/Home/worklogReducer.ts","reducer.ts","api/users.ts","dispatchers/authenticate.ts","pages/Login/LoginForm/LoginForm.tsx","pages/Login/Login.tsx","api/worklogs.ts","services/holidaysCache.ts","dispatchers/worklogs.ts","api/holidays.ts","utils/date.ts","api/issues.ts","pages/Home/IssueSearch/IssueSearch.tsx","pages/Home/AddWorklogForm/AddWorklogForm.tsx","utils/duration.ts","pages/Home/AddWorklogFormModal/AddWorklogFormModal.tsx","pages/Home/AddWorklogFormModal/initialDurationValue.ts","utils/constants.ts","pages/Home/DetailsSider/DetailsTitle.tsx","pages/Home/utils/sumTotalLoggedTime.ts","pages/Home/utils/issueUrl.ts","pages/Home/DetailsSider/DetailsSider.tsx","pages/Home/utils/groupWorklogsByDates.ts","pages/Home/WorklogCalendar/utils.ts","pages/Home/WorklogCalendar/DateCell.tsx","pages/Home/UserSearch/UserSearch.tsx","pages/Home/WorklogCalendar/WorklogCalendar.tsx","pages/Home/Home.tsx","utils/hooks.ts","pages/Home/utils/getWorklogForDate.ts","pages/Home/UserInfo/UserInfo.tsx","components/MainLayout/MainLayout.tsx","PrivateRoute.tsx","Routes.tsx","AppEntry.tsx","api/interceptors.ts","App.tsx","index.tsx"],"names":["AppActionTypes","setUserAction","payload","type","SetUser","setAuthenticatedAction","createAction","SetAuthenticated","logoutAction","Logout","clearUserAction","ClearUser","LoginActionTypes","defaultState","url","user","isAuthenticated","undefined","appReducer","createReducer","state","action","loginAction","Login","loginSuccess","LoginSuccess","setError","SetError","WorklogActionTypes","loginReducer","isLoggingIn","error","loadWorklogsAction","LoadWorklogs","loadedWorklogsAction","LoadedWorklogs","errorLoadingWorklogsAction","ErrorLoadingWorklogs","loadedHolidaysAction","LoadedHolidays","worklogReducer","isFetchingWorklogs","month","year","day","worklogs","holidays","rootReducer","combineReducers","appState","login","current","axios","get","authenticateDispatch","request","dispatch","post","authenticate","then","userResponse","data","catch","response","status","logoutDispatch","Text","Typography","WrappedLoginForm","Form","create","name","onSubmit","loginError","form","getFieldDecorator","event","preventDefault","validateFields","values","Item","rules","required","message","placeholder","prefix","suffix","title","addonBefore","content","className","href","target","rel","valuePropName","initialValue","loading","htmlType","useDispatch","useSelector","to","pathname","style","height","Content","padding","md","span","offset","xl","loginRequest","getWorklogs","from","formattedDate","moment","format","formatDates","accountId","holidayCache","storage","key","stringifiedKey","this","stringifyKey","storedHolidays","readStorage","setItem","JSON","stringify","country","stringifiedResult","getItem","parse","localStorage","getWorklogsDispatch","params","getMonth","getFullYear","cached","isNil","Promise","resolve","stringParams","mapValues","value","toString","queryParams","URLSearchParams","save","getHolidays","worklogsResponse","getDateSpan","startOf","toDate","endOf","issues","query","IssueSearch","props","fetching","fetchId","fetchIssues","setState","currentFetchId","result","handleChange","issueId","issue","find","Number","id","summaryText","onChange","debounce","showSearch","width","onSearch","showArrow","filterOption","defaultActiveFirstOption","notFoundContent","size","map","Option","React","Component","formItemLayout","labelCol","xs","sm","wrapperCol","AddWorklogForm","initialDate","initialHours","initialMinutes","validationPassed","useEffect","resetFields","label","clone","hour","minute","second","showTime","min","max","formatSecondsAsDuration","seconds","formatDuration","toSimpleDuration","minutes","hours","stringMinutes","Math","floor","WrappedAddWorklogFormModal","selectedDate","modalVisible","timeLoggedForSelectedDate","onHideModal","onAdded","useState","pending","setPending","setValidationPassed","validateTimeSpent","getFieldValue","leftTimeToLog","getInitialDurationValue","visible","confirmLoading","onCancel","onOk","err","started","timeSpent","formToWorklogRequest","getFieldsValue","worklog","DetailsTitle","date","totalLoggedTime","sumTotalLoggedTime","isWorklogs","sumForWorklog","sumForWorklogModels","reduce","sum","subSum","worklogItem","timeSpentSeconds","firstItem","Array","issueUrl","issueKey","DetailsSider","jiraUrl","canEdit","onWorklogDeleted","handleDelete","Modal","confirm","worklogId","delete","deleteWorklog","header","dataSource","renderItem","Meta","onClick","icon","description","groupWorklogsByDates","worklogList","userTimezone","groupedWorklogs","group1","group2","Object","assign","keys","previous","group2Value","previousValue","mergedValue","mergeWorklogs","groupedWorklogEntries","worklogEntry","startDate","tz","getDateInTimezone","entries","newEntries","getHolidayNameByLang","lang","holiday","text","DateCellFactory","getHoliday","worklogsToRender","total","fullDateLogged","classesToApply","isoWeekday","isSaturday","join","getDateClassName","getDefaultName","getFallbackName","getHolidayName","index","fetchUsers","UserSearch","onUserSelect","displayName","userKey","userData","WorklogCalendar","userWorklogs","onAddWorklogClick","onViewChanged","onRefresh","dateChanged","dateCellRenderer","monthNumber","spinning","Group","previousMonth","subtract","nextMonth","add","dateFullCellRender","getInitialDate","Home","fetchWorklogs","history","useHistory","useLocation","search","appUser","timeZone","errorWhileFetchingWorklogs","worklogsByDate","setSelectedDate","setModalVisible","encodedUrlParams","encodeURIComponent","getUser","handleRefresh","handleHideModal","worklogForSelectedDate","changedUser","changedYear","changedMonth","urlParams","forEach","set","push","setQueryParams","UserInfo","onLogout","children","theme","mode","selectable","SubMenu","disabled","alt","src","avatarUrls","emailAddress","Header","Layout","MainLayout","fontSize","PrivateRoute","rest","render","location","Routes","path","mapDispatchToProps","checkAuthenticationConnect","connect","interceptors","use","reject","store","configureStore","reducer","App","locale","en_GB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.72d2b68d.chunk.js","sourcesContent":["import { AnyAction, createAction, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { User, UserWithUrl } from \"./models/User\";\r\n\r\nexport enum AppActionTypes {\r\n  SetUser = \"APP_SET_USER\",\r\n  ClearUser = \"APP_CLEAR_USER\",\r\n  SetAuthenticated = \"APP_SET_AUTHENTICATED\",\r\n  Logout = \"APP_LOGOUT\"\r\n}\r\n\r\nexport interface SetUserAction extends PayloadAction<UserWithUrl> {\r\n  type: AppActionTypes.SetUser;\r\n  payload: { user: User; url: string };\r\n}\r\n\r\nexport interface ClearUserAction extends AnyAction {\r\n  type: AppActionTypes.ClearUser;\r\n}\r\n\r\nexport interface LogoutAction extends AnyAction {\r\n  type: AppActionTypes.Logout;\r\n}\r\n\r\nexport type AppActions = SetUserAction | ClearUserAction | LogoutAction;\r\n\r\nexport const setUserAction = (payload: {\r\n  user: User;\r\n  url: string;\r\n}): SetUserAction => ({\r\n  type: AppActionTypes.SetUser,\r\n  payload\r\n});\r\n\r\nexport const setAuthenticatedAction = createAction<boolean>(\r\n  AppActionTypes.SetAuthenticated\r\n);\r\n\r\nexport const logoutAction = createAction(AppActionTypes.Logout);\r\n\r\nexport const clearUserAction = createAction(AppActionTypes.ClearUser);\r\n","import { User } from \"./models/User\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { AppActionTypes } from \"./appActions\";\r\n\r\nexport interface AppState {\r\n  url: string | null;\r\n  user: User | null;\r\n  isAuthenticated: boolean | undefined;\r\n}\r\n\r\nconst defaultState: AppState = {\r\n  url: null,\r\n  user: null,\r\n  isAuthenticated: undefined\r\n};\r\n\r\nexport const appReducer = createReducer(defaultState, {\r\n  [AppActionTypes.SetUser]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    url: action.payload.url\r\n  }),\r\n  [AppActionTypes.ClearUser]: state => ({\r\n    ...state,\r\n    user: null,\r\n    isAuthenticated: false\r\n  }),\r\n  [AppActionTypes.SetAuthenticated]: (state, action) => ({\r\n    ...state,\r\n    isAuthenticated: action.payload\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport enum LoginActionTypes {\r\n  Login = \"LOGIN_LOGIN\",\r\n  LoginSuccess = \"LOGIN_SUCCESS\",\r\n  SetError = \"LOGIN_SET_ERROR\"\r\n}\r\n\r\nexport const loginAction = createAction<void>(LoginActionTypes.Login);\r\nexport const loginSuccess = createAction<void>(LoginActionTypes.LoginSuccess);\r\nexport const setError = createAction<any>(LoginActionTypes.SetError);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { LoginActionTypes } from \"./loginActions\";\r\n\r\nexport interface LoginState {\r\n  isLoggingIn: boolean;\r\n  error: number | null;\r\n}\r\n\r\nexport const defaultState: LoginState = {\r\n  isLoggingIn: false,\r\n  error: null\r\n};\r\n\r\nexport const loginReducer = createReducer(defaultState, {\r\n  [LoginActionTypes.Login]: state => ({\r\n    ...state,\r\n    isLoggingIn: true\r\n  }),\r\n  [LoginActionTypes.LoginSuccess]: state => ({\r\n    ...state,\r\n    isLoggingIn: false\r\n  }),\r\n  [LoginActionTypes.SetError]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isLoggingIn: false\r\n  })\r\n});\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { Holiday } from \"../../models/Holiday\";\r\nimport { User } from \"../../models/User\";\r\n\r\nexport enum WorklogActionTypes {\r\n  LoadWorklogs = \"WORKLOGS_LOAD\",\r\n  LoadedWorklogs = \"WORKLOGS_LOADED\",\r\n  LoadedHolidays = \"WORKLOG_HOLIDAYS_LOADED\",\r\n  ErrorLoadingWorklogs = \"WORKLOGS_ERROR\",\r\n}\r\n\r\nexport interface LoadWorklogsPayload {\r\n  user: User;\r\n  month: number;\r\n  year: number;\r\n}\r\n\r\nexport interface LoadedHolidaysPayload {\r\n  holidays: Holiday[];\r\n}\r\n\r\nexport const loadWorklogsAction = createAction<LoadWorklogsPayload>(WorklogActionTypes.LoadWorklogs);\r\n\r\nexport const loadedWorklogsAction = createAction<any>(WorklogActionTypes.LoadedWorklogs);\r\n\r\nexport const errorLoadingWorklogsAction = createAction<any>(WorklogActionTypes.ErrorLoadingWorklogs);\r\n\r\nexport const loadedHolidaysAction = createAction<LoadedHolidaysPayload>(WorklogActionTypes.LoadedHolidays);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { WorklogActionTypes } from \"./worklogActions\";\r\nimport { User } from \"../../models/User\";\r\nimport { Holiday } from \"../../models/Holiday\";\r\n\r\nexport interface WorklogState {\r\n  isFetchingWorklogs: boolean;\r\n  user: User | null;\r\n  month: number | null;\r\n  year: number | null;\r\n  day: number | null;\r\n  worklogs: any;\r\n  holidays: Holiday[];\r\n  error: any;\r\n}\r\n\r\nexport const defaultState: WorklogState = {\r\n  isFetchingWorklogs: false,\r\n  month: null,\r\n  year: null,\r\n  day: null,\r\n  user: null,\r\n  worklogs: null,\r\n  holidays: [],\r\n  error: null\r\n};\r\n\r\nexport const worklogReducer = createReducer(defaultState, {\r\n  [WorklogActionTypes.LoadWorklogs]: (state, action) => ({\r\n    ...state,\r\n    user: action.payload.user,\r\n    month: action.payload.month,\r\n    year: action.payload.year,\r\n    day: action.payload.day,\r\n    isFetchingWorklogs: true,\r\n    error: null\r\n  }),\r\n  [WorklogActionTypes.LoadedWorklogs]: (state, action) => ({\r\n    ...state,\r\n    worklogs: action.payload,\r\n    isFetchingWorklogs: false\r\n  }),\r\n  [WorklogActionTypes.ErrorLoadingWorklogs]: (state, action) => ({\r\n    ...state,\r\n    error: action.payload,\r\n    isFetchingWorklogs: false\r\n  }),\r\n  [WorklogActionTypes.LoadedHolidays]: (state, action) => ({\r\n    ...state,\r\n    holidays: action.payload.holidays\r\n  })\r\n});\r\n","import { appReducer, AppState } from \"./appReducer\";\r\nimport { combineReducers } from \"redux\";\r\nimport { loginReducer, LoginState } from \"./pages/Login/loginReducer\";\r\nimport { worklogReducer, WorklogState } from \"./pages/Home/worklogReducer\";\r\n\r\nexport interface RootState {\r\n  appState: AppState;\r\n  login: LoginState;\r\n  worklogs: WorklogState;\r\n}\r\n\r\nexport const rootReducer = combineReducers({\r\n  appState: appReducer,\r\n  login: loginReducer,\r\n  worklogs: worklogReducer\r\n});\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { User, UserWithUrl } from \"../models/User\";\r\n\r\nexport interface AuthenticateRequest {\r\n  email: string;\r\n  url: string;\r\n  apiToken: string;\r\n  rememberMe: boolean;\r\n}\r\n\r\nexport const authenticate = (request: AuthenticateRequest) =>\r\n  axios.post(\"/api/users/authenticate\", request);\r\n\r\nexport const current = () => axios.get<UserWithUrl>(\"/api/users/current\");\r\n\r\nexport const logout = () => axios.post(\"api/users/logout\");\r\n\r\nexport const searchUsers = (name: string): Promise<AxiosResponse<User[]>> => {\r\n  return axios.get(\"/api/users/search\", { params: { query: name } });\r\n};\r\n\r\nexport const getUser = (accountId: string): Promise<AxiosResponse<User>> => {\r\n  const encodedUrlParams = encodeURIComponent(accountId);\r\n  return axios.get(`/api/users/${encodedUrlParams}`);\r\n};\r\n","import { Dispatch } from \"react\";\r\nimport {\r\n  loginAction,\r\n  loginSuccess,\r\n  setError\r\n} from \"../pages/Login/loginActions\";\r\nimport { AxiosError, AxiosResponse } from \"axios\";\r\nimport { UserWithUrl } from \"../models/User\";\r\nimport {\r\n  clearUserAction,\r\n  logoutAction,\r\n  setAuthenticatedAction,\r\n  setUserAction\r\n} from \"../appActions\";\r\nimport {\r\n  authenticate,\r\n  AuthenticateRequest,\r\n  current,\r\n  logout\r\n} from \"../api/users\";\r\n\r\nexport const authenticateDispatch = (request: AuthenticateRequest) => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(loginAction());\r\n    authenticate(request)\r\n      .then(() => {\r\n        dispatch(loginSuccess());\r\n        return current();\r\n      })\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch((error: AxiosError) => {\r\n        dispatch(setError(error.response && error.response.status));\r\n      });\r\n  };\r\n};\r\n\r\nexport const checkAuthenticateDispatch = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    current()\r\n      .then((userResponse: AxiosResponse<UserWithUrl>) => {\r\n        dispatch(setUserAction(userResponse.data));\r\n        dispatch(setAuthenticatedAction(true));\r\n      })\r\n      .catch(() => {\r\n        dispatch(setAuthenticatedAction(false));\r\n      });\r\n  };\r\n};\r\n\r\nexport const logoutDispatch = () => {\r\n  return (dispatch: Dispatch<any>) => {\r\n    dispatch(logoutAction());\r\n    logout().then(() => dispatch(clearUserAction()));\r\n  };\r\n};\r\n","import React, { FormEvent } from \"react\";\r\nimport \"./LoginForm.css\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Form,\r\n  Icon,\r\n  Input,\r\n  Popover,\r\n  Tooltip,\r\n  Typography\r\n} from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { WrappedFormUtils } from \"antd/lib/form/Form\";\r\nimport { AuthenticateRequest } from \"../../../api/users\";\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface Props {\r\n  onSubmit: (request: AuthenticateRequest) => void;\r\n  isLoggingIn?: boolean;\r\n  loginError?: any;\r\n  form?: WrappedFormUtils;\r\n}\r\n\r\nconst LoginForm: React.FunctionComponent<Props & FormComponentProps> = ({\r\n  onSubmit,\r\n  isLoggingIn,\r\n  loginError,\r\n  form\r\n}) => {\r\n  const onFormSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    form.validateFields((error: any, values: AuthenticateRequest) => {\r\n      if (!error) {\r\n        onSubmit(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  const { getFieldDecorator } = form;\r\n\r\n  return (\r\n    <Form onSubmit={onFormSubmit}>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"email\", {\r\n          rules: [{ required: true, message: \"Please input your email\" }]\r\n        })(\r\n          <Input\r\n            placeholder=\"Email\"\r\n            prefix={<Icon type=\"user\"></Icon>}\r\n            suffix={\r\n              <Tooltip title=\"Please input your jira account email\">\r\n                <Icon type=\"info-circle\" />\r\n              </Tooltip>\r\n            }\r\n          />\r\n        )}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"url\", {\r\n          rules: [{ required: true, message: \"Please input URL\" }]\r\n        })(\r\n          <Input\r\n            addonBefore=\"https://\"\r\n            placeholder=\"URL\"\r\n            suffix={\r\n              <Tooltip title=\"Please enter your jira instance url - ex. www.atlassian.com\">\r\n                <Icon type=\"info-circle\" />\r\n              </Tooltip>\r\n            }\r\n          />\r\n        )}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"apiToken\", {\r\n          rules: [{ required: true, message: \"Please input token\" }]\r\n        })(\r\n          <Input\r\n            placeholder=\"API Token\"\r\n            suffix={\r\n              <Popover\r\n                content={\r\n                  <span>\r\n                    To generate API token for this app go to\r\n                    <a\r\n                      className=\"jira-link\"\r\n                      href=\"https://id.atlassian.com/manage-profile/security/api-tokens\"\r\n                      target=\"_blank\"\r\n                      rel=\"noopener noreferrer\"\r\n                    >\r\n                      https://id.atlassian.com/manage-profile/security/api-tokens\r\n                    </a>\r\n                  </span>\r\n                }\r\n              >\r\n                <Icon type=\"info-circle\" />\r\n              </Popover>\r\n            }\r\n          />\r\n        )}\r\n      </Form.Item>\r\n      <Form.Item>\r\n        {getFieldDecorator(\"rememberMe\", {\r\n          valuePropName: \"checked\",\r\n          initialValue: true\r\n        })(<Checkbox>Remember me</Checkbox>)}\r\n      </Form.Item>\r\n      <Button\r\n        loading={isLoggingIn}\r\n        type=\"primary\"\r\n        htmlType=\"submit\"\r\n        className=\"login-form__button\"\r\n      >\r\n        Log in\r\n      </Button>\r\n      {loginError && (\r\n        <div className=\"login-form__error\">\r\n          <Text type=\"danger\">Incorrect login data</Text>\r\n        </div>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst WrappedLoginForm = Form.create<Props & FormComponentProps>({\r\n  name: \"login\"\r\n})(LoginForm);\r\n\r\nexport default WrappedLoginForm;\r\n","import React from \"react\";\r\nimport LoginForm from \"./LoginForm/LoginForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authenticateDispatch } from \"../../dispatchers/authenticate\";\r\nimport { RootState } from \"../../reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Card, Col, Layout, Row } from \"antd\";\r\nimport \"./Login.css\";\r\nimport { AuthenticateRequest } from \"../../api/users\";\r\n\r\nconst Login: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const onLogin = (loginRequest: AuthenticateRequest) =>\r\n    authenticateDispatch(loginRequest)(dispatch);\r\n\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  const isLoggingIn = useSelector(\r\n    (state: RootState) => state.login.isLoggingIn\r\n  );\r\n\r\n  const loginError = useSelector((state: RootState) => state.login.error);\r\n\r\n  return isAuthenticated ? (\r\n    <Redirect to={{ pathname: \"dashboard\" }} />\r\n  ) : (\r\n    <Layout style={{ height: \"100%\" }}>\r\n      <Layout.Content style={{ padding: \"50px 50px\" }}>\r\n        <Row className=\"login__card-wrapper\">\r\n          <Col md={{ span: 12, offset: 6 }} xl={{ span: 8, offset: 8 }}>\r\n            <Card className=\"login__card\">\r\n              <h2>Sign in</h2>\r\n              <LoginForm\r\n                onSubmit={onLogin}\r\n                isLoggingIn={isLoggingIn}\r\n                loginError={loginError}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import axios from \"axios\";\r\nimport { User } from \"../models/User\";\r\nimport moment from \"moment\";\r\n\r\nexport interface GetWorklogsParams {\r\n  user: User;\r\n  from: Date;\r\n  to: Date;\r\n}\r\n\r\nconst formatDates = ({ from, to }: { from: Date; to: Date }) => {\r\n  const format = \"YYYY-MM-DD\";\r\n  return {\r\n    from: moment(from).format(format),\r\n    to: moment(to).format(format)\r\n  };\r\n};\r\n\r\nexport const getWorklogs = ({ from, to, user }: GetWorklogsParams) => {\r\n  const formattedDate = formatDates({ from, to });\r\n  return axios.get(\r\n    `/api/worklogs?from=${formattedDate.from}&to=${formattedDate.to}&accountId=${user.accountId}`\r\n  );\r\n};\r\n\r\nexport const postWorklog = (worklog: any) => {\r\n  return axios.post(\"api/worklogs\", worklog);\r\n};\r\n\r\nexport const deleteWorklog = ({\r\n  worklogId,\r\n  issueId\r\n}: {\r\n  worklogId: string;\r\n  issueId: string;\r\n}) => {\r\n  return axios.delete(`/api/worklogs/${issueId}/${worklogId}`);\r\n};\r\n","import { GetHolidayParams } from \"../api/holidays\";\r\nimport { Holiday } from \"../models/Holiday\";\r\n\r\nconst CACHE_KEY = \"HOLIDAYS\";\r\n\r\nclass HolidayCache {\r\n  constructor(private storage: Storage) {}\r\n\r\n  save(key: GetHolidayParams, holidays: Holiday[]): void {\r\n    const stringifiedKey = this.stringifyKey(key);\r\n\r\n    const storedHolidays = { ...this.readStorage(), [stringifiedKey]: holidays };\r\n\r\n    this.storage.setItem(CACHE_KEY, JSON.stringify(storedHolidays));\r\n  }\r\n\r\n  get(key: GetHolidayParams): Holiday[] {\r\n    const storedHolidays = this.readStorage();\r\n    return storedHolidays[this.stringifyKey(key)];\r\n  }\r\n\r\n  private stringifyKey(key: GetHolidayParams): string {\r\n    return `${key.country}-${key.month}-${key.year}`;\r\n  }\r\n\r\n  private readStorage(): Record<string, Holiday[]> {\r\n    const stringifiedResult = this.storage.getItem(CACHE_KEY);\r\n\r\n    if (!stringifiedResult) {\r\n      return {};\r\n    }\r\n\r\n    return JSON.parse(stringifiedResult);\r\n  }\r\n}\r\n\r\nconst holidayCache = new HolidayCache(localStorage);\r\n\r\nexport default holidayCache;\r\n","import { Dispatch } from \"redux\";\r\nimport {\r\n  errorLoadingWorklogsAction,\r\n  loadedHolidaysAction,\r\n  loadedWorklogsAction,\r\n  loadWorklogsAction,\r\n} from \"../pages/Home/worklogActions\";\r\nimport { getWorklogs, GetWorklogsParams } from \"../api/worklogs\";\r\nimport { getHolidays } from \"../api/holidays\";\r\n\r\nexport const getWorklogsDispatch = (params: GetWorklogsParams) => {\r\n  return (dispatch: Dispatch) => {\r\n    const month = params.from.getMonth();\r\n    const year = params.from.getFullYear();\r\n    dispatch(\r\n      loadWorklogsAction({\r\n        user: params.user,\r\n        month,\r\n        year,\r\n      })\r\n    );\r\n\r\n    getHolidays({ country: \"pl\", month: month + 1, year }).then((holidays) => dispatch(loadedHolidaysAction({ holidays })));\r\n\r\n    getWorklogs(params)\r\n      .then((worklogsResponse) => {\r\n        dispatch(loadedWorklogsAction(worklogsResponse.data));\r\n      })\r\n      .catch(() => {\r\n        dispatch(errorLoadingWorklogsAction());\r\n      });\r\n  };\r\n};\r\n","import axios from \"axios\";\r\nimport { isNil, mapValues } from \"lodash\";\r\nimport { Holiday } from \"../models/Holiday\";\r\nimport holidayCache from \"../services/holidaysCache\";\r\n\r\nexport interface GetHolidayParams {\r\n  /**\r\n   * Month numbered from 1 (January is 1)\r\n   */\r\n  month: number;\r\n  year: number;\r\n  /**\r\n   * Alpha 2 country code\r\n   */\r\n  country: string;\r\n}\r\n\r\nexport const getHolidays = (params: GetHolidayParams): Promise<Holiday[]> => {\r\n  const cached = holidayCache.get(params);\r\n  if(!isNil(cached)) {\r\n    return Promise.resolve(cached);\r\n  }\r\n\r\n  const stringParams = mapValues(params, (value) => value.toString());\r\n  const queryParams = new URLSearchParams(stringParams);\r\n  return axios.get(\"api/holidays\", { params: queryParams }).then(({ data }) => {\r\n    holidayCache.save(params, data);\r\n    return data;\r\n  });\r\n};\r\n","import { Moment } from \"moment\";\r\nimport moment from \"moment-timezone\";\r\n\r\nexport const getDateInTimezone = (\r\n  startDate: string,\r\n  userTimezone: string\r\n): Moment => {\r\n  return moment.tz(moment(startDate), userTimezone);\r\n};\r\n\r\nexport const getDateSpan = (current: Moment) => ({\r\n  from: current.startOf(\"month\").toDate(),\r\n  to: current.endOf(\"month\").toDate()\r\n});\r\n\r\nexport const isSunday = (date: Moment) => {\r\n  return date.isoWeekday() === 7;\r\n}\r\n\r\nexport const isSaturday = (date: Moment) => {\r\n  return date.isoWeekday() === 6;\r\n}","import axios, { AxiosResponse } from \"axios\";\r\nimport { IssueSearchResponse } from \"../models/Issue\";\r\n\r\nexport const issues = (\r\n  query: string\r\n): Promise<AxiosResponse<IssueSearchResponse[]>> =>\r\n  axios.get(\"/api/issues\", { params: { query } });\r\n","import React from \"react\";\r\nimport { Select, Spin } from \"antd\";\r\nimport { debounce } from \"lodash\";\r\nimport { issues } from \"../../../api/issues\";\r\nimport { IssueSearchResponse } from \"../../../models/Issue\";\r\n\r\ninterface IssueSearchProps {\r\n  onChange?: (issue: IssueSearchResponse | undefined) => void;\r\n}\r\n\r\ninterface IssueSearchState {\r\n  data: IssueSearchResponse[];\r\n  value: string;\r\n  fetching: boolean;\r\n}\r\n\r\nclass IssueSearch extends React.Component<IssueSearchProps, IssueSearchState> {\r\n  state: IssueSearchState = {\r\n    data: [],\r\n    value: \"\",\r\n    fetching: false\r\n  };\r\n  fetchId = 0;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.fetchIssues = debounce(this.fetchIssues, 500);\r\n  }\r\n\r\n  fetchIssues = (value: string) => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this.setState({ data: [], fetching: true });\r\n    this.fetchId += 1;\r\n    const currentFetchId = this.fetchId;\r\n    issues(value).then(result => {\r\n      if (currentFetchId === this.fetchId) {\r\n        const issues = result.data;\r\n        this.setState({ data: issues, fetching: false });\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChange = (issueId: string) => {\r\n    const issue: IssueSearchResponse | undefined = this.state.data.find(\r\n      (issue: IssueSearchResponse) => Number(issue.id) === Number(issueId)\r\n    );\r\n    let value = \"\";\r\n    if (issue) {\r\n      value = `${issue.key} - ${issue.summaryText}`;\r\n    }\r\n    this.setState({\r\n      value,\r\n      data: [],\r\n      fetching: false\r\n    });\r\n    this.props.onChange && this.props.onChange(issue);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"user__search\">\r\n        <Select\r\n          showSearch\r\n          style={{ width: \"100%\" }}\r\n          placeholder=\"Select issue\"\r\n          value={this.state.value as any}\r\n          onSearch={this.fetchIssues}\r\n          onChange={this.handleChange}\r\n          showArrow={false}\r\n          filterOption={false}\r\n          defaultActiveFirstOption={false}\r\n          notFoundContent={this.state.fetching ? <Spin size=\"small\" /> : null}\r\n        >\r\n          {(this.state.data as IssueSearchResponse[]).map(value => (\r\n            <Select.Option key={value.id}>\r\n              {value.key} - {value.summaryText}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IssueSearch;\r\n","import React, { DependencyList, useEffect } from \"react\";\r\nimport { DatePicker, Form, InputNumber, Typography } from \"antd\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport IssueSearch from \"../IssueSearch/IssueSearch\";\r\nimport * as moment from \"moment\";\r\n\r\nexport interface AddWorklogFormProps {\r\n  validationPassed: boolean;\r\n  initialDate: moment.Moment;\r\n  initialHours: number;\r\n  initialMinutes: number;\r\n  onChange: () => void;\r\n}\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 4 }\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 20 }\r\n  }\r\n};\r\n\r\nconst AddWorklogForm: React.FC<FormComponentProps & AddWorklogFormProps> = ({\r\n  form,\r\n  initialDate,\r\n  initialHours,\r\n  initialMinutes,\r\n  validationPassed,\r\n  onChange\r\n}) => {\r\n  const { getFieldDecorator } = form;\r\n\r\n  useEffect(() => {\r\n    form.resetFields([\"started\", \"minutes\", \"hours\"]);\r\n  }, [initialDate, initialHours, initialMinutes]);\r\n\r\n  return (\r\n    <Form onChange={onChange}>\r\n      <Form.Item label=\"Issue\" {...formItemLayout}>\r\n        {getFieldDecorator(\"issue\", {\r\n          rules: [{ required: true, message: \"Please select issue\" }]\r\n        })(<IssueSearch />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Started at\" {...formItemLayout}>\r\n        {getFieldDecorator(\"started\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: initialDate\r\n            .clone()\r\n            .hour(12)\r\n            .minute(0)\r\n            .second(0)\r\n        })(<DatePicker showTime={true} />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Hours\" labelCol={{ sm: 4 }} wrapperCol={{ sm: 4 }}>\r\n        {getFieldDecorator(\"hours\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: initialHours\r\n        })(<InputNumber min={0} max={24} />)}\r\n      </Form.Item>\r\n      <Form.Item label=\"Minutes\" labelCol={{ sm: 4 }} wrapperCol={{ sm: 4 }}>\r\n        {getFieldDecorator(\"minutes\", {\r\n          rules: [{ required: true, message: \"Please select date\" }],\r\n          initialValue: initialMinutes\r\n        })(<InputNumber min={0} max={59} />)}\r\n      </Form.Item>\r\n      {validationPassed ? (\r\n        \"\"\r\n      ) : (\r\n        <Typography.Text type=\"danger\">\r\n          Minutes or hours need to be provided\r\n        </Typography.Text>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddWorklogForm;\r\n","export interface SimpleDuration {\r\n  hours: number;\r\n  minutes: number;\r\n}\r\n\r\nexport const formatSecondsAsDuration = (seconds: number): string =>\r\n  formatDuration(toSimpleDuration(seconds));\r\n\r\nexport const formatDuration = ({ minutes, hours }: SimpleDuration): string => {\r\n  const stringMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n  return `${hours}:${stringMinutes}`;\r\n};\r\n\r\nexport const toSimpleDuration = (seconds: number): SimpleDuration => {\r\n  return {\r\n    hours: Math.floor(seconds / 3600),\r\n    minutes: (seconds / 60) % 60\r\n  };\r\n};\r\n","import AddWorklogForm from \"../AddWorklogForm/AddWorklogForm\";\r\nimport { Form, Modal } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport * as moment from \"moment\";\r\nimport { FormComponentProps } from \"antd/lib/form\";\r\nimport { postWorklog } from \"../../../api/worklogs\";\r\nimport { IssueSearchResponse } from \"../../../models/Issue\";\r\nimport { WorklogEntryRequest } from \"../../../models/Worklog\";\r\nimport { getInitialDurationValue } from \"./initialDurationValue\";\r\n\r\ninterface WorklogForm {\r\n  issue: IssueSearchResponse;\r\n  started: moment.Moment;\r\n  hours: number;\r\n  minutes: number;\r\n}\r\n\r\nconst formToWorklogRequest = ({\r\n  issue,\r\n  started,\r\n  hours,\r\n  minutes\r\n}: WorklogForm): WorklogEntryRequest => {\r\n  const issueId = issue.id;\r\n  const startedString = started.format();\r\n  const timeSpentSeconds = hours * 3600 + minutes * 60;\r\n  return {\r\n    issueId,\r\n    started: startedString,\r\n    timeSpent: timeSpentSeconds\r\n  };\r\n};\r\n\r\nexport interface AddWorklogFormModalProps {\r\n  selectedDate: moment.Moment;\r\n  modalVisible: boolean;\r\n  timeLoggedForSelectedDate: number;\r\n  onHideModal: () => void;\r\n  onAdded: () => void;\r\n}\r\n\r\nconst AddWorklogFormModal: React.FC<FormComponentProps &\r\n  AddWorklogFormModalProps> = ({\r\n  selectedDate,\r\n  modalVisible,\r\n  timeLoggedForSelectedDate,\r\n  onHideModal,\r\n  onAdded,\r\n  form\r\n}) => {\r\n  const [pending, setPending] = useState(false);\r\n  const [validationPassed, setValidationPassed] = useState(true);\r\n\r\n  const validateTimeSpent = () => {\r\n    const minutes = form.getFieldValue(\"minutes\");\r\n    const hours = form.getFieldDecorator(\"hours\");\r\n    const valid = minutes || hours;\r\n    setValidationPassed(!!valid);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    validateTimeSpent();\r\n    form.validateFields(err => {\r\n      if (!err && validationPassed) {\r\n        setPending(true);\r\n        const request = formToWorklogRequest(\r\n          form.getFieldsValue() as WorklogForm\r\n        );\r\n        postWorklog(request).then(() => {\r\n          setPending(false);\r\n          onAdded();\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleFormChange = () => {\r\n    validateTimeSpent();\r\n  };\r\n\r\n  const { hours, minutes } = getInitialDurationValue(timeLoggedForSelectedDate);\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Log Time\"\r\n      visible={modalVisible}\r\n      confirmLoading={pending}\r\n      onCancel={onHideModal}\r\n      onOk={handleOk}\r\n    >\r\n      <AddWorklogForm\r\n        form={form}\r\n        initialDate={selectedDate}\r\n        initialHours={hours}\r\n        initialMinutes={minutes}\r\n        validationPassed={validationPassed}\r\n        onChange={handleFormChange}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst WrappedAddWorklogFormModal = Form.create<\r\n  FormComponentProps & AddWorklogFormModalProps\r\n>()(AddWorklogFormModal);\r\n\r\nexport default WrappedAddWorklogFormModal;\r\n","import { SimpleDuration, toSimpleDuration } from \"../../../utils/duration\";\r\nimport { FULL_WORKDAY_IN_SECONDS } from \"../../../utils/constants\";\r\n\r\nexport const getInitialDurationValue = (\r\n  timeLoggedForSelectedDate: number\r\n): SimpleDuration => {\r\n  const leftTimeToLog = FULL_WORKDAY_IN_SECONDS - timeLoggedForSelectedDate;\r\n  const hasFullDayLogged = leftTimeToLog < 0;\r\n\r\n  if (hasFullDayLogged) {\r\n    return {\r\n      hours: 0,\r\n      minutes: 0\r\n    };\r\n  }\r\n\r\n  return toSimpleDuration(leftTimeToLog);\r\n};\r\n","export const FULL_WORKDAY_IN_SECONDS = 8 * 3600;\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport { formatSecondsAsDuration } from \"../../../utils/duration\";\r\nimport \"./DetailsTitle.css\";\r\n\r\nexport interface DetailsTitleProps {\r\n  date: moment.Moment;\r\n  totalLoggedTime: number;\r\n}\r\n\r\nexport const DetailsTitle: React.FC<DetailsTitleProps> = ({\r\n  date,\r\n  totalLoggedTime\r\n}) => {\r\n  return (\r\n    <div className=\"details__title\">\r\n      <span>{date.format(\"ll\")}</span>\r\n      <span>{formatSecondsAsDuration(totalLoggedTime)}</span>\r\n    </div>\r\n  );\r\n};\r\n","import { Worklog } from \"../../../models/Worklog\";\r\nimport { WorklogModel } from \"./groupWorklogsByDates\";\r\n\r\nexport const sumTotalLoggedTime = (\r\n  worklogs: (Worklog | WorklogModel)[]\r\n): number => {\r\n  if (!worklogs) {\r\n    return 0;\r\n  } else if (isWorklogs(worklogs)) {\r\n    return sumForWorklog(worklogs);\r\n  } else {\r\n    return sumForWorklogModels(worklogs as WorklogModel[]);\r\n  }\r\n};\r\n\r\nconst sumForWorklog = (worklogs: Worklog[]): number => {\r\n  return worklogs.reduce(\r\n    (sum, worklog) =>\r\n      sum +\r\n      worklog.worklogs.reduce(\r\n        (subSum, worklogItem) => subSum + worklogItem.timeSpentSeconds,\r\n        0\r\n      ),\r\n    0\r\n  );\r\n};\r\n\r\nconst sumForWorklogModels = (worklogs: WorklogModel[]): number => {\r\n  return worklogs.reduce((sum, worklog) => sum + worklog.timeSpent, 0);\r\n};\r\n\r\nconst isWorklogs = (value: any[]): value is Worklog[] => {\r\n  const firstItem = value[0];\r\n  if (!firstItem) {\r\n    return false;\r\n  }\r\n  return firstItem[\"worklogs\"] instanceof Array;\r\n};\r\n","export const issueUrl = (url: string, issueKey: string) => {\r\n  return `https://${url}/browse/${issueKey}`;\r\n};\r\n","import React from \"react\";\r\nimport { Button, Card, Modal, List, message } from \"antd\";\r\nimport \"./DetailsSider.css\";\r\nimport moment from \"moment\";\r\nimport { WorklogModel } from \"../utils/groupWorklogsByDates\";\r\nimport { DetailsTitle } from \"./DetailsTitle\";\r\nimport { sumTotalLoggedTime } from \"../utils/sumTotalLoggedTime\";\r\nimport { formatSecondsAsDuration } from \"../../../utils/duration\";\r\nimport { issueUrl } from \"../utils/issueUrl\";\r\nimport { deleteWorklog } from \"../../../api/worklogs\";\r\n\r\ninterface DetailsSiderProps {\r\n  jiraUrl: string;\r\n  selectedDate: moment.Moment;\r\n  worklogs: WorklogModel[];\r\n  canEdit: boolean;\r\n  onWorklogDeleted: () => void;\r\n}\r\n\r\nconst DetailsSider: React.FC<DetailsSiderProps> = ({\r\n  jiraUrl,\r\n  selectedDate,\r\n  worklogs,\r\n  canEdit,\r\n  onWorklogDeleted\r\n}) => {\r\n  const totalLoggedTime = sumTotalLoggedTime(worklogs);\r\n\r\n  const handleDelete = (worklog: WorklogModel) => {\r\n    Modal.confirm({\r\n      title: `Do you want to remove worklog?`,\r\n      content: `Confirm removing worklog from issue ${\r\n        worklog.issueKey\r\n      } logged at ${moment(worklog.started).format(\r\n        \"lll\"\r\n      )}. Time that was logged: ${formatSecondsAsDuration(worklog.timeSpent)}`,\r\n      onOk: () => {\r\n        return deleteWorklog({\r\n          worklogId: worklog.id,\r\n          issueId: worklog.issueId\r\n        })\r\n          .then(onWorklogDeleted)\r\n          .catch(() => message.error(\"Could not delete worklog\"));\r\n      },\r\n      onCancel: () => {}\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className=\"details-sider\"\r\n      title={DetailsTitle({ date: selectedDate, totalLoggedTime })}\r\n    >\r\n      <List\r\n        header={\r\n          <div className=\"list__header\">\r\n            <b>Logged Issues:</b>\r\n          </div>\r\n        }\r\n        dataSource={worklogs}\r\n        renderItem={value => (\r\n          <List.Item>\r\n            <List.Item.Meta\r\n              title={\r\n                <div className=\"worklog-list__title\">\r\n                  <a\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    href={issueUrl(jiraUrl, value.issueKey)}\r\n                  >\r\n                    {value.issueKey}\r\n                  </a>\r\n                  {canEdit ? (\r\n                    <Button\r\n                      onClick={() => handleDelete(value)}\r\n                      icon=\"delete\"\r\n                      size=\"small\"\r\n                    />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n              }\r\n              description={\r\n                <div className=\"issue__description\">\r\n                  <span>\r\n                    Started at: <b>{moment(value.started).format(\"lll\")}</b>\r\n                  </span>\r\n                  <span>\r\n                    Logged: <b>{formatSecondsAsDuration(value.timeSpent)}</b>\r\n                  </span>\r\n                </div>\r\n              }\r\n            />\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DetailsSider;\r\n","import { Worklog } from \"../../../models/Worklog\";\r\nimport { getDateInTimezone } from \"../../../utils/date\";\r\n\r\nexport interface WorklogModel {\r\n  id: string;\r\n  issueKey: string;\r\n  issueId: string;\r\n  timeSpent: number;\r\n  started: string;\r\n}\r\n\r\nexport type WorklogGroups = { [key: string]: WorklogModel[] };\r\n\r\nexport const DATE_FORMAT = \"YYYY-MM-DD\";\r\n\r\nconst mergeWorklogs = (group1: WorklogGroups, group2: WorklogGroups) => {\r\n  const result = Object.assign({}, group1);\r\n  return Object.keys(group2).reduce((previous, current) => {\r\n    const group2Value = group2[current];\r\n    const previousValue = previous[current] || [];\r\n    const mergedValue = [...previousValue, ...group2Value];\r\n    return { ...previous, [current]: mergedValue };\r\n  }, result);\r\n};\r\n\r\nexport const groupWorklogsByDates = (\r\n  worklogList: Worklog[],\r\n  userTimezone: string\r\n): WorklogGroups => {\r\n  if (!worklogList) {\r\n    return {};\r\n  }\r\n\r\n  return worklogList.reduce((groupedWorklogs, worklog) => {\r\n    const worklogs = worklog.worklogs.reduce(\r\n      (groupedWorklogEntries, worklogEntry) => {\r\n        const startDate = getDateInTimezone(\r\n          worklogEntry.started,\r\n          userTimezone\r\n        ).format(DATE_FORMAT);\r\n        const entries = groupedWorklogEntries[startDate] || [];\r\n        const newEntries = [\r\n          ...entries,\r\n          {\r\n            id: worklogEntry.id,\r\n            issueId: worklogEntry.issueId,\r\n            issueKey: worklog.issueKey,\r\n            timeSpent: worklogEntry.timeSpentSeconds,\r\n            started: worklogEntry.started\r\n          }\r\n        ];\r\n        return { ...groupedWorklogEntries, [startDate]: newEntries };\r\n      },\r\n      {} as WorklogGroups\r\n    );\r\n    return mergeWorklogs(groupedWorklogs, worklogs);\r\n  }, {});\r\n};\r\n","import { Moment } from \"moment\";\r\nimport { Holiday } from \"../../../models/Holiday\";\r\n\r\nexport const getHoliday = (holidays: Holiday[]) => (date: Moment): Holiday | null => {\r\n  const monthNumber = date.month() + 1;\r\n  const year = date.year();\r\n  const day = date.date();\r\n  return (\r\n    holidays.find(({date}) => {\r\n      return date.day === day && date.month === monthNumber && year === date.year;\r\n    }) || null\r\n  );\r\n};\r\n\r\nconst getHolidayNameByLang = (lang: string) => (holiday: Holiday) => {\r\n  const result = holiday.name.find((value) => value.lang === lang);\r\n  return result && result.text;\r\n};\r\n\r\nexport const getHolidayName = (holiday: Holiday): string => {\r\n  const getDefaultName = getHolidayNameByLang(\"pl\");\r\n  const getFallbackName = getHolidayNameByLang(\"en\");\r\n  return getDefaultName(holiday) || getFallbackName(holiday) || \"\";\r\n};\r\n","import React from \"react\";\r\nimport { DATE_FORMAT, WorklogGroups } from \"../utils/groupWorklogsByDates\";\r\nimport { Moment } from \"moment\";\r\nimport \"./DateCell.css\";\r\nimport { formatSecondsAsDuration } from \"../../../utils/duration\";\r\nimport { Typography } from \"antd\";\r\nimport { issueUrl } from \"../utils/issueUrl\";\r\nimport { FULL_WORKDAY_IN_SECONDS } from \"../../../utils/constants\";\r\nimport { isSaturday, isSunday } from \"../../../utils/date\";\r\nimport { Holiday } from \"../../../models/Holiday\";\r\nimport { isNil } from \"lodash\";\r\nimport { getHolidayName } from \"./utils\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst DateCellFactory = (worklogs: WorklogGroups, url: string, getHoliday: (value: Moment) => Holiday | null) => (\r\n  value: Moment\r\n) => {\r\n  const key = value.format(DATE_FORMAT);\r\n  const worklogsToRender = worklogs[key];\r\n  const total = worklogsToRender && worklogsToRender.reduce((sum, worklog) => sum + worklog.timeSpent, 0);\r\n  const fullDateLogged = total === FULL_WORKDAY_IN_SECONDS;\r\n  const holiday = getHoliday(value);\r\n\r\n  const getDateClassName = () => {\r\n    let classesToApply = [\"ant-fullcalendar-date\"];\r\n    if (isSunday(value) || !isNil(holiday)) {\r\n      classesToApply = [...classesToApply, \"calendar-holiday\"];\r\n    } else if (isSaturday(value)) {\r\n      classesToApply = [...classesToApply, \"calendar-saturday\"];\r\n    }\r\n    return classesToApply.join(\" \");\r\n  };\r\n\r\n  return (\r\n    <div className={getDateClassName()}>\r\n      <div className=\"ant-fullcalendar-value callendar-cell__header\">\r\n        <span className=\"callendar-cell__total-time\">\r\n          {holiday && <Text type=\"danger\">{getHolidayName(holiday)}</Text>}\r\n          {worklogsToRender && (\r\n            <Text type={fullDateLogged ? undefined : \"warning\"}>Total: {formatSecondsAsDuration(total)} </Text>\r\n          )}\r\n        </span>\r\n        <span className=\"callendar-cell__day\">{value.date()}</span>\r\n      </div>\r\n      <div className=\"ant-fullcalendar-content\">\r\n        {worklogsToRender && (\r\n          <div>\r\n            <ul className=\"worklogs\">\r\n              {worklogsToRender.map((worklog, index) => (\r\n                <li className=\"worklog-list-item\" key={`${worklog.issueKey}_${index}`}>\r\n                  <a target=\"_blank\" rel=\"noopener noreferrer\" href={issueUrl(url, worklog.issueKey)}>\r\n                    {worklog.issueKey}\r\n                  </a>\r\n                  <span>{formatSecondsAsDuration(worklog.timeSpent)}</span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateCellFactory;\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Select, Spin } from \"antd\";\r\nimport \"./UserSearch.css\";\r\nimport debounce from \"lodash/debounce\";\r\nimport { User } from \"../../../models/User\";\r\nimport { searchUsers } from \"../../../api/users\";\r\n\r\nconst fetchUsers = (\r\n  setState: (searchState: { data: User[]; fetching: boolean }) => void\r\n) => (value: string) => {\r\n  setState({\r\n    data: [],\r\n    fetching: true\r\n  });\r\n  if (value) {\r\n    searchUsers(value)\r\n      .then(response => response.data)\r\n      .then(data => {\r\n        setState({\r\n          data,\r\n          fetching: false\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport interface UserSearchProps {\r\n  user: User;\r\n  onUserSelect: (user: User) => void;\r\n}\r\n\r\ninterface UserSearchState {\r\n  data: User[];\r\n  value: string | undefined;\r\n  fetching: boolean;\r\n}\r\n\r\nconst UserSearch: React.FC<UserSearchProps> = ({ user, onUserSelect }) => {\r\n  const [state, setState] = useState<UserSearchState>({\r\n    data: [],\r\n    value: user.displayName,\r\n    fetching: false\r\n  });\r\n\r\n  const onSearch = debounce(fetchUsers(setState as any), 800) as any;\r\n\r\n  const onChange = (userKey: string) => {\r\n    const user = state.data.find(\r\n      (userData: User) => userData.accountId === userKey\r\n    );\r\n    setState({ value: user && user.displayName, data: [], fetching: false });\r\n    if (user) {\r\n      onUserSelect(user);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"user__search\">\r\n      <Select\r\n        showSearch\r\n        style={{ width: \"100%\" }}\r\n        placeholder=\"Select user\"\r\n        value={state.value as any}\r\n        onSearch={onSearch}\r\n        onChange={onChange}\r\n        showArrow={false}\r\n        filterOption={false}\r\n        defaultActiveFirstOption={false}\r\n        notFoundContent={state.fetching ? <Spin size=\"small\" /> : null}\r\n      >\r\n        {(state.data as User[]).map(value => (\r\n          <Select.Option key={value.accountId}>\r\n            {value.displayName}\r\n          </Select.Option>\r\n        ))}\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserSearch;\r\n","import moment, { Moment } from \"moment\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Button, Calendar, Icon, Spin, Statistic } from \"antd\";\r\nimport { WorklogGroups } from \"../utils/groupWorklogsByDates\";\r\nimport DateCellFactory from \"./DateCell\";\r\nimport { formatSecondsAsDuration } from \"../../../utils/duration\";\r\nimport \"./WorklogCalendar.css\";\r\nimport UserSearch from \"../UserSearch/UserSearch\";\r\nimport { User } from \"../../../models/User\";\r\nimport { Holiday } from \"../../../models/Holiday\";\r\nimport { getHoliday } from \"./utils\";\r\n\r\ninterface WorklogCalendarProps {\r\n  url: string;\r\n  isFetchingWorklogs: boolean;\r\n  userWorklogs: User;\r\n  worklogs: WorklogGroups;\r\n  selectedDate: moment.Moment;\r\n  totalLoggedTime: number;\r\n  holidays: Holiday[];\r\n  onAddWorklogClick: () => void;\r\n  onViewChanged: (selectedDate: moment.Moment, user: User) => void;\r\n  onRefresh: () => void;\r\n}\r\n\r\nconst WorklogCalendar: React.FC<WorklogCalendarProps> = ({\r\n  url,\r\n  isFetchingWorklogs,\r\n  worklogs,\r\n  selectedDate,\r\n  totalLoggedTime,\r\n  userWorklogs,\r\n  holidays,\r\n  onAddWorklogClick,\r\n  onViewChanged,\r\n  onRefresh,\r\n}) => {\r\n  const dateChanged = (value: Moment | undefined) => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    onViewChanged(value, userWorklogs);\r\n  };\r\n\r\n  const userSelected = (user: User) => {\r\n    if (user.accountId !== userWorklogs.accountId) {\r\n      onViewChanged(selectedDate, user);\r\n    }\r\n  };\r\n\r\n  const forward = () => {\r\n    const nextMonth = selectedDate.clone().add(1, \"month\");\r\n    dateChanged(nextMonth);\r\n  };\r\n\r\n  const backward = () => {\r\n    const previousMonth = selectedDate.clone().subtract(1, \"month\");\r\n    dateChanged(previousMonth);\r\n  };\r\n\r\n  const dateCellRenderer = DateCellFactory(worklogs, url, getHoliday(holidays));\r\n\r\n  return (\r\n    <Spin spinning={isFetchingWorklogs}>\r\n      <div className=\"worklog-calendar__header\">\r\n        <div className=\"worklog-calendar__total-summary\">\r\n          <Statistic title=\"Total logged:\" value={formatSecondsAsDuration(totalLoggedTime)} />\r\n        </div>\r\n        <Button type=\"primary\" icon=\"plus-circle\" className=\"worklog-calendar__button-add\" onClick={onAddWorklogClick}>\r\n          Add\r\n        </Button>\r\n        <div className=\"worklog-calendar__user\">\r\n          <UserSearch user={userWorklogs} onUserSelect={userSelected} />\r\n        </div>\r\n        <Button.Group>\r\n          <Button type=\"primary\" onClick={backward}>\r\n            <Icon type=\"left\" />\r\n            Backward\r\n          </Button>\r\n          <Button type=\"primary\" onClick={onRefresh}>\r\n            <Icon type=\"sync\" />\r\n            Refresh\r\n          </Button>\r\n          <Button type=\"primary\" onClick={forward}>\r\n            Forward\r\n            <Icon type=\"right\" />\r\n          </Button>\r\n        </Button.Group>\r\n      </div>\r\n      <Calendar value={selectedDate} onChange={dateChanged} dateFullCellRender={dateCellRenderer} />\r\n    </Spin>\r\n  );\r\n};\r\n\r\nexport default WorklogCalendar;\r\n","import { message } from \"antd\";\r\nimport { isNil } from \"lodash\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getUser } from \"../../api/users\";\r\nimport { getWorklogsDispatch } from \"../../dispatchers/worklogs\";\r\nimport { User } from \"../../models/User\";\r\nimport { RootState } from \"../../reducer\";\r\nimport { getDateSpan } from \"../../utils/date\";\r\nimport { useQuery } from \"../../utils/hooks\";\r\nimport AddWorklogFormModal from \"./AddWorklogFormModal/AddWorklogFormModal\";\r\nimport DetailsSider from \"./DetailsSider/DetailsSider\";\r\nimport \"./Home.css\";\r\nimport { getWorklogForDate } from \"./utils/getWorklogForDate\";\r\nimport { groupWorklogsByDates } from \"./utils/groupWorklogsByDates\";\r\nimport { sumTotalLoggedTime } from \"./utils/sumTotalLoggedTime\";\r\nimport WorklogCalendar from \"./WorklogCalendar/WorklogCalendar\";\r\n\r\nconst getInitialDate = ({\r\n  month,\r\n  year,\r\n  day,\r\n}: {\r\n  month: string | number | null;\r\n  year: string | number | null;\r\n  day: string | number | null;\r\n}) => {\r\n  if (!isNil(month) && !isNil(year) && !isNil(day)) {\r\n    return moment([year, month, day]);\r\n  }\r\n  return moment();\r\n};\r\n\r\nconst Home: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchWorklogs = (from: Date, to: Date, user: User) => {\r\n    getWorklogsDispatch({ from, to, user: user })(dispatch);\r\n  };\r\n\r\n  const history = useHistory();\r\n  const query = useQuery();\r\n\r\n  const isFetchingWorklogs = useSelector((state: RootState) => state.worklogs.isFetchingWorklogs);\r\n\r\n  const appUser = useSelector((state: RootState) => state.appState.user) as User;\r\n\r\n  const url = useSelector((state: RootState) => state.appState.url) || \"\";\r\n\r\n  const userTimezone = useSelector((state: RootState) => {\r\n    const user = state.appState.user;\r\n    return user && user.timeZone;\r\n  }) as string;\r\n\r\n  const errorWhileFetchingWorklogs = useSelector((state: RootState) => state.worklogs.error);\r\n\r\n  const { worklogs, month, year, day, user, holidays } = useSelector((state: RootState) => state.worklogs);\r\n\r\n  const worklogsByDate = groupWorklogsByDates(worklogs, userTimezone);\r\n  const totalLoggedTime = sumTotalLoggedTime(worklogs);\r\n\r\n  const [selectedDate, setSelectedDate] = useState(getInitialDate({ month, year, day }));\r\n\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n\r\n  const setQueryParams = (keys: { [key: string]: string | number }) => {\r\n    const urlParams = new URLSearchParams();\r\n    Object.entries(keys).forEach(([key, value]) => urlParams.set(key, value.toString()));\r\n    history.push(`?${urlParams.toString()}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (errorWhileFetchingWorklogs) {\r\n      message.error(\"Could not fetch worklogs. Please try again.\");\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { from, to } = getDateSpan(\r\n      getInitialDate({\r\n        year: query.get(\"year\"),\r\n        month: query.get(\"month\"),\r\n        day: query.get(\"day\"),\r\n      })\r\n    );\r\n    const accountId = query.get(\"user\");\r\n    if (accountId) {\r\n      getUser(accountId as string)\r\n        .then(({ data }) => {\r\n          fetchWorklogs(from, to, data);\r\n        })\r\n        .catch(() => {\r\n          message.error(`Could not fetch user with accountID: ${accountId}`);\r\n        });\r\n    } else {\r\n      fetchWorklogs(from, to, appUser);\r\n    }\r\n  }, []);\r\n\r\n  const onViewChanged = (date: moment.Moment, changedUser: User) => {\r\n    setSelectedDate(date);\r\n    const changedYear = date.year();\r\n    const changedMonth = date.month();\r\n    const changedDay = date.date();\r\n    setQueryParams({\r\n      year: changedYear,\r\n      month: changedMonth,\r\n      day: changedDay,\r\n      user: changedUser.accountId,\r\n    });\r\n\r\n    if (changedMonth !== month || changedYear !== year || (user && user.accountId) !== changedUser.accountId) {\r\n      const { from, to } = getDateSpan(moment([changedYear, changedMonth]));\r\n\r\n      fetchWorklogs(from, to, changedUser);\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    if (user) {\r\n      const { from, to } = getDateSpan(selectedDate);\r\n      fetchWorklogs(from, to, user);\r\n    }\r\n  };\r\n\r\n  const handleShowModal = () => {\r\n    setModalVisible(true);\r\n  };\r\n\r\n  const handleHideModal = () => {\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const handleAdded = () => {\r\n    handleRefresh();\r\n    handleHideModal();\r\n  };\r\n\r\n  const initialized = () => !isNil(user) && !isNil(month) && !isNil(year);\r\n  const worklogForSelectedDate = getWorklogForDate(worklogsByDate, selectedDate);\r\n\r\n  const timeLoggedForSelectedDate = sumTotalLoggedTime(worklogForSelectedDate);\r\n\r\n  const canEdit = () => {\r\n    return (user && user.accountId) === appUser.accountId;\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      {initialized() ? (\r\n        <>\r\n          <div className=\"home__container\">\r\n            <div className=\"home__content\">\r\n              <WorklogCalendar\r\n                url={url}\r\n                holidays={holidays}\r\n                userWorklogs={user as User}\r\n                isFetchingWorklogs={isFetchingWorklogs}\r\n                selectedDate={selectedDate}\r\n                onViewChanged={onViewChanged}\r\n                onAddWorklogClick={handleShowModal}\r\n                onRefresh={handleRefresh}\r\n                worklogs={worklogsByDate}\r\n                totalLoggedTime={totalLoggedTime}\r\n              />\r\n            </div>\r\n            <div className=\"home__sider\">\r\n              <DetailsSider\r\n                jiraUrl={url}\r\n                selectedDate={selectedDate}\r\n                worklogs={worklogForSelectedDate}\r\n                canEdit={canEdit()}\r\n                onWorklogDeleted={handleRefresh}\r\n              />\r\n            </div>\r\n          </div>\r\n          <AddWorklogFormModal\r\n            selectedDate={selectedDate}\r\n            modalVisible={modalVisible}\r\n            timeLoggedForSelectedDate={timeLoggedForSelectedDate}\r\n            onHideModal={handleHideModal}\r\n            onAdded={handleAdded}\r\n          />\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nexport function useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n","import { DATE_FORMAT, WorklogGroups } from \"./groupWorklogsByDates\";\r\nimport moment from \"moment\";\r\n\r\nexport const getWorklogForDate = (\r\n  worklogGroups: WorklogGroups,\r\n  date: moment.Moment\r\n) => {\r\n  const key = date.format(DATE_FORMAT);\r\n  return worklogGroups[key] || [];\r\n};\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { User } from \"../../../models/User\";\r\nimport { Icon, Menu } from \"antd\";\r\nimport SubMenu from \"antd/es/menu/SubMenu\";\r\nimport \"./UserInfo.css\";\r\n\r\ninterface Props {\r\n  user: User;\r\n  onLogout: () => void;\r\n}\r\n\r\nconst UserInfo: React.FC<PropsWithChildren<Props>> = ({\r\n  user,\r\n  onLogout,\r\n  children\r\n}) => {\r\n  return (\r\n    <Menu\r\n      theme=\"dark\"\r\n      mode=\"horizontal\"\r\n      className=\"user-info__menu\"\r\n      selectable={false}\r\n    >\r\n      <SubMenu\r\n        title={\r\n          <span>\r\n            <Icon type=\"user\" />\r\n            {user.displayName}\r\n          </span>\r\n        }\r\n      >\r\n        <Menu.Item disabled={true}>\r\n          <img\r\n            alt=\"avatar\"\r\n            src={user.avatarUrls[\"32x32\"]}\r\n            className=\"user-info__avatar\"\r\n          />\r\n          {user.emailAddress}\r\n        </Menu.Item>\r\n        <Menu.Item disabled={true}>Timezone: {user.timeZone}</Menu.Item>\r\n        <Menu.Item onClick={onLogout}>\r\n          <Icon type=\"logout\" />\r\n          Logout\r\n        </Menu.Item>\r\n      </SubMenu>\r\n      {children && (\r\n        <Menu.Item className=\"user-info__extras\">{children}</Menu.Item>\r\n      )}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport { Icon, Layout } from \"antd\";\r\nimport \"./MainLayout.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../reducer\";\r\nimport UserInfo from \"../../pages/Home/UserInfo/UserInfo\";\r\nimport { User } from \"../../models/User\";\r\nimport { logoutDispatch } from \"../../dispatchers/authenticate\";\r\n\r\nconst { Header, Content } = Layout;\r\n// @ts-ignore\r\nconst MainLayout = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n  const onLogout = () => dispatch(logoutDispatch());\r\n  const user = useSelector((state: RootState) => state.appState.user) as User;\r\n\r\n  return (\r\n    <Layout className=\"main-layout\">\r\n      <Header className=\"main-layout__header\">\r\n        <UserInfo user={user} onLogout={onLogout}>\r\n          <a\r\n            href=\"https://github.com/iczajkow/jira-web-timesheet\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <Icon type=\"github\" style={{ fontSize: \"24px\" }} />\r\n          </a>\r\n        </UserInfo>\r\n      </Header>\r\n      <Content className=\"main-layout__content\">{children}</Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport MainLayout from \"./components/MainLayout/MainLayout\";\r\n\r\n// @ts-ignore\r\nconst PrivateRoute = ({ children, ...rest }) => {\r\n  const isAuthenticated = useSelector(\r\n    (state: RootState) => state.appState.isAuthenticated\r\n  );\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        isAuthenticated ? (\r\n          <MainLayout>{children}</MainLayout>\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from \"./pages/Login/Login\";\r\nimport Home from \"./pages/Home/Home\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nconst Routes: React.FC = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <PrivateRoute path=\"/dashboard\">\r\n        <Home />\r\n      </PrivateRoute>\r\n      <Route path=\"*\">\r\n        <Redirect to={{ pathname: \"dashboard\" }} />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import { connect } from \"react-redux\";\r\nimport { RootState } from \"./reducer\";\r\nimport React from \"react\";\r\nimport { checkAuthenticateDispatch } from \"./dispatchers/authenticate\";\r\nimport Routes from \"./Routes\";\r\n\r\ninterface Props {\r\n  checkAuthenticationConnect: () => void;\r\n  isAuthenticated: boolean | null;\r\n}\r\n\r\nconst AppEntry: React.FC<Props> = ({\r\n  checkAuthenticationConnect,\r\n  isAuthenticated\r\n}) => {\r\n  React.useEffect(() => {\r\n    checkAuthenticationConnect();\r\n  }, []);\r\n  return isAuthenticated != null ? <Routes /> : null;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  isAuthenticated: state.appState.isAuthenticated\r\n});\r\nconst mapDispatchToProps = {\r\n  checkAuthenticationConnect: checkAuthenticateDispatch\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppEntry as any);\r\n","import axios from \"axios\";\r\nimport { EnhancedStore } from \"@reduxjs/toolkit\";\r\nimport { clearUserAction } from \"../appActions\";\r\n\r\nconst interceptors = ({ dispatch }: EnhancedStore) => {\r\n  axios.interceptors.response.use(undefined, (error: any) => {\r\n    if (error.response.status === 401) {\r\n      dispatch(clearUserAction());\r\n    }\r\n    return Promise.reject(error);\r\n  });\r\n};\r\n\r\nexport default interceptors;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { rootReducer } from \"./reducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppEntry from \"./AppEntry\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport \"moment/locale/en-gb\";\r\nimport en_GB from \"antd/lib/locale-provider/en_GB\";\r\nimport interceptors from \"./api/interceptors\";\r\n\r\nconst store = configureStore({ reducer: rootReducer });\r\n\r\ninterceptors(store);\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ConfigProvider locale={en_GB}>\r\n      <Provider store={store}>\r\n        <AppEntry />\r\n      </Provider>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}